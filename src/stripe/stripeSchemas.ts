/**
 * Generated by @openapi-codegen
 *
 * @version 2020-08-27
 */
/**
 * This is an object representing a Stripe account. You can retrieve it to see
 * properties on the account like its current e-mail address or if the account is
 * enabled yet to make live charges.
 *
 * Some properties, marked below, are available only to platforms that want to
 * [create and manage Express or Custom accounts](https://stripe.com/docs/connect/accounts).
 *
 * @x-resourceId account
 */
export type Account = {
  /*
   * Business information about the account.
   */
  business_profile?: AccountBusinessProfile | null;
  /*
   * The business type.
   *
   * @x-stripeBypassValidation true
   */
  business_type?: "company" | "government_entity" | "individual" | "non_profit";
  capabilities?: AccountCapabilities;
  /*
   * Whether the account can create live charges.
   */
  charges_enabled?: boolean;
  company?: LegalEntityCompany;
  controller?: AccountController;
  /*
   * The account's country.
   *
   * @maxLength 5000
   */
  country?: string;
  /*
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   *
   * @format unix-time
   */
  created?: number;
  /*
   * Three-letter ISO currency code representing the default currency for the account. This must be a currency that [Stripe supports in the account's country](https://stripe.com/docs/payouts).
   *
   * @maxLength 5000
   */
  default_currency?: string;
  /*
   * Whether account details have been submitted. Standard accounts cannot receive payouts before this is true.
   */
  details_submitted?: boolean;
  /*
   * An email address associated with the account. You can treat this as metadata: it is not used for authentication or messaging account holders.
   *
   * @maxLength 5000
   */
  email?: string | null;
  /*
   * External accounts (bank accounts and debit cards) currently attached to this account
   */
  external_accounts?: {
    /*
     * The list contains all external accounts that have been attached to the Stripe account. These may be bank accounts or cards.
     */
    data: (BankAccount | Card)[];
    /*
     * True if this list has another page of items after this one that can be fetched.
     */
    has_more: boolean;
    /*
     * String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
     */
    object: "list";
    /*
     * The URL where this list can be accessed.
     *
     * @maxLength 5000
     */
    url: string;
  };
  /*
   * Unique identifier for the object.
   *
   * @maxLength 5000
   */
  id: string;
  individual?: Person;
  /*
   * Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
   */
  metadata?: {
    [key: string]: string;
  };
  /*
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: "account";
  /*
   * Whether Stripe can send payouts to this account.
   */
  payouts_enabled?: boolean;
  requirements?: AccountRequirements;
  /*
   * Options for customizing how the account functions within Stripe.
   */
  settings?: AccountSettings | null;
  tos_acceptance?: AccountTosAcceptance;
  /*
   * The Stripe account type. Can be `standard`, `express`, or `custom`.
   */
  type?: "custom" | "express" | "standard";
};

export type AccountBacsDebitPaymentsSettings = {
  /*
   * The Bacs Direct Debit Display Name for this account. For payments made with Bacs Direct Debit, this will appear on the mandate, and as the statement descriptor.
   *
   * @maxLength 5000
   */
  display_name?: string;
};

export type AccountBrandingSettings = {
  /*
   * (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) An icon for the account. Must be square and at least 128px x 128px.
   */
  icon?: string | File | null;
  /*
   * (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) A logo for the account that will be used in Checkout instead of the icon and without the account's name next to it if provided. Must be at least 128px x 128px.
   */
  logo?: string | File | null;
  /*
   * A CSS hex color value representing the primary branding color for this account
   *
   * @maxLength 5000
   */
  primary_color?: string | null;
  /*
   * A CSS hex color value representing the secondary branding color for this account
   *
   * @maxLength 5000
   */
  secondary_color?: string | null;
};

export type AccountBusinessProfile = {
  /*
   * [The merchant category code for the account](https://stripe.com/docs/connect/setting-mcc). MCCs are used to classify businesses based on the goods or services they provide.
   *
   * @maxLength 5000
   */
  mcc?: string | null;
  /*
   * The customer-facing business name.
   *
   * @maxLength 5000
   */
  name?: string | null;
  /*
   * Internal-only description of the product sold or service provided by the business. It's used by Stripe for risk and underwriting purposes.
   *
   * @maxLength 40000
   */
  product_description?: string | null;
  /*
   * A publicly available mailing address for sending support issues to.
   */
  support_address?: Address | null;
  /*
   * A publicly available email address for sending support issues to.
   *
   * @maxLength 5000
   */
  support_email?: string | null;
  /*
   * A publicly available phone number to call with support issues.
   *
   * @maxLength 5000
   */
  support_phone?: string | null;
  /*
   * A publicly available website for handling support issues.
   *
   * @maxLength 5000
   */
  support_url?: string | null;
  /*
   * The business's publicly available website.
   *
   * @maxLength 5000
   */
  url?: string | null;
};

export type AccountCapabilities = {
  /*
   * The status of the ACSS Direct Debits payments capability of the account, or whether the account can directly process ACSS Direct Debits charges.
   */
  acss_debit_payments?: "active" | "inactive" | "pending";
  /*
   * The status of the Afterpay Clearpay capability of the account, or whether the account can directly process Afterpay Clearpay charges.
   */
  afterpay_clearpay_payments?: "active" | "inactive" | "pending";
  /*
   * The status of the BECS Direct Debit (AU) payments capability of the account, or whether the account can directly process BECS Direct Debit (AU) charges.
   */
  au_becs_debit_payments?: "active" | "inactive" | "pending";
  /*
   * The status of the Bacs Direct Debits payments capability of the account, or whether the account can directly process Bacs Direct Debits charges.
   */
  bacs_debit_payments?: "active" | "inactive" | "pending";
  /*
   * The status of the Bancontact payments capability of the account, or whether the account can directly process Bancontact charges.
   */
  bancontact_payments?: "active" | "inactive" | "pending";
  /*
   * The status of the boleto payments capability of the account, or whether the account can directly process boleto charges.
   */
  boleto_payments?: "active" | "inactive" | "pending";
  /*
   * The status of the card issuing capability of the account, or whether you can use Issuing to distribute funds on cards
   */
  card_issuing?: "active" | "inactive" | "pending";
  /*
   * The status of the card payments capability of the account, or whether the account can directly process credit and debit card charges.
   */
  card_payments?: "active" | "inactive" | "pending";
  /*
   * The status of the Cartes Bancaires payments capability of the account, or whether the account can directly process Cartes Bancaires card charges in EUR currency.
   */
  cartes_bancaires_payments?: "active" | "inactive" | "pending";
  /*
   * The status of the EPS payments capability of the account, or whether the account can directly process EPS charges.
   */
  eps_payments?: "active" | "inactive" | "pending";
  /*
   * The status of the FPX payments capability of the account, or whether the account can directly process FPX charges.
   */
  fpx_payments?: "active" | "inactive" | "pending";
  /*
   * The status of the giropay payments capability of the account, or whether the account can directly process giropay charges.
   */
  giropay_payments?: "active" | "inactive" | "pending";
  /*
   * The status of the GrabPay payments capability of the account, or whether the account can directly process GrabPay charges.
   */
  grabpay_payments?: "active" | "inactive" | "pending";
  /*
   * The status of the iDEAL payments capability of the account, or whether the account can directly process iDEAL charges.
   */
  ideal_payments?: "active" | "inactive" | "pending";
  /*
   * The status of the JCB payments capability of the account, or whether the account (Japan only) can directly process JCB credit card charges in JPY currency.
   */
  jcb_payments?: "active" | "inactive" | "pending";
  /*
   * The status of the legacy payments capability of the account.
   */
  legacy_payments?: "active" | "inactive" | "pending";
  /*
   * The status of the OXXO payments capability of the account, or whether the account can directly process OXXO charges.
   */
  oxxo_payments?: "active" | "inactive" | "pending";
  /*
   * The status of the P24 payments capability of the account, or whether the account can directly process P24 charges.
   */
  p24_payments?: "active" | "inactive" | "pending";
  /*
   * The status of the SEPA Direct Debits payments capability of the account, or whether the account can directly process SEPA Direct Debits charges.
   */
  sepa_debit_payments?: "active" | "inactive" | "pending";
  /*
   * The status of the Sofort payments capability of the account, or whether the account can directly process Sofort charges.
   */
  sofort_payments?: "active" | "inactive" | "pending";
  /*
   * The status of the tax reporting 1099-K (US) capability of the account.
   */
  tax_reporting_us_1099_k?: "active" | "inactive" | "pending";
  /*
   * The status of the tax reporting 1099-MISC (US) capability of the account.
   */
  tax_reporting_us_1099_misc?: "active" | "inactive" | "pending";
  /*
   * The status of the transfers capability of the account, or whether your platform can transfer funds to the account.
   */
  transfers?: "active" | "inactive" | "pending";
};

export type AccountCapabilityRequirements = {
  /*
   * Date by which the fields in `currently_due` must be collected to keep the capability enabled for the account. These fields may disable the capability sooner if the next threshold is reached before they are collected.
   *
   * @format unix-time
   */
  current_deadline?: number | null;
  /*
   * Fields that need to be collected to keep the capability enabled. If not collected by `current_deadline`, these fields appear in `past_due` as well, and the capability is disabled.
   */
  currently_due: string[];
  /*
   * If the capability is disabled, this string describes why. Can be `requirements.past_due`, `requirements.pending_verification`, `listed`, `platform_paused`, `rejected.fraud`, `rejected.listed`, `rejected.terms_of_service`, `rejected.other`, `under_review`, or `other`.
   *
   * `rejected.unsupported_business` means that the account's business is not supported by the capability. For example, payment methods may restrict the businesses they support in their terms of service:
   *
   * - [Afterpay Clearpay's terms of service](/afterpay-clearpay/legal#restricted-businesses)
   *
   * If you believe that the rejection is in error, please contact support@stripe.com for assistance.
   *
   * @maxLength 5000
   */
  disabled_reason?: string | null;
  /*
   * Fields that are `currently_due` and need to be collected again because validation or verification failed.
   */
  errors: AccountRequirementsError[];
  /*
   * Fields that need to be collected assuming all volume thresholds are reached. As they become required, they appear in `currently_due` as well, and `current_deadline` becomes set.
   */
  eventually_due: string[];
  /*
   * Fields that weren't collected by `current_deadline`. These fields need to be collected to enable the capability on the account.
   */
  past_due: string[];
  /*
   * Fields that may become required depending on the results of verification or review. Will be an empty array unless an asynchronous verification is pending. If verification fails, these fields move to `eventually_due`, `currently_due`, or `past_due`.
   */
  pending_verification: string[];
};

export type AccountCardIssuingSettings = {
  tos_acceptance?: CardIssuingAccountTermsOfService;
};

export type AccountCardPaymentsSettings = {
  decline_on?: AccountDeclineChargeOn;
  /*
   * The default text that appears on credit card statements when a charge is made. This field prefixes any dynamic `statement_descriptor` specified on the charge. `statement_descriptor_prefix` is useful for maximizing descriptor space for the dynamic portion.
   *
   * @maxLength 5000
   */
  statement_descriptor_prefix?: string | null;
};

export type AccountController = {
  /*
   * `true` if the Connect application retrieving the resource controls the account and can therefore exercise [platform controls](https://stripe.com/docs/connect/platform-controls-for-standard-accounts). Otherwise, this field is null.
   */
  is_controller?: boolean;
  /*
   * The controller type. Can be `application`, if a Connect application controls the account, or `account`, if the account controls itself.
   */
  type?: "account" | "application";
};

export type AccountDashboardSettings = {
  /*
   * The display name for this account. This is used on the Stripe Dashboard to differentiate between accounts.
   *
   * @maxLength 5000
   */
  display_name?: string | null;
  /*
   * The timezone used in the Stripe Dashboard for this account. A list of possible time zone values is maintained at the [IANA Time Zone Database](http://www.iana.org/time-zones).
   *
   * @maxLength 5000
   */
  timezone?: string | null;
};

export type AccountDeclineChargeOn = {
  /*
   * Whether Stripe automatically declines charges with an incorrect ZIP or postal code. This setting only applies when a ZIP or postal code is provided and they fail bank verification.
   */
  avs_failure: boolean;
  /*
   * Whether Stripe automatically declines charges with an incorrect CVC. This setting only applies when a CVC is provided and it fails bank verification.
   */
  cvc_failure: boolean;
};

/**
 * Account Links are the means by which a Connect platform grants a connected account permission to access
 * Stripe-hosted applications, such as Connect Onboarding.
 *
 * Related guide: [Connect Onboarding](https://stripe.com/docs/connect/connect-onboarding).
 *
 * @x-resourceId account_link
 */
export type AccountLink = {
  /*
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   *
   * @format unix-time
   */
  created: number;
  /*
   * The timestamp at which this account link will expire.
   *
   * @format unix-time
   */
  expires_at: number;
  /*
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: "account_link";
  /*
   * The URL for the account link.
   *
   * @maxLength 5000
   */
  url: string;
};

export type AccountPaymentsSettings = {
  /*
   * The default text that appears on credit card statements when a charge is made. This field prefixes any dynamic `statement_descriptor` specified on the charge.
   *
   * @maxLength 5000
   */
  statement_descriptor?: string | null;
  /*
   * The Kana variation of the default text that appears on credit card statements when a charge is made (Japan only)
   *
   * @maxLength 5000
   */
  statement_descriptor_kana?: string | null;
  /*
   * The Kanji variation of the default text that appears on credit card statements when a charge is made (Japan only)
   *
   * @maxLength 5000
   */
  statement_descriptor_kanji?: string | null;
};

export type AccountPayoutSettings = {
  /*
   * A Boolean indicating if Stripe should try to reclaim negative balances from an attached bank account. See our [Understanding Connect Account Balances](https://stripe.com/docs/connect/account-balances) documentation for details. Default value is `true` for Express accounts and `false` for Custom accounts.
   */
  debit_negative_balances: boolean;
  schedule: TransferSchedule;
  /*
   * The text that appears on the bank account statement for payouts. If not set, this defaults to the platform's bank descriptor as set in the Dashboard.
   *
   * @maxLength 5000
   */
  statement_descriptor?: string | null;
};

export type AccountRequirements = {
  /*
   * Date by which the fields in `currently_due` must be collected to keep the account enabled. These fields may disable the account sooner if the next threshold is reached before they are collected.
   *
   * @format unix-time
   */
  current_deadline?: number | null;
  /*
   * Fields that need to be collected to keep the account enabled. If not collected by `current_deadline`, these fields appear in `past_due` as well, and the account is disabled.
   */
  currently_due?: string[] | null;
  /*
   * If the account is disabled, this string describes why. Can be `requirements.past_due`, `requirements.pending_verification`, `listed`, `platform_paused`, `rejected.fraud`, `rejected.listed`, `rejected.terms_of_service`, `rejected.other`, `under_review`, or `other`.
   *
   * @maxLength 5000
   */
  disabled_reason?: string | null;
  /*
   * Fields that are `currently_due` and need to be collected again because validation or verification failed.
   */
  errors?: AccountRequirementsError[] | null;
  /*
   * Fields that need to be collected assuming all volume thresholds are reached. As they become required, they appear in `currently_due` as well, and `current_deadline` becomes set.
   */
  eventually_due?: string[] | null;
  /*
   * Fields that weren't collected by `current_deadline`. These fields need to be collected to enable the account.
   */
  past_due?: string[] | null;
  /*
   * Fields that may become required depending on the results of verification or review. Will be an empty array unless an asynchronous verification is pending. If verification fails, these fields move to `eventually_due`, `currently_due`, or `past_due`.
   */
  pending_verification?: string[] | null;
};

export type AccountRequirementsError = {
  /*
   * The code for the type of error.
   *
   * @x-stripeBypassValidation true
   */
  code:
    | "invalid_address_city_state_postal_code"
    | "invalid_street_address"
    | "invalid_value_other"
    | "verification_document_address_mismatch"
    | "verification_document_address_missing"
    | "verification_document_corrupt"
    | "verification_document_country_not_supported"
    | "verification_document_dob_mismatch"
    | "verification_document_duplicate_type"
    | "verification_document_expired"
    | "verification_document_failed_copy"
    | "verification_document_failed_greyscale"
    | "verification_document_failed_other"
    | "verification_document_failed_test_mode"
    | "verification_document_fraudulent"
    | "verification_document_id_number_mismatch"
    | "verification_document_id_number_missing"
    | "verification_document_incomplete"
    | "verification_document_invalid"
    | "verification_document_issue_or_expiry_date_missing"
    | "verification_document_manipulated"
    | "verification_document_missing_back"
    | "verification_document_missing_front"
    | "verification_document_name_mismatch"
    | "verification_document_name_missing"
    | "verification_document_nationality_mismatch"
    | "verification_document_not_readable"
    | "verification_document_not_signed"
    | "verification_document_not_uploaded"
    | "verification_document_photo_mismatch"
    | "verification_document_too_large"
    | "verification_document_type_not_supported"
    | "verification_failed_address_match"
    | "verification_failed_business_iec_number"
    | "verification_failed_document_match"
    | "verification_failed_id_number_match"
    | "verification_failed_keyed_identity"
    | "verification_failed_keyed_match"
    | "verification_failed_name_match"
    | "verification_failed_other"
    | "verification_failed_tax_id_match"
    | "verification_failed_tax_id_not_issued"
    | "verification_missing_executives"
    | "verification_missing_owners"
    | "verification_requires_additional_memorandum_of_associations";
  /*
   * An informative message that indicates the error type and provides additional details about the error.
   *
   * @maxLength 5000
   */
  reason: string;
  /*
   * The specific user onboarding requirement field (in the requirements hash) that needs to be resolved.
   *
   * @maxLength 5000
   */
  requirement: string;
};

export type AccountSepaDebitPaymentsSettings = {
  /*
   * SEPA creditor identifier that identifies the company making the payment.
   *
   * @maxLength 5000
   */
  creditor_id?: string;
};

export type AccountSettings = {
  bacs_debit_payments?: AccountBacsDebitPaymentsSettings;
  branding: AccountBrandingSettings;
  card_issuing?: AccountCardIssuingSettings;
  card_payments: AccountCardPaymentsSettings;
  dashboard: AccountDashboardSettings;
  payments: AccountPaymentsSettings;
  payouts?: AccountPayoutSettings;
  sepa_debit_payments?: AccountSepaDebitPaymentsSettings;
};

export type AccountTosAcceptance = {
  /*
   * The Unix timestamp marking when the account representative accepted their service agreement
   *
   * @format unix-time
   */
  date?: number | null;
  /*
   * The IP address from which the account representative accepted their service agreement
   *
   * @maxLength 5000
   */
  ip?: string | null;
  /*
   * The user's service agreement type
   *
   * @maxLength 5000
   */
  service_agreement?: string;
  /*
   * The user agent of the browser from which the account representative accepted their service agreement
   *
   * @maxLength 5000
   */
  user_agent?: string | null;
};

export type Address = {
  /*
   * City, district, suburb, town, or village.
   *
   * @maxLength 5000
   */
  city?: string | null;
  /*
   * Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).
   *
   * @maxLength 5000
   */
  country?: string | null;
  /*
   * Address line 1 (e.g., street, PO Box, or company name).
   *
   * @maxLength 5000
   */
  line1?: string | null;
  /*
   * Address line 2 (e.g., apartment, suite, unit, or building).
   *
   * @maxLength 5000
   */
  line2?: string | null;
  /*
   * ZIP or postal code.
   *
   * @maxLength 5000
   */
  postal_code?: string | null;
  /*
   * State, county, province, or region.
   *
   * @maxLength 5000
   */
  state?: string | null;
};

/**
 * @x-resourceId alipay_account
 */
export type AlipayAccount = {
  /*
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   *
   * @format unix-time
   */
  created: number;
  /*
   * The ID of the customer associated with this Alipay Account.
   */
  customer?: string | Customer | DeletedCustomer | null;
  /*
   * Uniquely identifies the account and will be the same across all Alipay account objects that are linked to the same Alipay account.
   *
   * @maxLength 5000
   */
  fingerprint: string;
  /*
   * Unique identifier for the object.
   *
   * @maxLength 5000
   */
  id: string;
  /*
   * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
   */
  livemode: boolean;
  /*
   * Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
   */
  metadata?: {
    [key: string]: string;
  };
  /*
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: "alipay_account";
  /*
   * If the Alipay account object is not reusable, the exact amount that you can create a charge for.
   */
  payment_amount?: number | null;
  /*
   * If the Alipay account object is not reusable, the exact currency that you can create a charge for.
   */
  payment_currency?: string | null;
  /*
   * True if you can create multiple payments using this account. If the account is reusable, then you can freely choose the amount of each payment.
   */
  reusable: boolean;
  /*
   * Whether this Alipay account object has ever been used for a payment.
   */
  used: boolean;
  /*
   * The username for the Alipay account.
   *
   * @maxLength 5000
   */
  username: string;
};

export type ApiErrors = {
  /*
   * For card errors, the ID of the failed charge.
   *
   * @maxLength 5000
   */
  charge?: string;
  /*
   * For some errors that could be handled programmatically, a short string indicating the [error code](https://stripe.com/docs/error-codes) reported.
   *
   * @maxLength 5000
   */
  code?: string;
  /*
   * For card errors resulting from a card issuer decline, a short string indicating the [card issuer's reason for the decline](https://stripe.com/docs/declines#issuer-declines) if they provide one.
   *
   * @maxLength 5000
   */
  decline_code?: string;
  /*
   * A URL to more information about the [error code](https://stripe.com/docs/error-codes) reported.
   *
   * @maxLength 5000
   */
  doc_url?: string;
  /*
   * A human-readable message providing more details about the error. For card errors, these messages can be shown to your users.
   *
   * @maxLength 40000
   */
  message?: string;
  /*
   * If the error is parameter-specific, the parameter related to the error. For example, you can use this to display a message near the correct form field.
   *
   * @maxLength 5000
   */
  param?: string;
  payment_intent?: PaymentIntent;
  payment_method?: PaymentMethod;
  /*
   * If the error is specific to the type of payment method, the payment method type that had a problem. This field is only populated for invoice-related errors.
   *
   * @maxLength 5000
   */
  payment_method_type?: string;
  setup_intent?: SetupIntent;
  /*
   * The source object for errors returned on a request involving a source.
   */
  source?: BankAccount | Card | Source;
  /*
   * The type of error returned. One of `api_error`, `card_error`, `idempotency_error`, or `invalid_request_error`
   */
  type:
    | "api_error"
    | "card_error"
    | "idempotency_error"
    | "invalid_request_error";
};

/**
 * @x-resourceId apple_pay_domain
 */
export type ApplePayDomain = {
  /*
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   *
   * @format unix-time
   */
  created: number;
  /*
   * @maxLength 5000
   */
  domain_name: string;
  /*
   * Unique identifier for the object.
   *
   * @maxLength 5000
   */
  id: string;
  /*
   * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
   */
  livemode: boolean;
  /*
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: "apple_pay_domain";
};

export type Application = {
  /*
   * Unique identifier for the object.
   *
   * @maxLength 5000
   */
  id: string;
  /*
   * The name of the application.
   *
   * @maxLength 5000
   */
  name?: string | null;
  /*
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: "application";
};

/**
 * @x-resourceId application_fee
 */
export type ApplicationFee = {
  /*
   * ID of the Stripe account this fee was taken from.
   */
  account: string | Account;
  /*
   * Amount earned, in %s.
   */
  amount: number;
  /*
   * Amount in %s refunded (can be less than the amount attribute on the fee if a partial refund was issued)
   */
  amount_refunded: number;
  /*
   * ID of the Connect application that earned the fee.
   */
  application: string | Application;
  /*
   * Balance transaction that describes the impact of this collected application fee on your account balance (not including refunds).
   */
  balance_transaction?: string | BalanceTransaction | null;
  /*
   * ID of the charge that the application fee was taken from.
   */
  charge: string | Charge;
  /*
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   *
   * @format unix-time
   */
  created: number;
  /*
   * Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
   */
  currency: string;
  /*
   * Unique identifier for the object.
   *
   * @maxLength 5000
   */
  id: string;
  /*
   * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
   */
  livemode: boolean;
  /*
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: "application_fee";
  /*
   * ID of the corresponding charge on the platform account, if this fee was the result of a charge using the `destination` parameter.
   */
  originating_transaction?: string | Charge | null;
  /*
   * Whether the fee has been fully refunded. If the fee is only partially refunded, this attribute will still be false.
   */
  refunded: boolean;
  /*
   * A list of refunds that have been applied to the fee.
   */
  refunds: {
    /*
     * Details about each object.
     */
    data: FeeRefund[];
    /*
     * True if this list has another page of items after this one that can be fetched.
     */
    has_more: boolean;
    /*
     * String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
     */
    object: "list";
    /*
     * The URL where this list can be accessed.
     *
     * @maxLength 5000
     */
    url: string;
  };
};

export type AutomaticTax = {
  /*
   * Whether Stripe automatically computes tax on this invoice.
   */
  enabled: boolean;
  /*
   * The status of the most recent automated tax calculation for this invoice.
   */
  status?: "complete" | "failed" | "requires_location_inputs";
};

/**
 * This is an object representing your Stripe balance. You can retrieve it to see
 * the balance currently on your Stripe account.
 *
 * You can also retrieve the balance history, which contains a list of
 * [transactions](https://stripe.com/docs/reporting/balance-transaction-types) that contributed to the balance
 * (charges, payouts, and so forth).
 *
 * The available and pending amounts for each currency are broken down further by
 * payment source types.
 *
 * Related guide: [Understanding Connect Account Balances](https://stripe.com/docs/connect/account-balances).
 *
 * @x-resourceId balance
 */
export type Balance = {
  /*
   * Funds that are available to be transferred or paid out, whether automatically by Stripe or explicitly via the [Transfers API](https://stripe.com/docs/api#transfers) or [Payouts API](https://stripe.com/docs/api#payouts). The available balance for each currency and payment type can be found in the `source_types` property.
   */
  available: BalanceAmount[];
  /*
   * Funds held due to negative balances on connected Custom accounts. The connect reserve balance for each currency and payment type can be found in the `source_types` property.
   */
  connect_reserved?: BalanceAmount[];
  /*
   * Funds that can be paid out using Instant Payouts.
   */
  instant_available?: BalanceAmount[];
  issuing?: BalanceDetail;
  /*
   * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
   */
  livemode: boolean;
  /*
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: "balance";
  /*
   * Funds that are not yet available in the balance, due to the 7-day rolling pay cycle. The pending balance for each currency, and for each payment type, can be found in the `source_types` property.
   */
  pending: BalanceAmount[];
};

export type BalanceAmount = {
  /*
   * Balance amount.
   */
  amount: number;
  /*
   * Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
   */
  currency: string;
  source_types?: BalanceAmountBySourceType;
};

export type BalanceAmountBySourceType = {
  /*
   * Amount for bank account.
   */
  bank_account?: number;
  /*
   * Amount for card.
   */
  card?: number;
  /*
   * Amount for FPX.
   */
  fpx?: number;
};

export type BalanceDetail = {
  /*
   * Funds that are available for use.
   */
  available: BalanceAmount[];
};

/**
 * Balance transactions represent funds moving through your Stripe account.
 * They're created for every type of transaction that comes into or flows out of your Stripe account balance.
 *
 * Related guide: [Balance Transaction Types](https://stripe.com/docs/reports/balance-transaction-types).
 *
 * @x-resourceId balance_transaction
 */
export type BalanceTransaction = {
  /*
   * Gross amount of the transaction, in %s.
   */
  amount: number;
  /*
   * The date the transaction's net funds will become available in the Stripe balance.
   *
   * @format unix-time
   */
  available_on: number;
  /*
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   *
   * @format unix-time
   */
  created: number;
  /*
   * Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
   */
  currency: string;
  /*
   * An arbitrary string attached to the object. Often useful for displaying to users.
   *
   * @maxLength 5000
   */
  description?: string | null;
  /*
   * The exchange rate used, if applicable, for this transaction. Specifically, if money was converted from currency A to currency B, then the `amount` in currency A, times `exchange_rate`, would be the `amount` in currency B. For example, suppose you charged a customer 10.00 EUR. Then the PaymentIntent's `amount` would be `1000` and `currency` would be `eur`. Suppose this was converted into 12.34 USD in your Stripe account. Then the BalanceTransaction's `amount` would be `1234`, `currency` would be `usd`, and `exchange_rate` would be `1.234`.
   */
  exchange_rate?: number | null;
  /*
   * Fees (in %s) paid for this transaction.
   */
  fee: number;
  /*
   * Detailed breakdown of fees (in %s) paid for this transaction.
   */
  fee_details: Fee[];
  /*
   * Unique identifier for the object.
   *
   * @maxLength 5000
   */
  id: string;
  /*
   * Net amount of the transaction, in %s.
   */
  net: number;
  /*
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: "balance_transaction";
  /*
   * [Learn more](https://stripe.com/docs/reports/reporting-categories) about how reporting categories can help you understand balance transactions from an accounting perspective.
   *
   * @maxLength 5000
   */
  reporting_category: string;
  /*
   * The Stripe object to which this transaction is related.
   */
  source?:
    | string
    | ApplicationFee
    | Charge
    | ConnectCollectionTransfer
    | Dispute
    | FeeRefund
    | IssuingAuthorization
    | IssuingDispute
    | IssuingTransaction
    | Payout
    | PlatformTaxFee
    | Refund
    | ReserveTransaction
    | TaxDeductedAtSource
    | Topup
    | Transfer
    | TransferReversal
    | null;
  /*
   * If the transaction's net funds are available in the Stripe balance yet. Either `available` or `pending`.
   *
   * @maxLength 5000
   */
  status: string;
  /*
   * Transaction type: `adjustment`, `advance`, `advance_funding`, `anticipation_repayment`, `application_fee`, `application_fee_refund`, `charge`, `connect_collection_transfer`, `contribution`, `issuing_authorization_hold`, `issuing_authorization_release`, `issuing_dispute`, `issuing_transaction`, `payment`, `payment_failure_refund`, `payment_refund`, `payout`, `payout_cancel`, `payout_failure`, `refund`, `refund_failure`, `reserve_transaction`, `reserved_funds`, `stripe_fee`, `stripe_fx_fee`, `tax_fee`, `topup`, `topup_reversal`, `transfer`, `transfer_cancel`, `transfer_failure`, or `transfer_refund`. [Learn more](https://stripe.com/docs/reports/balance-transaction-types) about balance transaction types and what they represent. If you are looking to classify transactions for accounting purposes, you might want to consider `reporting_category` instead.
   */
  type:
    | "adjustment"
    | "advance"
    | "advance_funding"
    | "anticipation_repayment"
    | "application_fee"
    | "application_fee_refund"
    | "charge"
    | "connect_collection_transfer"
    | "contribution"
    | "issuing_authorization_hold"
    | "issuing_authorization_release"
    | "issuing_dispute"
    | "issuing_transaction"
    | "payment"
    | "payment_failure_refund"
    | "payment_refund"
    | "payout"
    | "payout_cancel"
    | "payout_failure"
    | "refund"
    | "refund_failure"
    | "reserve_transaction"
    | "reserved_funds"
    | "stripe_fee"
    | "stripe_fx_fee"
    | "tax_fee"
    | "topup"
    | "topup_reversal"
    | "transfer"
    | "transfer_cancel"
    | "transfer_failure"
    | "transfer_refund";
};

/**
 * These bank accounts are payment methods on `Customer` objects.
 *
 * On the other hand [External Accounts](https://stripe.com/docs/api#external_accounts) are transfer
 * destinations on `Account` objects for [Custom accounts](https://stripe.com/docs/connect/custom-accounts).
 * They can be bank accounts or debit cards as well, and are documented in the links above.
 *
 * Related guide: [Bank Debits and Transfers](https://stripe.com/docs/payments/bank-debits-transfers).
 *
 * @x-resourceId bank_account
 */
export type BankAccount = {
  /*
   * The ID of the account that the bank account is associated with.
   */
  account?: string | Account | null;
  /*
   * The name of the person or business that owns the bank account.
   *
   * @maxLength 5000
   */
  account_holder_name?: string | null;
  /*
   * The type of entity that holds the account. This can be either `individual` or `company`.
   *
   * @maxLength 5000
   */
  account_holder_type?: string | null;
  /*
   * The bank account type. This can only be `checking` or `savings` in most countries. In Japan, this can only be `futsu` or `toza`.
   *
   * @maxLength 5000
   */
  account_type?: string | null;
  /*
   * A set of available payout methods for this bank account. Only values from this set should be passed as the `method` when creating a payout.
   */
  available_payout_methods?: ("instant" | "standard")[] | null;
  /*
   * Name of the bank associated with the routing number (e.g., `WELLS FARGO`).
   *
   * @maxLength 5000
   */
  bank_name?: string | null;
  /*
   * Two-letter ISO code representing the country the bank account is located in.
   *
   * @maxLength 5000
   */
  country: string;
  /*
   * Three-letter [ISO code for the currency](https://stripe.com/docs/payouts) paid out to the bank account.
   */
  currency: string;
  /*
   * The ID of the customer that the bank account is associated with.
   */
  customer?: string | Customer | DeletedCustomer | null;
  /*
   * Whether this bank account is the default external account for its currency.
   */
  default_for_currency?: boolean | null;
  /*
   * Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same.
   *
   * @maxLength 5000
   */
  fingerprint?: string | null;
  /*
   * Unique identifier for the object.
   *
   * @maxLength 5000
   */
  id: string;
  /*
   * The last four digits of the bank account number.
   *
   * @maxLength 5000
   */
  last4: string;
  /*
   * Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
   */
  metadata?: {
    [key: string]: string;
  } | null;
  /*
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: "bank_account";
  /*
   * The routing transit number for the bank account.
   *
   * @maxLength 5000
   */
  routing_number?: string | null;
  /*
   * For bank accounts, possible values are `new`, `validated`, `verified`, `verification_failed`, or `errored`. A bank account that hasn't had any activity or validation performed is `new`. If Stripe can determine that the bank account exists, its status will be `validated`. Note that there often isn’t enough information to know (e.g., for smaller credit unions), and the validation is not always run. If customer bank account verification has succeeded, the bank account status will be `verified`. If the verification failed for any reason, such as microdeposit failure, the status will be `verification_failed`. If a transfer sent to this bank account fails, we'll set the status to `errored` and will not continue to send transfers until the bank details are updated.
   *
   * For external accounts, possible values are `new` and `errored`. Validations aren't run against external accounts because they're only used for payouts. This means the other statuses don't apply. If a transfer fails, the status is set to `errored` and transfers are stopped until account details are updated.
   *
   * @maxLength 5000
   */
  status: string;
};

export type BillingDetails = {
  /*
   * Billing address.
   */
  address?: Address | null;
  /*
   * Email address.
   *
   * @maxLength 5000
   */
  email?: string | null;
  /*
   * Full name.
   *
   * @maxLength 5000
   */
  name?: string | null;
  /*
   * Billing phone number (including extension).
   *
   * @maxLength 5000
   */
  phone?: string | null;
};

/**
 * A portal configuration describes the functionality and behavior of a portal session.
 *
 * @x-resourceId billing_portal.configuration
 */
export type BillingPortalConfiguration = {
  /*
   * Whether the configuration is active and can be used to create portal sessions.
   */
  active: boolean;
  /*
   * ID of the Connect Application that created the configuration.
   *
   * @maxLength 5000
   */
  application?: string | null;
  business_profile: PortalBusinessProfile;
  /*
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   *
   * @format unix-time
   */
  created: number;
  /*
   * The default URL to redirect customers to when they click on the portal's link to return to your website. This can be [overriden](https://stripe.com/docs/api/customer_portal/sessions/create#create_portal_session-return_url) when creating the session.
   *
   * @maxLength 5000
   */
  default_return_url?: string | null;
  features: PortalFeatures;
  /*
   * Unique identifier for the object.
   *
   * @maxLength 5000
   */
  id: string;
  /*
   * Whether the configuration is the default. If `true`, this configuration can be managed in the Dashboard and portal sessions will use this configuration unless it is overriden when creating the session.
   */
  is_default: boolean;
  /*
   * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
   */
  livemode: boolean;
  /*
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: "billing_portal.configuration";
  /*
   * Time at which the object was last updated. Measured in seconds since the Unix epoch.
   *
   * @format unix-time
   */
  updated: number;
};

/**
 * The Billing customer portal is a Stripe-hosted UI for subscription and
 * billing management.
 *
 * A portal configuration describes the functionality and features that you
 * want to provide to your customers through the portal.
 *
 * A portal session describes the instantiation of the customer portal for
 * a particular customer. By visiting the session's URL, the customer
 * can manage their subscriptions and billing details. For security reasons,
 * sessions are short-lived and will expire if the customer does not visit the URL.
 * Create sessions on-demand when customers intend to manage their subscriptions
 * and billing details.
 *
 * Learn more in the [product overview](https://stripe.com/docs/billing/subscriptions/customer-portal)
 * and [integration guide](https://stripe.com/docs/billing/subscriptions/integrating-customer-portal).
 *
 * @x-resourceId billing_portal.session
 */
export type BillingPortalSession = {
  /*
   * The configuration used by this session, describing the features available.
   */
  configuration: string | BillingPortalConfiguration;
  /*
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   *
   * @format unix-time
   */
  created: number;
  /*
   * The ID of the customer for this session.
   *
   * @maxLength 5000
   */
  customer: string;
  /*
   * Unique identifier for the object.
   *
   * @maxLength 5000
   */
  id: string;
  /*
   * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
   */
  livemode: boolean;
  /*
   * The IETF language tag of the locale Customer Portal is displayed in. If blank or auto, the customer’s `preferred_locales` or browser’s locale is used.
   *
   * @x-stripeBypassValidation true
   */
  locale?:
    | "auto"
    | "bg"
    | "cs"
    | "da"
    | "de"
    | "el"
    | "en"
    | "en-AU"
    | "en-CA"
    | "en-GB"
    | "en-IE"
    | "en-IN"
    | "en-NZ"
    | "en-SG"
    | "es"
    | "es-419"
    | "et"
    | "fi"
    | "fil"
    | "fr"
    | "fr-CA"
    | "hr"
    | "hu"
    | "id"
    | "it"
    | "ja"
    | "ko"
    | "lt"
    | "lv"
    | "ms"
    | "mt"
    | "nb"
    | "nl"
    | "pl"
    | "pt"
    | "pt-BR"
    | "ro"
    | "ru"
    | "sk"
    | "sl"
    | "sv"
    | "th"
    | "tr"
    | "vi"
    | "zh"
    | "zh-HK"
    | "zh-TW";
  /*
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: "billing_portal.session";
  /*
   * The account for which the session was created on behalf of. When specified, only subscriptions and invoices with this `on_behalf_of` account appear in the portal. For more information, see the [docs](https://stripe.com/docs/connect/charges-transfers#on-behalf-of). Use the [Accounts API](https://stripe.com/docs/api/accounts/object#account_object-settings-branding) to modify the `on_behalf_of` account's branding settings, which the portal displays.
   *
   * @maxLength 5000
   */
  on_behalf_of?: string | null;
  /*
   * The URL to redirect customers to when they click on the portal's link to return to your website.
   *
   * @maxLength 5000
   */
  return_url: string;
  /*
   * The short-lived URL of the session that gives customers access to the customer portal.
   *
   * @maxLength 5000
   */
  url: string;
};

/**
 * @x-resourceId bitcoin_receiver
 */
export type BitcoinReceiver = {
  /*
   * True when this bitcoin receiver has received a non-zero amount of bitcoin.
   */
  active: boolean;
  /*
   * The amount of `currency` that you are collecting as payment.
   */
  amount: number;
  /*
   * The amount of `currency` to which `bitcoin_amount_received` has been converted.
   */
  amount_received: number;
  /*
   * The amount of bitcoin that the customer should send to fill the receiver. The `bitcoin_amount` is denominated in Satoshi: there are 10^8 Satoshi in one bitcoin.
   */
  bitcoin_amount: number;
  /*
   * The amount of bitcoin that has been sent by the customer to this receiver.
   */
  bitcoin_amount_received: number;
  /*
   * This URI can be displayed to the customer as a clickable link (to activate their bitcoin client) or as a QR code (for mobile wallets).
   *
   * @maxLength 5000
   */
  bitcoin_uri: string;
  /*
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   *
   * @format unix-time
   */
  created: number;
  /*
   * Three-letter [ISO code for the currency](https://stripe.com/docs/currencies) to which the bitcoin will be converted.
   */
  currency: string;
  /*
   * The customer ID of the bitcoin receiver.
   *
   * @maxLength 5000
   */
  customer?: string | null;
  /*
   * An arbitrary string attached to the object. Often useful for displaying to users.
   *
   * @maxLength 5000
   */
  description?: string | null;
  /*
   * The customer's email address, set by the API call that creates the receiver.
   *
   * @maxLength 5000
   */
  email?: string | null;
  /*
   * This flag is initially false and updates to true when the customer sends the `bitcoin_amount` to this receiver.
   */
  filled: boolean;
  /*
   * Unique identifier for the object.
   *
   * @maxLength 5000
   */
  id: string;
  /*
   * A bitcoin address that is specific to this receiver. The customer can send bitcoin to this address to fill the receiver.
   *
   * @maxLength 5000
   */
  inbound_address: string;
  /*
   * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
   */
  livemode: boolean;
  /*
   * Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
   */
  metadata?: {
    [key: string]: string;
  } | null;
  /*
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: "bitcoin_receiver";
  /*
   * The ID of the payment created from the receiver, if any. Hidden when viewing the receiver with a publishable key.
   *
   * @maxLength 5000
   */
  payment?: string | null;
  /*
   * The refund address of this bitcoin receiver.
   *
   * @maxLength 5000
   */
  refund_address?: string | null;
  /*
   * A list with one entry for each time that the customer sent bitcoin to the receiver. Hidden when viewing the receiver with a publishable key.
   */
  transactions?: {
    /*
     * Details about each object.
     */
    data: BitcoinTransaction[];
    /*
     * True if this list has another page of items after this one that can be fetched.
     */
    has_more: boolean;
    /*
     * String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
     */
    object: "list";
    /*
     * The URL where this list can be accessed.
     *
     * @maxLength 5000
     */
    url: string;
  };
  /*
   * This receiver contains uncaptured funds that can be used for a payment or refunded.
   */
  uncaptured_funds: boolean;
  /*
   * Indicate if this source is used for payment.
   */
  used_for_payment?: boolean | null;
};

/**
 * @x-resourceId bitcoin_transaction
 */
export type BitcoinTransaction = {
  /*
   * The amount of `currency` that the transaction was converted to in real-time.
   */
  amount: number;
  /*
   * The amount of bitcoin contained in the transaction.
   */
  bitcoin_amount: number;
  /*
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   *
   * @format unix-time
   */
  created: number;
  /*
   * Three-letter [ISO code for the currency](https://stripe.com/docs/currencies) to which this transaction was converted.
   */
  currency: string;
  /*
   * Unique identifier for the object.
   *
   * @maxLength 5000
   */
  id: string;
  /*
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: "bitcoin_transaction";
  /*
   * The receiver to which this transaction was sent.
   *
   * @maxLength 5000
   */
  receiver: string;
};

/**
 * This is an object representing a capability for a Stripe account.
 *
 * Related guide: [Account capabilities](https://stripe.com/docs/connect/account-capabilities).
 *
 * @x-resourceId capability
 */
export type Capability = {
  /*
   * The account for which the capability enables functionality.
   */
  account: string | Account;
  /*
   * The identifier for the capability.
   *
   * @maxLength 5000
   */
  id: string;
  /*
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: "capability";
  /*
   * Whether the capability has been requested.
   */
  requested: boolean;
  /*
   * Time at which the capability was requested. Measured in seconds since the Unix epoch.
   *
   * @format unix-time
   */
  requested_at?: number | null;
  requirements?: AccountCapabilityRequirements;
  /*
   * The status of the capability. Can be `active`, `inactive`, `pending`, or `unrequested`.
   */
  status: "active" | "disabled" | "inactive" | "pending" | "unrequested";
};

/**
 * You can store multiple cards on a customer in order to charge the customer
 * later. You can also store multiple debit cards on a recipient in order to
 * transfer to those cards later.
 *
 * Related guide: [Card Payments with Sources](https://stripe.com/docs/sources/cards).
 *
 * @x-resourceId card
 */
export type Card = {
  /*
   * The account this card belongs to. This attribute will not be in the card object if the card belongs to a customer or recipient instead.
   */
  account?: string | Account | null;
  /*
   * City/District/Suburb/Town/Village.
   *
   * @maxLength 5000
   */
  address_city?: string | null;
  /*
   * Billing address country, if provided when creating card.
   *
   * @maxLength 5000
   */
  address_country?: string | null;
  /*
   * Address line 1 (Street address/PO Box/Company name).
   *
   * @maxLength 5000
   */
  address_line1?: string | null;
  /*
   * If `address_line1` was provided, results of the check: `pass`, `fail`, `unavailable`, or `unchecked`.
   *
   * @maxLength 5000
   */
  address_line1_check?: string | null;
  /*
   * Address line 2 (Apartment/Suite/Unit/Building).
   *
   * @maxLength 5000
   */
  address_line2?: string | null;
  /*
   * State/County/Province/Region.
   *
   * @maxLength 5000
   */
  address_state?: string | null;
  /*
   * ZIP or postal code.
   *
   * @maxLength 5000
   */
  address_zip?: string | null;
  /*
   * If `address_zip` was provided, results of the check: `pass`, `fail`, `unavailable`, or `unchecked`.
   *
   * @maxLength 5000
   */
  address_zip_check?: string | null;
  /*
   * A set of available payout methods for this card. Only values from this set should be passed as the `method` when creating a payout.
   */
  available_payout_methods?: ("instant" | "standard")[] | null;
  /*
   * Card brand. Can be `American Express`, `Diners Club`, `Discover`, `JCB`, `MasterCard`, `UnionPay`, `Visa`, or `Unknown`.
   *
   * @maxLength 5000
   */
  brand: string;
  /*
   * Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you've collected.
   *
   * @maxLength 5000
   */
  country?: string | null;
  /*
   * Three-letter [ISO code for currency](https://stripe.com/docs/payouts). Only applicable on accounts (not customers or recipients). The card can be used as a transfer destination for funds in this currency.
   */
  currency?: string | null;
  /*
   * The customer that this card belongs to. This attribute will not be in the card object if the card belongs to an account or recipient instead.
   */
  customer?: string | Customer | DeletedCustomer | null;
  /*
   * If a CVC was provided, results of the check: `pass`, `fail`, `unavailable`, or `unchecked`. A result of unchecked indicates that CVC was provided but hasn't been checked yet. Checks are typically performed when attaching a card to a Customer object, or when creating a charge. For more details, see [Check if a card is valid without a charge](https://support.stripe.com/questions/check-if-a-card-is-valid-without-a-charge).
   *
   * @maxLength 5000
   */
  cvc_check?: string | null;
  /*
   * Whether this card is the default external account for its currency.
   */
  default_for_currency?: boolean | null;
  /*
   * (For tokenized numbers only.) The last four digits of the device account number.
   *
   * @maxLength 5000
   */
  dynamic_last4?: string | null;
  /*
   * Two-digit number representing the card's expiration month.
   */
  exp_month: number;
  /*
   * Four-digit number representing the card's expiration year.
   */
  exp_year: number;
  /*
   * Uniquely identifies this particular card number. You can use this attribute to check whether two customers who’ve signed up with you are using the same card number, for example. For payment methods that tokenize card information (Apple Pay, Google Pay), the tokenized number might be provided instead of the underlying card number.
   *
   * *Starting May 1, 2021, card fingerprint in India for Connect will change to allow two fingerprints for the same card --- one for India and one for the rest of the world.*
   *
   * @maxLength 5000
   */
  fingerprint?: string | null;
  /*
   * Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`.
   *
   * @maxLength 5000
   */
  funding: string;
  /*
   * Unique identifier for the object.
   *
   * @maxLength 5000
   */
  id: string;
  /*
   * The last four digits of the card.
   *
   * @maxLength 5000
   */
  last4: string;
  /*
   * Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
   */
  metadata?: {
    [key: string]: string;
  } | null;
  /*
   * Cardholder name.
   *
   * @maxLength 5000
   */
  name?: string | null;
  /*
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: "card";
  /*
   * The recipient that this card belongs to. This attribute will not be in the card object if the card belongs to a customer or account instead.
   */
  recipient?: string | Recipient | null;
  /*
   * If the card number is tokenized, this is the method that was used. Can be `android_pay` (includes Google Pay), `apple_pay`, `masterpass`, `visa_checkout`, or null.
   *
   * @maxLength 5000
   */
  tokenization_method?: string | null;
};

export type CardGeneratedFromPaymentMethodDetails = {
  card_present?: PaymentMethodDetailsCardPresent;
  /*
   * The type of payment method transaction-specific details from the transaction that generated this `card` payment method. Always `card_present`.
   *
   * @maxLength 5000
   */
  type: string;
};

export type CardIssuingAccountTermsOfService = {
  /*
   * The Unix timestamp marking when the account representative accepted the service agreement.
   */
  date?: number | null;
  /*
   * The IP address from which the account representative accepted the service agreement.
   *
   * @maxLength 5000
   */
  ip?: string | null;
  /*
   * The user agent of the browser from which the account representative accepted the service agreement.
   *
   * @maxLength 5000
   */
  user_agent?: string;
};

export type CardMandatePaymentMethodDetails = {};

/**
 * To charge a credit or a debit card, you create a `Charge` object. You can
 * retrieve and refund individual charges as well as list all charges. Charges
 * are identified by a unique, random ID.
 *
 * Related guide: [Accept a payment with the Charges API](https://stripe.com/docs/payments/accept-a-payment-charges).
 *
 * @x-resourceId charge
 */
export type Charge = {
  /*
   * Amount intended to be collected by this payment. A positive integer representing how much to charge in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal) (e.g., 100 cents to charge $1.00 or 100 to charge ¥100, a zero-decimal currency). The minimum amount is $0.50 US or [equivalent in charge currency](https://stripe.com/docs/currencies#minimum-and-maximum-charge-amounts). The amount value supports up to eight digits (e.g., a value of 99999999 for a USD charge of $999,999.99).
   */
  amount: number;
  /*
   * Amount in %s captured (can be less than the amount attribute on the charge if a partial capture was made).
   */
  amount_captured: number;
  /*
   * Amount in %s refunded (can be less than the amount attribute on the charge if a partial refund was issued).
   */
  amount_refunded: number;
  /*
   * ID of the Connect application that created the charge.
   */
  application?: string | Application | null;
  /*
   * The application fee (if any) for the charge. [See the Connect documentation](https://stripe.com/docs/connect/direct-charges#collecting-fees) for details.
   */
  application_fee?: string | ApplicationFee | null;
  /*
   * The amount of the application fee (if any) requested for the charge. [See the Connect documentation](https://stripe.com/docs/connect/direct-charges#collecting-fees) for details.
   */
  application_fee_amount?: number | null;
  /*
   * ID of the balance transaction that describes the impact of this charge on your account balance (not including refunds or disputes).
   */
  balance_transaction?: string | BalanceTransaction | null;
  billing_details: BillingDetails;
  /*
   * The full statement descriptor that is passed to card networks, and that is displayed on your customers' credit card and bank statements. Allows you to see what the statement descriptor looks like after the static and dynamic portions are combined.
   *
   * @maxLength 5000
   */
  calculated_statement_descriptor?: string | null;
  /*
   * If the charge was created without capturing, this Boolean represents whether it is still uncaptured or has since been captured.
   */
  captured: boolean;
  /*
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   *
   * @format unix-time
   */
  created: number;
  /*
   * Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
   */
  currency: string;
  /*
   * ID of the customer this charge is for if one exists.
   */
  customer?: string | Customer | DeletedCustomer | null;
  /*
   * An arbitrary string attached to the object. Often useful for displaying to users.
   *
   * @maxLength 40000
   */
  description?: string | null;
  /*
   * Whether the charge has been disputed.
   */
  disputed: boolean;
  /*
   * Error code explaining reason for charge failure if available (see [the errors section](https://stripe.com/docs/api#errors) for a list of codes).
   *
   * @maxLength 5000
   */
  failure_code?: string | null;
  /*
   * Message to user further explaining reason for charge failure if available.
   *
   * @maxLength 5000
   */
  failure_message?: string | null;
  /*
   * Information on fraud assessments for the charge.
   */
  fraud_details?: ChargeFraudDetails | null;
  /*
   * Unique identifier for the object.
   *
   * @maxLength 5000
   */
  id: string;
  /*
   * ID of the invoice this charge is for if one exists.
   */
  invoice?: string | Invoice | null;
  /*
   * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
   */
  livemode: boolean;
  /*
   * Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
   */
  metadata: {
    [key: string]: string;
  };
  /*
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: "charge";
  /*
   * The account (if any) the charge was made on behalf of without triggering an automatic transfer. See the [Connect documentation](https://stripe.com/docs/connect/charges-transfers) for details.
   */
  on_behalf_of?: string | Account | null;
  /*
   * ID of the order this charge is for if one exists.
   */
  order?: string | Order | null;
  /*
   * Details about whether the payment was accepted, and why. See [understanding declines](https://stripe.com/docs/declines) for details.
   */
  outcome?: ChargeOutcome | null;
  /*
   * `true` if the charge succeeded, or was successfully authorized for later capture.
   */
  paid: boolean;
  /*
   * ID of the PaymentIntent associated with this charge, if one exists.
   */
  payment_intent?: string | PaymentIntent | null;
  /*
   * ID of the payment method used in this charge.
   *
   * @maxLength 5000
   */
  payment_method?: string | null;
  /*
   * Details about the payment method at the time of the transaction.
   */
  payment_method_details?: PaymentMethodDetails | null;
  /*
   * This is the email address that the receipt for this charge was sent to.
   *
   * @maxLength 5000
   */
  receipt_email?: string | null;
  /*
   * This is the transaction number that appears on email receipts sent for this charge. This attribute will be `null` until a receipt has been sent.
   *
   * @maxLength 5000
   */
  receipt_number?: string | null;
  /*
   * This is the URL to view the receipt for this charge. The receipt is kept up-to-date to the latest state of the charge, including any refunds. If the charge is for an Invoice, the receipt will be stylized as an Invoice receipt.
   *
   * @maxLength 5000
   */
  receipt_url?: string | null;
  /*
   * Whether the charge has been fully refunded. If the charge is only partially refunded, this attribute will still be false.
   */
  refunded: boolean;
  /*
   * A list of refunds that have been applied to the charge.
   */
  refunds: {
    /*
     * Details about each object.
     */
    data: Refund[];
    /*
     * True if this list has another page of items after this one that can be fetched.
     */
    has_more: boolean;
    /*
     * String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
     */
    object: "list";
    /*
     * The URL where this list can be accessed.
     *
     * @maxLength 5000
     */
    url: string;
  };
  /*
   * ID of the review associated with this charge if one exists.
   */
  review?: string | Review | null;
  /*
   * Shipping information for the charge.
   */
  shipping?: Shipping | null;
  /*
   * The transfer ID which created this charge. Only present if the charge came from another Stripe account. [See the Connect documentation](https://stripe.com/docs/connect/destination-charges) for details.
   */
  source_transfer?: string | Transfer | null;
  /*
   * For card charges, use `statement_descriptor_suffix` instead. Otherwise, you can use this value as the complete description of a charge on your customers’ statements. Must contain at least one letter, maximum 22 characters.
   *
   * @maxLength 5000
   */
  statement_descriptor?: string | null;
  /*
   * Provides information about the charge that customers see on their statements. Concatenated with the prefix (shortened descriptor) or statement descriptor that’s set on the account to form the complete statement descriptor. Maximum 22 characters for the concatenated descriptor.
   *
   * @maxLength 5000
   */
  statement_descriptor_suffix?: string | null;
  /*
   * The status of the payment is either `succeeded`, `pending`, or `failed`.
   *
   * @maxLength 5000
   */
  status: string;
  /*
   * ID of the transfer to the `destination` account (only applicable if the charge was created using the `destination` parameter).
   */
  transfer?: string | Transfer;
  /*
   * An optional dictionary including the account to automatically transfer to as part of a destination charge. [See the Connect documentation](https://stripe.com/docs/connect/destination-charges) for details.
   */
  transfer_data?: ChargeTransferData | null;
  /*
   * A string that identifies this transaction as part of a group. See the [Connect documentation](https://stripe.com/docs/connect/charges-transfers#transfer-options) for details.
   *
   * @maxLength 5000
   */
  transfer_group?: string | null;
};

export type ChargeFraudDetails = {
  /*
   * Assessments from Stripe. If set, the value is `fraudulent`.
   *
   * @maxLength 5000
   */
  stripe_report?: string;
  /*
   * Assessments reported by you. If set, possible values of are `safe` and `fraudulent`.
   *
   * @maxLength 5000
   */
  user_report?: string;
};

export type ChargeOutcome = {
  /*
   * Possible values are `approved_by_network`, `declined_by_network`, `not_sent_to_network`, and `reversed_after_approval`. The value `reversed_after_approval` indicates the payment was [blocked by Stripe](https://stripe.com/docs/declines#blocked-payments) after bank authorization, and may temporarily appear as "pending" on a cardholder's statement.
   *
   * @maxLength 5000
   */
  network_status?: string | null;
  /*
   * An enumerated value providing a more detailed explanation of the outcome's `type`. Charges blocked by Radar's default block rule have the value `highest_risk_level`. Charges placed in review by Radar's default review rule have the value `elevated_risk_level`. Charges authorized, blocked, or placed in review by custom rules have the value `rule`. See [understanding declines](https://stripe.com/docs/declines) for more details.
   *
   * @maxLength 5000
   */
  reason?: string | null;
  /*
   * Stripe Radar's evaluation of the riskiness of the payment. Possible values for evaluated payments are `normal`, `elevated`, `highest`. For non-card payments, and card-based payments predating the public assignment of risk levels, this field will have the value `not_assessed`. In the event of an error in the evaluation, this field will have the value `unknown`. This field is only available with Radar.
   *
   * @maxLength 5000
   */
  risk_level?: string;
  /*
   * Stripe Radar's evaluation of the riskiness of the payment. Possible values for evaluated payments are between 0 and 100. For non-card payments, card-based payments predating the public assignment of risk scores, or in the event of an error during evaluation, this field will not be present. This field is only available with Radar for Fraud Teams.
   */
  risk_score?: number;
  /*
   * The ID of the Radar rule that matched the payment, if applicable.
   */
  rule?: string | Rule;
  /*
   * A human-readable description of the outcome type and reason, designed for you (the recipient of the payment), not your customer.
   *
   * @maxLength 5000
   */
  seller_message?: string | null;
  /*
   * Possible values are `authorized`, `manual_review`, `issuer_declined`, `blocked`, and `invalid`. See [understanding declines](https://stripe.com/docs/declines) and [Radar reviews](https://stripe.com/docs/radar/reviews) for details.
   *
   * @maxLength 5000
   */
  type: string;
};

export type ChargeTransferData = {
  /*
   * The amount transferred to the destination account, if specified. By default, the entire charge amount is transferred to the destination account.
   */
  amount?: number | null;
  /*
   * ID of an existing, connected Stripe account to transfer funds to if `transfer_data` was specified in the charge request.
   */
  destination: string | Account;
};

/**
 * A Checkout Session represents your customer's session as they pay for
 * one-time purchases or subscriptions through [Checkout](https://stripe.com/docs/payments/checkout).
 * We recommend creating a new Session each time your customer attempts to pay.
 *
 * Once payment is successful, the Checkout Session will contain a reference
 * to the [Customer](https://stripe.com/docs/api/customers), and either the successful
 * [PaymentIntent](https://stripe.com/docs/api/payment_intents) or an active
 * [Subscription](https://stripe.com/docs/api/subscriptions).
 *
 * You can create a Checkout Session on your server and pass its ID to the
 * client to begin Checkout.
 *
 * Related guide: [Checkout Server Quickstart](https://stripe.com/docs/payments/checkout/api).
 *
 * @x-resourceId checkout.session
 */
export type CheckoutSession = {
  /*
   * Enables user redeemable promotion codes.
   */
  allow_promotion_codes?: boolean | null;
  /*
   * Total of all items before discounts or taxes are applied.
   */
  amount_subtotal?: number | null;
  /*
   * Total of all items after discounts and taxes are applied.
   */
  amount_total?: number | null;
  automatic_tax: PaymentPagesCheckoutSessionAutomaticTax;
  /*
   * Describes whether Checkout should collect the customer's billing address.
   */
  billing_address_collection?: "auto" | "required";
  /*
   * The URL the customer will be directed to if they decide to cancel payment and return to your website.
   *
   * @maxLength 5000
   */
  cancel_url: string;
  /*
   * A unique string to reference the Checkout Session. This can be a
   * customer ID, a cart ID, or similar, and can be used to reconcile the
   * Session with your internal systems.
   *
   * @maxLength 5000
   */
  client_reference_id?: string | null;
  /*
   * Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
   */
  currency?: string | null;
  /*
   * The ID of the customer for this Session.
   * For Checkout Sessions in `payment` or `subscription` mode, Checkout
   * will create a new customer object based on information provided
   * during the payment flow unless an existing customer was provided when
   * the Session was created.
   */
  customer?: string | Customer | DeletedCustomer | null;
  /*
   * The customer details including the customer's tax exempt status and the customer's tax IDs. Only present on Sessions in `payment` or `subscription` mode.
   */
  customer_details?: PaymentPagesCheckoutSessionCustomerDetails | null;
  /*
   * If provided, this value will be used when the Customer object is created.
   * If not provided, customers will be asked to enter their email address.
   * Use this parameter to prefill customer data if you already have an email
   * on file. To access information about the customer once the payment flow is
   * complete, use the `customer` attribute.
   *
   * @maxLength 5000
   */
  customer_email?: string | null;
  /*
   * Unique identifier for the object. Used to pass to `redirectToCheckout`
   * in Stripe.js.
   *
   * @maxLength 5000
   */
  id: string;
  /*
   * The line items purchased by the customer.
   */
  line_items?: {
    /*
     * Details about each object.
     */
    data: Item[];
    /*
     * True if this list has another page of items after this one that can be fetched.
     */
    has_more: boolean;
    /*
     * String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
     */
    object: "list";
    /*
     * The URL where this list can be accessed.
     *
     * @maxLength 5000
     */
    url: string;
  };
  /*
   * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
   */
  livemode: boolean;
  /*
   * The IETF language tag of the locale Checkout is displayed in. If blank or `auto`, the browser's locale is used.
   *
   * @x-stripeBypassValidation true
   */
  locale?:
    | "auto"
    | "bg"
    | "cs"
    | "da"
    | "de"
    | "el"
    | "en"
    | "en-GB"
    | "es"
    | "es-419"
    | "et"
    | "fi"
    | "fil"
    | "fr"
    | "fr-CA"
    | "hr"
    | "hu"
    | "id"
    | "it"
    | "ja"
    | "ko"
    | "lt"
    | "lv"
    | "ms"
    | "mt"
    | "nb"
    | "nl"
    | "pl"
    | "pt"
    | "pt-BR"
    | "ro"
    | "ru"
    | "sk"
    | "sl"
    | "sv"
    | "th"
    | "tr"
    | "vi"
    | "zh"
    | "zh-HK"
    | "zh-TW";
  /*
   * Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
   */
  metadata?: {
    [key: string]: string;
  } | null;
  /*
   * The mode of the Checkout Session.
   */
  mode: "payment" | "setup" | "subscription";
  /*
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: "checkout.session";
  /*
   * The ID of the PaymentIntent for Checkout Sessions in `payment` mode.
   */
  payment_intent?: string | PaymentIntent | null;
  /*
   * Payment-method-specific configuration for the PaymentIntent or SetupIntent of this CheckoutSession.
   */
  payment_method_options?: CheckoutSessionPaymentMethodOptions | null;
  /*
   * A list of the types of payment methods (e.g. card) this Checkout
   * Session is allowed to accept.
   */
  payment_method_types: string[];
  /*
   * The payment status of the Checkout Session, one of `paid`, `unpaid`, or `no_payment_required`.
   * You can use this value to decide when to fulfill your customer's order.
   */
  payment_status: "no_payment_required" | "paid" | "unpaid";
  /*
   * The ID of the SetupIntent for Checkout Sessions in `setup` mode.
   */
  setup_intent?: string | SetupIntent | null;
  /*
   * Shipping information for this Checkout Session.
   */
  shipping?: Shipping | null;
  /*
   * When set, provides configuration for Checkout to collect a shipping address from a customer.
   */
  shipping_address_collection?: PaymentPagesPaymentPageResourcesShippingAddressCollection | null;
  /*
   * Describes the type of transaction being performed by Checkout in order to customize
   * relevant text on the page, such as the submit button. `submit_type` can only be
   * specified on Checkout Sessions in `payment` mode, but not Checkout Sessions
   * in `subscription` or `setup` mode.
   */
  submit_type?: "auto" | "book" | "donate" | "pay";
  /*
   * The ID of the subscription for Checkout Sessions in `subscription` mode.
   */
  subscription?: string | Subscription | null;
  /*
   * The URL the customer will be directed to after the payment or
   * subscription creation is successful.
   *
   * @maxLength 5000
   */
  success_url: string;
  tax_id_collection?: PaymentPagesCheckoutSessionTaxIdCollection;
  /*
   * Tax and discount details for the computed total amount.
   */
  total_details?: PaymentPagesCheckoutSessionTotalDetails | null;
  /*
   * The URL to the Checkout Session.
   *
   * @maxLength 5000
   */
  url?: string | null;
};

export type CheckoutAcssDebitMandateOptions = {
  /*
   * A URL for custom mandate text
   *
   * @maxLength 5000
   */
  custom_mandate_url?: string;
  /*
   * Description of the interval. Only required if the 'payment_schedule' parameter is 'interval' or 'combined'.
   *
   * @maxLength 5000
   */
  interval_description?: string | null;
  /*
   * Payment schedule for the mandate.
   */
  payment_schedule?: "combined" | "interval" | "sporadic";
  /*
   * Transaction type of the mandate.
   */
  transaction_type?: "business" | "personal";
};

export type CheckoutAcssDebitPaymentMethodOptions = {
  /*
   * Currency supported by the bank account. Returned when the Session is in `setup` mode.
   */
  currency?: "cad" | "usd";
  mandate_options?: CheckoutAcssDebitMandateOptions;
  /*
   * Bank account verification method.
   *
   * @x-stripeBypassValidation true
   */
  verification_method?: "automatic" | "instant" | "microdeposits";
};

export type CheckoutSessionPaymentMethodOptions = {
  acss_debit?: CheckoutAcssDebitPaymentMethodOptions;
  boleto?: PaymentMethodOptionsBoleto;
  oxxo?: PaymentMethodOptionsOxxo;
};

export type ConnectCollectionTransfer = {
  /*
   * Amount transferred, in %s.
   */
  amount: number;
  /*
   * Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
   */
  currency: string;
  /*
   * ID of the account that funds are being collected for.
   */
  destination: string | Account;
  /*
   * Unique identifier for the object.
   *
   * @maxLength 5000
   */
  id: string;
  /*
   * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
   */
  livemode: boolean;
  /*
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: "connect_collection_transfer";
};

/**
 * Stripe needs to collect certain pieces of information about each account
 * created. These requirements can differ depending on the account's country. The
 * Country Specs API makes these rules available to your integration.
 *
 * You can also view the information from this API call as [an online
 * guide](/docs/connect/required-verification-information).
 *
 * @x-resourceId country_spec
 */
export type CountrySpec = {
  /*
   * The default currency for this country. This applies to both payment methods and bank accounts.
   *
   * @maxLength 5000
   */
  default_currency: string;
  /*
   * Unique identifier for the object. Represented as the ISO country code for this country.
   *
   * @maxLength 5000
   */
  id: string;
  /*
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: "country_spec";
  /*
   * Currencies that can be accepted in the specific country (for transfers).
   */
  supported_bank_account_currencies: {
    [key: string]: string[];
  };
  /*
   * Currencies that can be accepted in the specified country (for payments).
   */
  supported_payment_currencies: string[];
  /*
   * Payment methods available in the specified country. You may need to enable some payment methods (e.g., [ACH](https://stripe.com/docs/ach)) on your account before they appear in this list. The `stripe` payment method refers to [charging through your platform](https://stripe.com/docs/connect/destination-charges).
   */
  supported_payment_methods: string[];
  /*
   * Countries that can accept transfers from the specified country.
   */
  supported_transfer_countries: string[];
  verification_fields: CountrySpecVerificationFields;
};

export type CountrySpecVerificationFieldDetails = {
  /*
   * Additional fields which are only required for some users.
   */
  additional: string[];
  /*
   * Fields which every account must eventually provide.
   */
  minimum: string[];
};

export type CountrySpecVerificationFields = {
  company: CountrySpecVerificationFieldDetails;
  individual: CountrySpecVerificationFieldDetails;
};

/**
 * A coupon contains information about a percent-off or amount-off discount you
 * might want to apply to a customer. Coupons may be applied to [invoices](https://stripe.com/docs/api#invoices) or
 * [orders](https://stripe.com/docs/api#create_order-coupon). Coupons do not work with conventional one-off [charges](https://stripe.com/docs/api#create_charge).
 *
 * @x-resourceId coupon
 */
export type Coupon = {
  /*
   * Amount (in the `currency` specified) that will be taken off the subtotal of any invoices for this customer.
   */
  amount_off?: number | null;
  applies_to?: CouponAppliesTo;
  /*
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   *
   * @format unix-time
   */
  created: number;
  /*
   * If `amount_off` has been set, the three-letter [ISO code for the currency](https://stripe.com/docs/currencies) of the amount to take off.
   */
  currency?: string | null;
  /*
   * One of `forever`, `once`, and `repeating`. Describes how long a customer who applies this coupon will get the discount.
   */
  duration: "forever" | "once" | "repeating";
  /*
   * If `duration` is `repeating`, the number of months the coupon applies. Null if coupon `duration` is `forever` or `once`.
   */
  duration_in_months?: number | null;
  /*
   * Unique identifier for the object.
   *
   * @maxLength 5000
   */
  id: string;
  /*
   * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
   */
  livemode: boolean;
  /*
   * Maximum number of times this coupon can be redeemed, in total, across all customers, before it is no longer valid.
   */
  max_redemptions?: number | null;
  /*
   * Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
   */
  metadata?: {
    [key: string]: string;
  } | null;
  /*
   * Name of the coupon displayed to customers on for instance invoices or receipts.
   *
   * @maxLength 5000
   */
  name?: string | null;
  /*
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: "coupon";
  /*
   * Percent that will be taken off the subtotal of any invoices for this customer for the duration of the coupon. For example, a coupon with percent_off of 50 will make a %s100 invoice %s50 instead.
   */
  percent_off?: number | null;
  /*
   * Date after which the coupon can no longer be redeemed.
   *
   * @format unix-time
   */
  redeem_by?: number | null;
  /*
   * Number of times this coupon has been applied to a customer.
   */
  times_redeemed: number;
  /*
   * Taking account of the above properties, whether this coupon can still be applied to a customer.
   */
  valid: boolean;
};

export type CouponAppliesTo = {
  /*
   * A list of product IDs this coupon applies to
   */
  products: string[];
};

/**
 * Issue a credit note to adjust an invoice's amount after the invoice is finalized.
 *
 * Related guide: [Credit Notes](https://stripe.com/docs/billing/invoices/credit-notes).
 *
 * @x-resourceId credit_note
 */
export type CreditNote = {
  /*
   * The integer amount in %s representing the total amount of the credit note, including tax.
   */
  amount: number;
  /*
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   *
   * @format unix-time
   */
  created: number;
  /*
   * Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
   */
  currency: string;
  /*
   * ID of the customer.
   */
  customer: string | Customer | DeletedCustomer;
  /*
   * Customer balance transaction related to this credit note.
   */
  customer_balance_transaction?: string | CustomerBalanceTransaction | null;
  /*
   * The integer amount in %s representing the total amount of discount that was credited.
   */
  discount_amount: number;
  /*
   * The aggregate amounts calculated per discount for all line items.
   */
  discount_amounts: DiscountsResourceDiscountAmount[];
  /*
   * Unique identifier for the object.
   *
   * @maxLength 5000
   */
  id: string;
  /*
   * ID of the invoice.
   */
  invoice: string | Invoice;
  /*
   * Line items that make up the credit note
   */
  lines: {
    /*
     * Details about each object.
     */
    data: CreditNoteLineItem[];
    /*
     * True if this list has another page of items after this one that can be fetched.
     */
    has_more: boolean;
    /*
     * String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
     */
    object: "list";
    /*
     * The URL where this list can be accessed.
     *
     * @maxLength 5000
     */
    url: string;
  };
  /*
   * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
   */
  livemode: boolean;
  /*
   * Customer-facing text that appears on the credit note PDF.
   *
   * @maxLength 5000
   */
  memo?: string | null;
  /*
   * Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
   */
  metadata?: {
    [key: string]: string;
  } | null;
  /*
   * A unique number that identifies this particular credit note and appears on the PDF of the credit note and its associated invoice.
   *
   * @maxLength 5000
   */
  number: string;
  /*
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: "credit_note";
  /*
   * Amount that was credited outside of Stripe.
   */
  out_of_band_amount?: number | null;
  /*
   * The link to download the PDF of the credit note.
   *
   * @maxLength 5000
   */
  pdf: string;
  /*
   * Reason for issuing this credit note, one of `duplicate`, `fraudulent`, `order_change`, or `product_unsatisfactory`
   */
  reason?:
    | "duplicate"
    | "fraudulent"
    | "order_change"
    | "product_unsatisfactory";
  /*
   * Refund related to this credit note.
   */
  refund?: string | Refund | null;
  /*
   * Status of this credit note, one of `issued` or `void`. Learn more about [voiding credit notes](https://stripe.com/docs/billing/invoices/credit-notes#voiding).
   */
  status: "issued" | "void";
  /*
   * The integer amount in %s representing the amount of the credit note, excluding tax and invoice level discounts.
   */
  subtotal: number;
  /*
   * The aggregate amounts calculated per tax rate for all line items.
   */
  tax_amounts: CreditNoteTaxAmount[];
  /*
   * The integer amount in %s representing the total amount of the credit note, including tax and all discount.
   */
  total: number;
  /*
   * Type of this credit note, one of `pre_payment` or `post_payment`. A `pre_payment` credit note means it was issued when the invoice was open. A `post_payment` credit note means it was issued when the invoice was paid.
   */
  type: "post_payment" | "pre_payment";
  /*
   * The time that the credit note was voided.
   *
   * @format unix-time
   */
  voided_at?: number | null;
};

/**
 * @x-resourceId credit_note_line_item
 */
export type CreditNoteLineItem = {
  /*
   * The integer amount in %s representing the gross amount being credited for this line item, excluding (exclusive) tax and discounts.
   */
  amount: number;
  /*
   * Description of the item being credited.
   *
   * @maxLength 5000
   */
  description?: string | null;
  /*
   * The integer amount in %s representing the discount being credited for this line item.
   */
  discount_amount: number;
  /*
   * The amount of discount calculated per discount for this line item
   */
  discount_amounts: DiscountsResourceDiscountAmount[];
  /*
   * Unique identifier for the object.
   *
   * @maxLength 5000
   */
  id: string;
  /*
   * ID of the invoice line item being credited
   *
   * @maxLength 5000
   */
  invoice_line_item?: string;
  /*
   * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
   */
  livemode: boolean;
  /*
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: "credit_note_line_item";
  /*
   * The number of units of product being credited.
   */
  quantity?: number | null;
  /*
   * The amount of tax calculated per tax rate for this line item
   */
  tax_amounts: CreditNoteTaxAmount[];
  /*
   * The tax rates which apply to the line item.
   */
  tax_rates: TaxRate[];
  /*
   * The type of the credit note line item, one of `invoice_line_item` or `custom_line_item`. When the type is `invoice_line_item` there is an additional `invoice_line_item` property on the resource the value of which is the id of the credited line item on the invoice.
   */
  type: "custom_line_item" | "invoice_line_item";
  /*
   * The cost of each unit of product being credited.
   */
  unit_amount?: number | null;
  /*
   * Same as `unit_amount`, but contains a decimal value with at most 12 decimal places.
   *
   * @format decimal
   */
  unit_amount_decimal?: string | null;
};

export type CreditNoteTaxAmount = {
  /*
   * The amount, in %s, of the tax.
   */
  amount: number;
  /*
   * Whether this tax amount is inclusive or exclusive.
   */
  inclusive: boolean;
  /*
   * The tax rate that was applied to get this tax amount.
   */
  tax_rate: string | TaxRate;
};

/**
 * `Customer` objects allow you to perform recurring charges, and to track
 * multiple charges, that are associated with the same customer. The API allows
 * you to create, delete, and update your customers. You can retrieve individual
 * customers as well as a list of all your customers.
 *
 * Related guide: [Save a card during payment](https://stripe.com/docs/payments/save-during-payment).
 *
 * @x-resourceId customer
 */
export type Customer = {
  /*
   * The customer's address.
   */
  address?: Address | null;
  /*
   * Current balance, if any, being stored on the customer. If negative, the customer has credit to apply to their next invoice. If positive, the customer has an amount owed that will be added to their next invoice. The balance does not refer to any unpaid invoices; it solely takes into account amounts that have yet to be successfully applied to any invoice. This balance is only taken into account as invoices are finalized.
   */
  balance?: number;
  /*
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   *
   * @format unix-time
   */
  created: number;
  /*
   * Three-letter [ISO code for the currency](https://stripe.com/docs/currencies) the customer can be charged in for recurring billing purposes.
   *
   * @maxLength 5000
   */
  currency?: string | null;
  /*
   * ID of the default payment source for the customer.
   *
   * If you are using payment methods created via the PaymentMethods API, see the [invoice_settings.default_payment_method](https://stripe.com/docs/api/customers/object#customer_object-invoice_settings-default_payment_method) field instead.
   */
  default_source?:
    | string
    | AlipayAccount
    | BankAccount
    | BitcoinReceiver
    | Card
    | Source
    | null;
  /*
   * When the customer's latest invoice is billed by charging automatically, `delinquent` is `true` if the invoice's latest charge failed. When the customer's latest invoice is billed by sending an invoice, `delinquent` is `true` if the invoice isn't paid by its due date.
   *
   * If an invoice is marked uncollectible by [dunning](https://stripe.com/docs/billing/automatic-collection), `delinquent` doesn't get reset to `false`.
   */
  delinquent?: boolean | null;
  /*
   * An arbitrary string attached to the object. Often useful for displaying to users.
   *
   * @maxLength 5000
   */
  description?: string | null;
  /*
   * Describes the current discount active on the customer, if there is one.
   */
  discount?: Discount | null;
  /*
   * The customer's email address.
   *
   * @maxLength 5000
   */
  email?: string | null;
  /*
   * Unique identifier for the object.
   *
   * @maxLength 5000
   */
  id: string;
  /*
   * The prefix for the customer used to generate unique invoice numbers.
   *
   * @maxLength 5000
   */
  invoice_prefix?: string | null;
  invoice_settings?: InvoiceSettingCustomerSetting;
  /*
   * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
   */
  livemode: boolean;
  /*
   * Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
   */
  metadata?: {
    [key: string]: string;
  };
  /*
   * The customer's full name or business name.
   *
   * @maxLength 5000
   */
  name?: string | null;
  /*
   * The suffix of the customer's next invoice number, e.g., 0001.
   */
  next_invoice_sequence?: number;
  /*
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: "customer";
  /*
   * The customer's phone number.
   *
   * @maxLength 5000
   */
  phone?: string | null;
  /*
   * The customer's preferred locales (languages), ordered by preference.
   */
  preferred_locales?: string[] | null;
  /*
   * Mailing and shipping address for the customer. Appears on invoices emailed to this customer.
   */
  shipping?: Shipping | null;
  /*
   * The customer's payment sources, if any.
   */
  sources?: {
    /*
     * Details about each object.
     */
    data: (AlipayAccount | BankAccount | BitcoinReceiver | Card | Source)[];
    /*
     * True if this list has another page of items after this one that can be fetched.
     */
    has_more: boolean;
    /*
     * String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
     */
    object: "list";
    /*
     * The URL where this list can be accessed.
     *
     * @maxLength 5000
     */
    url: string;
  };
  /*
   * The customer's current subscriptions, if any.
   */
  subscriptions?: {
    /*
     * Details about each object.
     */
    data: Subscription[];
    /*
     * True if this list has another page of items after this one that can be fetched.
     */
    has_more: boolean;
    /*
     * String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
     */
    object: "list";
    /*
     * The URL where this list can be accessed.
     *
     * @maxLength 5000
     */
    url: string;
  };
  tax?: CustomerTax;
  /*
   * Describes the customer's tax exemption status. One of `none`, `exempt`, or `reverse`. When set to `reverse`, invoice and receipt PDFs include the text **"Reverse charge"**.
   */
  tax_exempt?: "exempt" | "none" | "reverse";
  /*
   * The customer's tax IDs.
   */
  tax_ids?: {
    /*
     * Details about each object.
     */
    data: TaxId[];
    /*
     * True if this list has another page of items after this one that can be fetched.
     */
    has_more: boolean;
    /*
     * String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
     */
    object: "list";
    /*
     * The URL where this list can be accessed.
     *
     * @maxLength 5000
     */
    url: string;
  };
};

export type CustomerAcceptance = {
  /*
   * The time at which the customer accepted the Mandate.
   *
   * @format unix-time
   */
  accepted_at?: number | null;
  offline?: OfflineAcceptance;
  online?: OnlineAcceptance;
  /*
   * The type of customer acceptance information included with the Mandate. One of `online` or `offline`.
   */
  type: "offline" | "online";
};

/**
 * Each customer has a [`balance`](https://stripe.com/docs/api/customers/object#customer_object-balance) value,
 * which denotes a debit or credit that's automatically applied to their next invoice upon finalization.
 * You may modify the value directly by using the [update customer API](https://stripe.com/docs/api/customers/update),
 * or by creating a Customer Balance Transaction, which increments or decrements the customer's `balance` by the specified `amount`.
 *
 * Related guide: [Customer Balance](https://stripe.com/docs/billing/customer/balance) to learn more.
 *
 * @x-resourceId customer_balance_transaction
 */
export type CustomerBalanceTransaction = {
  /*
   * The amount of the transaction. A negative value is a credit for the customer's balance, and a positive value is a debit to the customer's `balance`.
   */
  amount: number;
  /*
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   *
   * @format unix-time
   */
  created: number;
  /*
   * The ID of the credit note (if any) related to the transaction.
   */
  credit_note?: string | CreditNote | null;
  /*
   * Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
   */
  currency: string;
  /*
   * The ID of the customer the transaction belongs to.
   */
  customer: string | Customer;
  /*
   * An arbitrary string attached to the object. Often useful for displaying to users.
   *
   * @maxLength 5000
   */
  description?: string | null;
  /*
   * The customer's `balance` after the transaction was applied. A negative value decreases the amount due on the customer's next invoice. A positive value increases the amount due on the customer's next invoice.
   */
  ending_balance: number;
  /*
   * Unique identifier for the object.
   *
   * @maxLength 5000
   */
  id: string;
  /*
   * The ID of the invoice (if any) related to the transaction.
   */
  invoice?: string | Invoice | null;
  /*
   * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
   */
  livemode: boolean;
  /*
   * Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
   */
  metadata?: {
    [key: string]: string;
  } | null;
  /*
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: "customer_balance_transaction";
  /*
   * Transaction type: `adjustment`, `applied_to_invoice`, `credit_note`, `initial`, `invoice_too_large`, `invoice_too_small`, `unspent_receiver_credit`, or `unapplied_from_invoice`. See the [Customer Balance page](https://stripe.com/docs/billing/customer/balance#types) to learn more about transaction types.
   */
  type:
    | "adjustment"
    | "applied_to_invoice"
    | "credit_note"
    | "initial"
    | "invoice_too_large"
    | "invoice_too_small"
    | "migration"
    | "unapplied_from_invoice"
    | "unspent_receiver_credit";
};

export type CustomerTax = {
  /*
   * Surfaces if automatic tax computation is possible given the current customer location information.
   */
  automatic_tax:
    | "failed"
    | "not_collecting"
    | "supported"
    | "unrecognized_location";
  /*
   * A recent IP address of the customer used for tax reporting and tax location inference.
   *
   * @maxLength 5000
   */
  ip_address?: string | null;
  /*
   * The customer's location as identified by Stripe Tax.
   */
  location?: CustomerTaxLocation | null;
};

export type CustomerTaxLocation = {
  /*
   * The customer's country as identified by Stripe Tax.
   *
   * @maxLength 5000
   */
  country: string;
  /*
   * The data source used to infer the customer's location.
   */
  source:
    | "billing_address"
    | "ip_address"
    | "payment_method"
    | "shipping_destination";
  /*
   * The customer's state, county, province, or region as identified by Stripe Tax.
   *
   * @maxLength 5000
   */
  state?: string | null;
};

/**
 * @x-resourceId deleted_account
 */
export type DeletedAccount = {
  /*
   * Always true for a deleted object
   */
  deleted: true;
  /*
   * Unique identifier for the object.
   *
   * @maxLength 5000
   */
  id: string;
  /*
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: "account";
};

export type DeletedAlipayAccount = {
  /*
   * Always true for a deleted object
   */
  deleted: true;
  /*
   * Unique identifier for the object.
   *
   * @maxLength 5000
   */
  id: string;
  /*
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: "alipay_account";
};

/**
 * @x-resourceId deleted_apple_pay_domain
 */
export type DeletedApplePayDomain = {
  /*
   * Always true for a deleted object
   */
  deleted: true;
  /*
   * Unique identifier for the object.
   *
   * @maxLength 5000
   */
  id: string;
  /*
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: "apple_pay_domain";
};

export type DeletedBankAccount = {
  /*
   * Three-letter [ISO code for the currency](https://stripe.com/docs/payouts) paid out to the bank account.
   *
   * @maxLength 5000
   */
  currency?: string | null;
  /*
   * Always true for a deleted object
   */
  deleted: true;
  /*
   * Unique identifier for the object.
   *
   * @maxLength 5000
   */
  id: string;
  /*
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: "bank_account";
};

export type DeletedBitcoinReceiver = {
  /*
   * Always true for a deleted object
   */
  deleted: true;
  /*
   * Unique identifier for the object.
   *
   * @maxLength 5000
   */
  id: string;
  /*
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: "bitcoin_receiver";
};

export type DeletedCard = {
  /*
   * Three-letter [ISO code for the currency](https://stripe.com/docs/payouts) paid out to the bank account.
   *
   * @maxLength 5000
   */
  currency?: string | null;
  /*
   * Always true for a deleted object
   */
  deleted: true;
  /*
   * Unique identifier for the object.
   *
   * @maxLength 5000
   */
  id: string;
  /*
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: "card";
};

/**
 * @x-resourceId deleted_coupon
 */
export type DeletedCoupon = {
  /*
   * Always true for a deleted object
   */
  deleted: true;
  /*
   * Unique identifier for the object.
   *
   * @maxLength 5000
   */
  id: string;
  /*
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: "coupon";
};

/**
 * @x-resourceId deleted_customer
 */
export type DeletedCustomer = {
  /*
   * Always true for a deleted object
   */
  deleted: true;
  /*
   * Unique identifier for the object.
   *
   * @maxLength 5000
   */
  id: string;
  /*
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: "customer";
};

/**
 * @x-resourceId deleted_discount
 */
export type DeletedDiscount = {
  /*
   * The Checkout session that this coupon is applied to, if it is applied to a particular session in payment mode. Will not be present for subscription mode.
   *
   * @maxLength 5000
   */
  checkout_session?: string | null;
  coupon: Coupon;
  /*
   * The ID of the customer associated with this discount.
   */
  customer?: string | Customer | DeletedCustomer | null;
  /*
   * Always true for a deleted object
   */
  deleted: true;
  /*
   * The ID of the discount object. Discounts cannot be fetched by ID. Use `expand[]=discounts` in API calls to expand discount IDs in an array.
   *
   * @maxLength 5000
   */
  id: string;
  /*
   * The invoice that the discount's coupon was applied to, if it was applied directly to a particular invoice.
   *
   * @maxLength 5000
   */
  invoice?: string | null;
  /*
   * The invoice item `id` (or invoice line item `id` for invoice line items of type='subscription') that the discount's coupon was applied to, if it was applied directly to a particular invoice item or invoice line item.
   *
   * @maxLength 5000
   */
  invoice_item?: string | null;
  /*
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: "discount";
  /*
   * The promotion code applied to create this discount.
   */
  promotion_code?: string | PromotionCode | null;
  /*
   * Date that the coupon was applied.
   *
   * @format unix-time
   */
  start: number;
  /*
   * The subscription that this coupon is applied to, if it is applied to a particular subscription.
   *
   * @maxLength 5000
   */
  subscription?: string | null;
};

/**
 * @x-resourceId deleted_external_account
 */
export type DeletedExternalAccount = DeletedBankAccount | DeletedCard;

/**
 * @x-resourceId deleted_invoice
 */
export type DeletedInvoice = {
  /*
   * Always true for a deleted object
   */
  deleted: true;
  /*
   * Unique identifier for the object.
   *
   * @maxLength 5000
   */
  id: string;
  /*
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: "invoice";
};

/**
 * @x-resourceId deleted_invoiceitem
 */
export type DeletedInvoiceitem = {
  /*
   * Always true for a deleted object
   */
  deleted: true;
  /*
   * Unique identifier for the object.
   *
   * @maxLength 5000
   */
  id: string;
  /*
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: "invoiceitem";
};

/**
 * @x-resourceId deleted_payment_source
 */
export type DeletedPaymentSource =
  | DeletedAlipayAccount
  | DeletedBankAccount
  | DeletedBitcoinReceiver
  | DeletedCard;

/**
 * @x-resourceId deleted_person
 */
export type DeletedPerson = {
  /*
   * Always true for a deleted object
   */
  deleted: true;
  /*
   * Unique identifier for the object.
   *
   * @maxLength 5000
   */
  id: string;
  /*
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: "person";
};

/**
 * @x-resourceId deleted_plan
 */
export type DeletedPlan = {
  /*
   * Always true for a deleted object
   */
  deleted: true;
  /*
   * Unique identifier for the object.
   *
   * @maxLength 5000
   */
  id: string;
  /*
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: "plan";
};

export type DeletedPrice = {
  /*
   * Always true for a deleted object
   */
  deleted: true;
  /*
   * Unique identifier for the object.
   *
   * @maxLength 5000
   */
  id: string;
  /*
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: "price";
};

/**
 * @x-resourceId deleted_product
 */
export type DeletedProduct = {
  /*
   * Always true for a deleted object
   */
  deleted: true;
  /*
   * Unique identifier for the object.
   *
   * @maxLength 5000
   */
  id: string;
  /*
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: "product";
};

/**
 * @x-resourceId deleted_radar.value_list
 */
export type DeletedRadarValueList = {
  /*
   * Always true for a deleted object
   */
  deleted: true;
  /*
   * Unique identifier for the object.
   *
   * @maxLength 5000
   */
  id: string;
  /*
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: "radar.value_list";
};

/**
 * @x-resourceId deleted_radar.value_list_item
 */
export type DeletedRadarValueListItem = {
  /*
   * Always true for a deleted object
   */
  deleted: true;
  /*
   * Unique identifier for the object.
   *
   * @maxLength 5000
   */
  id: string;
  /*
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: "radar.value_list_item";
};

/**
 * @x-resourceId deleted_recipient
 */
export type DeletedRecipient = {
  /*
   * Always true for a deleted object
   */
  deleted: true;
  /*
   * Unique identifier for the object.
   *
   * @maxLength 5000
   */
  id: string;
  /*
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: "recipient";
};

/**
 * @x-resourceId deleted_sku
 */
export type DeletedSku = {
  /*
   * Always true for a deleted object
   */
  deleted: true;
  /*
   * Unique identifier for the object.
   *
   * @maxLength 5000
   */
  id: string;
  /*
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: "sku";
};

/**
 * @x-resourceId deleted_subscription_item
 */
export type DeletedSubscriptionItem = {
  /*
   * Always true for a deleted object
   */
  deleted: true;
  /*
   * Unique identifier for the object.
   *
   * @maxLength 5000
   */
  id: string;
  /*
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: "subscription_item";
};

/**
 * @x-resourceId deleted_tax_id
 */
export type DeletedTaxId = {
  /*
   * Always true for a deleted object
   */
  deleted: true;
  /*
   * Unique identifier for the object.
   *
   * @maxLength 5000
   */
  id: string;
  /*
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: "tax_id";
};

/**
 * @x-resourceId deleted_terminal.location
 */
export type DeletedTerminalLocation = {
  /*
   * Always true for a deleted object
   */
  deleted: true;
  /*
   * Unique identifier for the object.
   *
   * @maxLength 5000
   */
  id: string;
  /*
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: "terminal.location";
};

/**
 * @x-resourceId deleted_terminal.reader
 */
export type DeletedTerminalReader = {
  /*
   * Always true for a deleted object
   */
  deleted: true;
  /*
   * Unique identifier for the object.
   *
   * @maxLength 5000
   */
  id: string;
  /*
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: "terminal.reader";
};

/**
 * @x-resourceId deleted_webhook_endpoint
 */
export type DeletedWebhookEndpoint = {
  /*
   * Always true for a deleted object
   */
  deleted: true;
  /*
   * Unique identifier for the object.
   *
   * @maxLength 5000
   */
  id: string;
  /*
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: "webhook_endpoint";
};

export type DeliveryEstimate = {
  /*
   * If `type` is `"exact"`, `date` will be the expected delivery date in the format YYYY-MM-DD.
   *
   * @maxLength 5000
   */
  date?: string;
  /*
   * If `type` is `"range"`, `earliest` will be be the earliest delivery date in the format YYYY-MM-DD.
   *
   * @maxLength 5000
   */
  earliest?: string;
  /*
   * If `type` is `"range"`, `latest` will be the latest delivery date in the format YYYY-MM-DD.
   *
   * @maxLength 5000
   */
  latest?: string;
  /*
   * The type of estimate. Must be either `"range"` or `"exact"`.
   *
   * @maxLength 5000
   */
  type: string;
};

/**
 * A discount represents the actual application of a coupon to a particular
 * customer. It contains information about when the discount began and when it
 * will end.
 *
 * Related guide: [Applying Discounts to Subscriptions](https://stripe.com/docs/billing/subscriptions/discounts).
 *
 * @x-resourceId discount
 */
export type Discount = {
  /*
   * The Checkout session that this coupon is applied to, if it is applied to a particular session in payment mode. Will not be present for subscription mode.
   *
   * @maxLength 5000
   */
  checkout_session?: string | null;
  coupon: Coupon;
  /*
   * The ID of the customer associated with this discount.
   */
  customer?: string | Customer | DeletedCustomer | null;
  /*
   * If the coupon has a duration of `repeating`, the date that this discount will end. If the coupon has a duration of `once` or `forever`, this attribute will be null.
   *
   * @format unix-time
   */
  end?: number | null;
  /*
   * The ID of the discount object. Discounts cannot be fetched by ID. Use `expand[]=discounts` in API calls to expand discount IDs in an array.
   *
   * @maxLength 5000
   */
  id: string;
  /*
   * The invoice that the discount's coupon was applied to, if it was applied directly to a particular invoice.
   *
   * @maxLength 5000
   */
  invoice?: string | null;
  /*
   * The invoice item `id` (or invoice line item `id` for invoice line items of type='subscription') that the discount's coupon was applied to, if it was applied directly to a particular invoice item or invoice line item.
   *
   * @maxLength 5000
   */
  invoice_item?: string | null;
  /*
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: "discount";
  /*
   * The promotion code applied to create this discount.
   */
  promotion_code?: string | PromotionCode | null;
  /*
   * Date that the coupon was applied.
   *
   * @format unix-time
   */
  start: number;
  /*
   * The subscription that this coupon is applied to, if it is applied to a particular subscription.
   *
   * @maxLength 5000
   */
  subscription?: string | null;
};

export type DiscountsResourceDiscountAmount = {
  /*
   * The amount, in %s, of the discount.
   */
  amount: number;
  /*
   * The discount that was applied to get this discount amount.
   */
  discount: string | Discount | DeletedDiscount;
};

/**
 * A dispute occurs when a customer questions your charge with their card issuer.
 * When this happens, you're given the opportunity to respond to the dispute with
 * evidence that shows that the charge is legitimate. You can find more
 * information about the dispute process in our [Disputes and
 * Fraud](/docs/disputes) documentation.
 *
 * Related guide: [Disputes and Fraud](https://stripe.com/docs/disputes).
 *
 * @x-resourceId dispute
 */
export type Dispute = {
  /*
   * Disputed amount. Usually the amount of the charge, but can differ (usually because of currency fluctuation or because only part of the order is disputed).
   */
  amount: number;
  /*
   * List of zero, one, or two balance transactions that show funds withdrawn and reinstated to your Stripe account as a result of this dispute.
   */
  balance_transactions: BalanceTransaction[];
  /*
   * ID of the charge that was disputed.
   */
  charge: string | Charge;
  /*
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   *
   * @format unix-time
   */
  created: number;
  /*
   * Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
   */
  currency: string;
  evidence: DisputeEvidence;
  evidence_details: DisputeEvidenceDetails;
  /*
   * Unique identifier for the object.
   *
   * @maxLength 5000
   */
  id: string;
  /*
   * If true, it is still possible to refund the disputed payment. Once the payment has been fully refunded, no further funds will be withdrawn from your Stripe account as a result of this dispute.
   */
  is_charge_refundable: boolean;
  /*
   * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
   */
  livemode: boolean;
  /*
   * Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
   */
  metadata: {
    [key: string]: string;
  };
  /*
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: "dispute";
  /*
   * ID of the PaymentIntent that was disputed.
   */
  payment_intent?: string | PaymentIntent | null;
  /*
   * Reason given by cardholder for dispute. Possible values are `bank_cannot_process`, `check_returned`, `credit_not_processed`, `customer_initiated`, `debit_not_authorized`, `duplicate`, `fraudulent`, `general`, `incorrect_account_details`, `insufficient_funds`, `product_not_received`, `product_unacceptable`, `subscription_canceled`, or `unrecognized`. Read more about [dispute reasons](https://stripe.com/docs/disputes/categories).
   *
   * @maxLength 5000
   */
  reason: string;
  /*
   * Current status of dispute. Possible values are `warning_needs_response`, `warning_under_review`, `warning_closed`, `needs_response`, `under_review`, `charge_refunded`, `won`, or `lost`.
   */
  status:
    | "charge_refunded"
    | "lost"
    | "needs_response"
    | "under_review"
    | "warning_closed"
    | "warning_needs_response"
    | "warning_under_review"
    | "won";
};

export type DisputeEvidence = {
  /*
   * Any server or activity logs showing proof that the customer accessed or downloaded the purchased digital product. This information should include IP addresses, corresponding timestamps, and any detailed recorded activity.
   *
   * @maxLength 150000
   */
  access_activity_log?: string | null;
  /*
   * The billing address provided by the customer.
   *
   * @maxLength 5000
   */
  billing_address?: string | null;
  /*
   * (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Your subscription cancellation policy, as shown to the customer.
   */
  cancellation_policy?: string | File | null;
  /*
   * An explanation of how and when the customer was shown your refund policy prior to purchase.
   *
   * @maxLength 150000
   */
  cancellation_policy_disclosure?: string | null;
  /*
   * A justification for why the customer's subscription was not canceled.
   *
   * @maxLength 150000
   */
  cancellation_rebuttal?: string | null;
  /*
   * (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Any communication with the customer that you feel is relevant to your case. Examples include emails proving that the customer received the product or service, or demonstrating their use of or satisfaction with the product or service.
   */
  customer_communication?: string | File | null;
  /*
   * The email address of the customer.
   *
   * @maxLength 5000
   */
  customer_email_address?: string | null;
  /*
   * The name of the customer.
   *
   * @maxLength 5000
   */
  customer_name?: string | null;
  /*
   * The IP address that the customer used when making the purchase.
   *
   * @maxLength 5000
   */
  customer_purchase_ip?: string | null;
  /*
   * (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) A relevant document or contract showing the customer's signature.
   */
  customer_signature?: string | File | null;
  /*
   * (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Documentation for the prior charge that can uniquely identify the charge, such as a receipt, shipping label, work order, etc. This document should be paired with a similar document from the disputed payment that proves the two payments are separate.
   */
  duplicate_charge_documentation?: string | File | null;
  /*
   * An explanation of the difference between the disputed charge versus the prior charge that appears to be a duplicate.
   *
   * @maxLength 150000
   */
  duplicate_charge_explanation?: string | null;
  /*
   * The Stripe ID for the prior charge which appears to be a duplicate of the disputed charge.
   *
   * @maxLength 5000
   */
  duplicate_charge_id?: string | null;
  /*
   * A description of the product or service that was sold.
   *
   * @maxLength 150000
   */
  product_description?: string | null;
  /*
   * (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Any receipt or message sent to the customer notifying them of the charge.
   */
  receipt?: string | File | null;
  /*
   * (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Your refund policy, as shown to the customer.
   */
  refund_policy?: string | File | null;
  /*
   * Documentation demonstrating that the customer was shown your refund policy prior to purchase.
   *
   * @maxLength 150000
   */
  refund_policy_disclosure?: string | null;
  /*
   * A justification for why the customer is not entitled to a refund.
   *
   * @maxLength 150000
   */
  refund_refusal_explanation?: string | null;
  /*
   * The date on which the customer received or began receiving the purchased service, in a clear human-readable format.
   *
   * @maxLength 5000
   */
  service_date?: string | null;
  /*
   * (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Documentation showing proof that a service was provided to the customer. This could include a copy of a signed contract, work order, or other form of written agreement.
   */
  service_documentation?: string | File | null;
  /*
   * The address to which a physical product was shipped. You should try to include as complete address information as possible.
   *
   * @maxLength 5000
   */
  shipping_address?: string | null;
  /*
   * The delivery service that shipped a physical product, such as Fedex, UPS, USPS, etc. If multiple carriers were used for this purchase, please separate them with commas.
   *
   * @maxLength 5000
   */
  shipping_carrier?: string | null;
  /*
   * The date on which a physical product began its route to the shipping address, in a clear human-readable format.
   *
   * @maxLength 5000
   */
  shipping_date?: string | null;
  /*
   * (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Documentation showing proof that a product was shipped to the customer at the same address the customer provided to you. This could include a copy of the shipment receipt, shipping label, etc. It should show the customer's full shipping address, if possible.
   */
  shipping_documentation?: string | File | null;
  /*
   * The tracking number for a physical product, obtained from the delivery service. If multiple tracking numbers were generated for this purchase, please separate them with commas.
   *
   * @maxLength 5000
   */
  shipping_tracking_number?: string | null;
  /*
   * (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Any additional evidence or statements.
   */
  uncategorized_file?: string | File | null;
  /*
   * Any additional evidence or statements.
   *
   * @maxLength 150000
   */
  uncategorized_text?: string | null;
};

export type DisputeEvidenceDetails = {
  /*
   * Date by which evidence must be submitted in order to successfully challenge dispute. Will be null if the customer's bank or credit card company doesn't allow a response for this particular dispute.
   *
   * @format unix-time
   */
  due_by?: number | null;
  /*
   * Whether evidence has been staged for this dispute.
   */
  has_evidence: boolean;
  /*
   * Whether the last evidence submission was submitted past the due date. Defaults to `false` if no evidence submissions have occurred. If `true`, then delivery of the latest evidence is *not* guaranteed.
   */
  past_due: boolean;
  /*
   * The number of times evidence has been submitted. Typically, you may only submit evidence once.
   */
  submission_count: number;
};

/**
 * @x-resourceId ephemeral_key
 */
export type EphemeralKey = {
  /*
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   *
   * @format unix-time
   */
  created: number;
  /*
   * Time at which the key will expire. Measured in seconds since the Unix epoch.
   *
   * @format unix-time
   */
  expires: number;
  /*
   * Unique identifier for the object.
   *
   * @maxLength 5000
   */
  id: string;
  /*
   * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
   */
  livemode: boolean;
  /*
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: "ephemeral_key";
  /*
   * The key's secret. You can use this value to make authorized requests to the Stripe API.
   *
   * @maxLength 5000
   */
  secret?: string;
};

/**
 * An error response from the Stripe API
 */
export type Error = {
  error: ApiErrors;
};

/**
 * Events are our way of letting you know when something interesting happens in
 * your account. When an interesting event occurs, we create a new `Event`
 * object. For example, when a charge succeeds, we create a `charge.succeeded`
 * event; and when an invoice payment attempt fails, we create an
 * `invoice.payment_failed` event. Note that many API requests may cause multiple
 * events to be created. For example, if you create a new subscription for a
 * customer, you will receive both a `customer.subscription.created` event and a
 * `charge.succeeded` event.
 *
 * Events occur when the state of another API resource changes. The state of that
 * resource at the time of the change is embedded in the event's data field. For
 * example, a `charge.succeeded` event will contain a charge, and an
 * `invoice.payment_failed` event will contain an invoice.
 *
 * As with other API resources, you can use endpoints to retrieve an
 * [individual event](https://stripe.com/docs/api#retrieve_event) or a [list of events](https://stripe.com/docs/api#list_events)
 * from the API. We also have a separate
 * [webhooks](http://en.wikipedia.org/wiki/Webhook) system for sending the
 * `Event` objects directly to an endpoint on your server. Webhooks are managed
 * in your
 * [account settings](https://dashboard.stripe.com/account/webhooks),
 * and our [Using Webhooks](https://stripe.com/docs/webhooks) guide will help you get set up.
 *
 * When using [Connect](https://stripe.com/docs/connect), you can also receive notifications of
 * events that occur in connected accounts. For these events, there will be an
 * additional `account` attribute in the received `Event` object.
 *
 * **NOTE:** Right now, access to events through the [Retrieve Event API](https://stripe.com/docs/api#retrieve_event) is
 * guaranteed only for 30 days.
 *
 * @x-resourceId event
 */
export type Event = {
  /*
   * The connected account that originated the event.
   *
   * @maxLength 5000
   */
  account?: string;
  /*
   * The Stripe API version used to render `data`. *Note: This property is populated only for events on or after October 31, 2014*.
   *
   * @maxLength 5000
   */
  api_version?: string | null;
  /*
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   *
   * @format unix-time
   */
  created: number;
  data: NotificationEventData;
  /*
   * Unique identifier for the object.
   *
   * @maxLength 5000
   */
  id: string;
  /*
   * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
   */
  livemode: boolean;
  /*
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: "event";
  /*
   * Number of webhooks that have yet to be successfully delivered (i.e., to return a 20x response) to the URLs you've specified.
   */
  pending_webhooks: number;
  /*
   * Information on the API request that instigated the event.
   */
  request?: NotificationEventRequest | null;
  /*
   * Description of the event (e.g., `invoice.created` or `charge.refunded`).
   *
   * @maxLength 5000
   */
  type: string;
};

/**
 * `Exchange Rate` objects allow you to determine the rates that Stripe is
 * currently using to convert from one currency to another. Since this number is
 * variable throughout the day, there are various reasons why you might want to
 * know the current rate (for example, to dynamically price an item for a user
 * with a default payment in a foreign currency).
 *
 * If you want a guarantee that the charge is made with a certain exchange rate
 * you expect is current, you can pass in `exchange_rate` to charges endpoints.
 * If the value is no longer up to date, the charge won't go through. Please
 * refer to our [Exchange Rates API](https://stripe.com/docs/exchange-rates) guide for more
 * details.
 *
 * @x-resourceId exchange_rate
 */
export type ExchangeRate = {
  /*
   * Unique identifier for the object. Represented as the three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html) in lowercase.
   *
   * @maxLength 5000
   */
  id: string;
  /*
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: "exchange_rate";
  /*
   * Hash where the keys are supported currencies and the values are the exchange rate at which the base id currency converts to the key currency.
   */
  rates: {
    [key: string]: number;
  };
};

/**
 * @x-resourceId external_account
 */
export type ExternalAccount = BankAccount | Card;

export type Fee = {
  /*
   * Amount of the fee, in cents.
   */
  amount: number;
  /*
   * ID of the Connect application that earned the fee.
   *
   * @maxLength 5000
   */
  application?: string | null;
  /*
   * Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
   */
  currency: string;
  /*
   * An arbitrary string attached to the object. Often useful for displaying to users.
   *
   * @maxLength 5000
   */
  description?: string | null;
  /*
   * Type of the fee, one of: `application_fee`, `stripe_fee` or `tax`.
   *
   * @maxLength 5000
   */
  type: string;
};

/**
 * `Application Fee Refund` objects allow you to refund an application fee that
 * has previously been created but not yet refunded. Funds will be refunded to
 * the Stripe account from which the fee was originally collected.
 *
 * Related guide: [Refunding Application Fees](https://stripe.com/docs/connect/destination-charges#refunding-app-fee).
 *
 * @x-resourceId fee_refund
 */
export type FeeRefund = {
  /*
   * Amount, in %s.
   */
  amount: number;
  /*
   * Balance transaction that describes the impact on your account balance.
   */
  balance_transaction?: string | BalanceTransaction | null;
  /*
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   *
   * @format unix-time
   */
  created: number;
  /*
   * Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
   */
  currency: string;
  /*
   * ID of the application fee that was refunded.
   */
  fee: string | ApplicationFee;
  /*
   * Unique identifier for the object.
   *
   * @maxLength 5000
   */
  id: string;
  /*
   * Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
   */
  metadata?: {
    [key: string]: string;
  } | null;
  /*
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: "fee_refund";
};

/**
 * This is an object representing a file hosted on Stripe's servers. The
 * file may have been uploaded by yourself using the [create file](https://stripe.com/docs/api#create_file)
 * request (for example, when uploading dispute evidence) or it may have
 * been created by Stripe (for example, the results of a [Sigma scheduled
 * query](#scheduled_queries)).
 *
 * Related guide: [File Upload Guide](https://stripe.com/docs/file-upload).
 *
 * @x-resourceId file
 */
export type File = {
  /*
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   *
   * @format unix-time
   */
  created: number;
  /*
   * The time at which the file expires and is no longer available in epoch seconds.
   *
   * @format unix-time
   */
  expires_at?: number | null;
  /*
   * A filename for the file, suitable for saving to a filesystem.
   *
   * @maxLength 5000
   */
  filename?: string | null;
  /*
   * Unique identifier for the object.
   *
   * @maxLength 5000
   */
  id: string;
  /*
   * A list of [file links](https://stripe.com/docs/api#file_links) that point at this file.
   */
  links?: {
    /*
     * Details about each object.
     */
    data: FileLink[];
    /*
     * True if this list has another page of items after this one that can be fetched.
     */
    has_more: boolean;
    /*
     * String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
     */
    object: "list";
    /*
     * The URL where this list can be accessed.
     *
     * @maxLength 5000
     */
    url: string;
  } | null;
  /*
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: "file";
  /*
   * The [purpose](https://stripe.com/docs/file-upload#uploading-a-file) of the uploaded file.
   *
   * @x-stripeBypassValidation true
   */
  purpose:
    | "account_requirement"
    | "additional_verification"
    | "business_icon"
    | "business_logo"
    | "customer_signature"
    | "dispute_evidence"
    | "document_provider_identity_document"
    | "finance_report_run"
    | "identity_document"
    | "identity_document_downloadable"
    | "pci_document"
    | "selfie"
    | "sigma_scheduled_query"
    | "tax_document_user_upload";
  /*
   * The size in bytes of the file object.
   */
  size: number;
  /*
   * A user friendly title for the document.
   *
   * @maxLength 5000
   */
  title?: string | null;
  /*
   * The type of the file returned (e.g., `csv`, `pdf`, `jpg`, or `png`).
   *
   * @maxLength 5000
   */
  type?: string | null;
  /*
   * The URL from which the file can be downloaded using your live secret API key.
   *
   * @maxLength 5000
   */
  url?: string | null;
};

/**
 * To share the contents of a `File` object with non-Stripe users, you can
 * create a `FileLink`. `FileLink`s contain a URL that can be used to
 * retrieve the contents of the file without authentication.
 *
 * @x-resourceId file_link
 */
export type FileLink = {
  /*
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   *
   * @format unix-time
   */
  created: number;
  /*
   * Whether this link is already expired.
   */
  expired: boolean;
  /*
   * Time at which the link expires.
   *
   * @format unix-time
   */
  expires_at?: number | null;
  /*
   * The file object this link points to.
   */
  file: string | File;
  /*
   * Unique identifier for the object.
   *
   * @maxLength 5000
   */
  id: string;
  /*
   * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
   */
  livemode: boolean;
  /*
   * Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
   */
  metadata: {
    [key: string]: string;
  };
  /*
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: "file_link";
  /*
   * The publicly accessible URL to download the file.
   *
   * @maxLength 5000
   */
  url?: string | null;
};

export type FinancialReportingFinanceReportRunRunParameters = {
  /*
   * The set of output columns requested for inclusion in the report run.
   */
  columns?: string[];
  /*
   * Connected account ID by which to filter the report run.
   *
   * @maxLength 5000
   */
  connected_account?: string;
  /*
   * Currency of objects to be included in the report run.
   */
  currency?: string;
  /*
   * Ending timestamp of data to be included in the report run (exclusive).
   *
   * @format unix-time
   */
  interval_end?: number;
  /*
   * Starting timestamp of data to be included in the report run.
   *
   * @format unix-time
   */
  interval_start?: number;
  /*
   * Payout ID by which to filter the report run.
   *
   * @maxLength 5000
   */
  payout?: string;
  /*
   * Category of balance transactions to be included in the report run.
   *
   * @maxLength 5000
   */
  reporting_category?: string;
  /*
   * Defaults to `Etc/UTC`. The output timezone for all timestamps in the report. A list of possible time zone values is maintained at the [IANA Time Zone Database](http://www.iana.org/time-zones). Has no effect on `interval_start` or `interval_end`.
   *
   * @maxLength 5000
   */
  timezone?: string;
};

/**
 * Point in Time
 */
export type GelatoDataDocumentReportDateOfBirth = {
  /*
   * Numerical day between 1 and 31.
   */
  day?: number | null;
  /*
   * Numerical month between 1 and 12.
   */
  month?: number | null;
  /*
   * The four-digit year.
   */
  year?: number | null;
};

/**
 * Point in Time
 */
export type GelatoDataDocumentReportExpirationDate = {
  /*
   * Numerical day between 1 and 31.
   */
  day?: number | null;
  /*
   * Numerical month between 1 and 12.
   */
  month?: number | null;
  /*
   * The four-digit year.
   */
  year?: number | null;
};

/**
 * Point in Time
 */
export type GelatoDataDocumentReportIssuedDate = {
  /*
   * Numerical day between 1 and 31.
   */
  day?: number | null;
  /*
   * Numerical month between 1 and 12.
   */
  month?: number | null;
  /*
   * The four-digit year.
   */
  year?: number | null;
};

/**
 * Point in Time
 */
export type GelatoDataIdNumberReportDate = {
  /*
   * Numerical day between 1 and 31.
   */
  day?: number | null;
  /*
   * Numerical month between 1 and 12.
   */
  month?: number | null;
  /*
   * The four-digit year.
   */
  year?: number | null;
};

/**
 * Point in Time
 */
export type GelatoDataVerifiedOutputsDate = {
  /*
   * Numerical day between 1 and 31.
   */
  day?: number | null;
  /*
   * Numerical month between 1 and 12.
   */
  month?: number | null;
  /*
   * The four-digit year.
   */
  year?: number | null;
};

/**
 * Result from a document check
 */
export type GelatoDocumentReport = {
  /*
   * Address as it appears in the document.
   */
  address?: Address | null;
  /*
   * Date of birth as it appears in the document.
   */
  dob?: GelatoDataDocumentReportDateOfBirth | null;
  /*
   * Details on the verification error. Present when status is `unverified`.
   */
  error?: GelatoDocumentReportError | null;
  /*
   * Expiration date of the document.
   */
  expiration_date?: GelatoDataDocumentReportExpirationDate | null;
  /*
   * Array of [File](https://stripe.com/docs/api/files) ids containing images for this document.
   */
  files?: string[] | null;
  /*
   * First name as it appears in the document.
   *
   * @maxLength 5000
   */
  first_name?: string | null;
  /*
   * Issued date of the document.
   */
  issued_date?: GelatoDataDocumentReportIssuedDate | null;
  /*
   * Issuing country of the document.
   *
   * @maxLength 5000
   */
  issuing_country?: string | null;
  /*
   * Last name as it appears in the document.
   *
   * @maxLength 5000
   */
  last_name?: string | null;
  /*
   * Document ID number.
   *
   * @maxLength 5000
   */
  number?: string | null;
  /*
   * Status of this `document` check.
   *
   * @x-stripeBypassValidation true
   */
  status: "unverified" | "verified";
  /*
   * Type of the document.
   */
  type?: "driving_license" | "id_card" | "passport";
};

export type GelatoDocumentReportError = {
  /*
   * A short machine-readable string giving the reason for the verification failure.
   */
  code?:
    | "document_expired"
    | "document_type_not_supported"
    | "document_unverified_other";
  /*
   * A human-readable message giving the reason for the failure. These messages can be shown to your users.
   *
   * @maxLength 5000
   */
  reason?: string | null;
};

/**
 * Result from an id_number check
 */
export type GelatoIdNumberReport = {
  /*
   * Date of birth.
   */
  dob?: GelatoDataIdNumberReportDate | null;
  /*
   * Details on the verification error. Present when status is `unverified`.
   */
  error?: GelatoIdNumberReportError | null;
  /*
   * First name.
   *
   * @maxLength 5000
   */
  first_name?: string | null;
  /*
   * ID number.
   *
   * @maxLength 5000
   */
  id_number?: string | null;
  /*
   * Type of ID number.
   */
  id_number_type?: "br_cpf" | "sg_nric" | "us_ssn";
  /*
   * Last name.
   *
   * @maxLength 5000
   */
  last_name?: string | null;
  /*
   * Status of this `id_number` check.
   *
   * @x-stripeBypassValidation true
   */
  status: "unverified" | "verified";
};

export type GelatoIdNumberReportError = {
  /*
   * A short machine-readable string giving the reason for the verification failure.
   */
  code?:
    | "id_number_insufficient_document_data"
    | "id_number_mismatch"
    | "id_number_unverified_other";
  /*
   * A human-readable message giving the reason for the failure. These messages can be shown to your users.
   *
   * @maxLength 5000
   */
  reason?: string | null;
};

export type GelatoReportDocumentOptions = {
  /*
   * Array of strings of allowed identity document types. If the provided identity document isn’t one of the allowed types, the verification check will fail with a document_type_not_allowed error code.
   */
  allowed_types?: ("driving_license" | "id_card" | "passport")[];
  /*
   * Collect an ID number and perform an [ID number check](https://stripe.com/docs/identity/verification-checks?type=id-number) with the document’s extracted name and date of birth.
   */
  require_id_number?: boolean;
  /*
   * Disable image uploads, identity document images have to be captured using the device’s camera.
   */
  require_live_capture?: boolean;
  /*
   * Capture a face image and perform a [selfie check](https://stripe.com/docs/identity/verification-checks?type=selfie) comparing a photo ID and a picture of your user’s face. [Learn more](https://stripe.com/docs/identity/selfie).
   */
  require_matching_selfie?: boolean;
};

export type GelatoReportIdNumberOptions = {};

/**
 * Result from a selfie check
 */
export type GelatoSelfieReport = {
  /*
   * ID of the [File](https://stripe.com/docs/api/files) holding the image of the identity document used in this check.
   *
   * @maxLength 5000
   */
  document?: string | null;
  /*
   * Details on the verification error. Present when status is `unverified`.
   */
  error?: GelatoSelfieReportError | null;
  /*
   * ID of the [File](https://stripe.com/docs/api/files) holding the image of the selfie used in this check.
   *
   * @maxLength 5000
   */
  selfie?: string | null;
  /*
   * Status of this `selfie` check.
   *
   * @x-stripeBypassValidation true
   */
  status: "unverified" | "verified";
};

export type GelatoSelfieReportError = {
  /*
   * A short machine-readable string giving the reason for the verification failure.
   */
  code?:
    | "selfie_document_missing_photo"
    | "selfie_face_mismatch"
    | "selfie_manipulated"
    | "selfie_unverified_other";
  /*
   * A human-readable message giving the reason for the failure. These messages can be shown to your users.
   *
   * @maxLength 5000
   */
  reason?: string | null;
};

export type GelatoSessionDocumentOptions = {
  /*
   * Array of strings of allowed identity document types. If the provided identity document isn’t one of the allowed types, the verification check will fail with a document_type_not_allowed error code.
   */
  allowed_types?: ("driving_license" | "id_card" | "passport")[];
  /*
   * Collect an ID number and perform an [ID number check](https://stripe.com/docs/identity/verification-checks?type=id-number) with the document’s extracted name and date of birth.
   */
  require_id_number?: boolean;
  /*
   * Disable image uploads, identity document images have to be captured using the device’s camera.
   */
  require_live_capture?: boolean;
  /*
   * Capture a face image and perform a [selfie check](https://stripe.com/docs/identity/verification-checks?type=selfie) comparing a photo ID and a picture of your user’s face. [Learn more](https://stripe.com/docs/identity/selfie).
   */
  require_matching_selfie?: boolean;
};

export type GelatoSessionIdNumberOptions = {};

/**
 * Shows last VerificationSession error
 */
export type GelatoSessionLastError = {
  /*
   * A short machine-readable string giving the reason for the verification or user-session failure.
   */
  code?:
    | "abandoned"
    | "consent_declined"
    | "country_not_supported"
    | "device_not_supported"
    | "document_expired"
    | "document_type_not_supported"
    | "document_unverified_other"
    | "id_number_insufficient_document_data"
    | "id_number_mismatch"
    | "id_number_unverified_other"
    | "selfie_document_missing_photo"
    | "selfie_face_mismatch"
    | "selfie_manipulated"
    | "selfie_unverified_other"
    | "under_supported_age";
  /*
   * A message that explains the reason for verification or user-session failure.
   *
   * @maxLength 5000
   */
  reason?: string | null;
};

export type GelatoVerificationReportOptions = {
  document?: GelatoReportDocumentOptions;
  id_number?: GelatoReportIdNumberOptions;
};

export type GelatoVerificationSessionOptions = {
  document?: GelatoSessionDocumentOptions;
  id_number?: GelatoSessionIdNumberOptions;
};

export type GelatoVerifiedOutputs = {
  /*
   * The user's verified address.
   */
  address?: Address | null;
  /*
   * The user’s verified date of birth.
   */
  dob?: GelatoDataVerifiedOutputsDate | null;
  /*
   * The user's verified first name.
   *
   * @maxLength 5000
   */
  first_name?: string | null;
  /*
   * The user's verified id number.
   *
   * @maxLength 5000
   */
  id_number?: string | null;
  /*
   * The user's verified id number type.
   */
  id_number_type?: "br_cpf" | "sg_nric" | "us_ssn";
  /*
   * The user's verified last name.
   *
   * @maxLength 5000
   */
  last_name?: string | null;
};

/**
 * A VerificationReport is the result of an attempt to collect and verify data from a user.
 * The collection of verification checks performed is determined from the `type` and `options`
 * parameters used. You can find the result of each verification check performed in the
 * appropriate sub-resource: `document`, `id_number`, `selfie`.
 *
 * Each VerificationReport contains a copy of any data collected by the user as well as
 * reference IDs which can be used to access collected images through the [FileUpload](https://stripe.com/docs/api/files)
 * API. To configure and create VerificationReports, use the
 * [VerificationSession](https://stripe.com/docs/api/identity/verification_sessions) API.
 *
 * Related guides: [Accessing verification results](https://stripe.com/docs/identity/verification-sessions#results).
 *
 * @x-resourceId identity.verification_report
 */
export type IdentityVerificationReport = {
  /*
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   *
   * @format unix-time
   */
  created: number;
  document?: GelatoDocumentReport;
  /*
   * Unique identifier for the object.
   *
   * @maxLength 5000
   */
  id: string;
  id_number?: GelatoIdNumberReport;
  /*
   * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
   */
  livemode: boolean;
  /*
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: "identity.verification_report";
  options: GelatoVerificationReportOptions;
  selfie?: GelatoSelfieReport;
  /*
   * Type of report.
   *
   * @x-stripeBypassValidation true
   */
  type: "document" | "id_number";
  /*
   * ID of the VerificationSession that created this report.
   *
   * @maxLength 5000
   */
  verification_session?: string | null;
};

/**
 * A VerificationSession guides you through the process of collecting and verifying the identities
 * of your users. It contains details about the type of verification, such as what [verification
 * check](/docs/identity/verification-checks) to perform. Only create one VerificationSession for
 * each verification in your system.
 *
 * A VerificationSession transitions through [multiple
 * statuses](/docs/identity/how-sessions-work) throughout its lifetime as it progresses through
 * the verification flow. The VerificationSession contains the user’s verified data after
 * verification checks are complete.
 *
 * Related guide: [The Verification Sessions API](https://stripe.com/docs/identity/verification-sessions)
 *
 * @x-resourceId identity.verification_session
 */
export type IdentityVerificationSession = {
  /*
   * The short-lived client secret used by Stripe.js to [show a verification modal](https://stripe.com/docs/js/identity/modal) inside your app. This client secret expires after 24 hours and can only be used once. Don’t store it, log it, embed it in a URL, or expose it to anyone other than the user. Make sure that you have TLS enabled on any page that includes the client secret. Refer to our docs on [passing the client secret to the frontend](https://stripe.com/docs/identity/verification-sessions#client-secret) to learn more.
   *
   * @maxLength 5000
   */
  client_secret?: string | null;
  /*
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   *
   * @format unix-time
   */
  created: number;
  /*
   * Unique identifier for the object.
   *
   * @maxLength 5000
   */
  id: string;
  /*
   * If present, this property tells you the last error encountered when processing the verification.
   */
  last_error?: GelatoSessionLastError | null;
  /*
   * ID of the most recent VerificationReport. [Learn more about accessing detailed verification results.](https://stripe.com/docs/identity/verification-sessions#results)
   */
  last_verification_report?: string | IdentityVerificationReport | null;
  /*
   * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
   */
  livemode: boolean;
  /*
   * Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
   */
  metadata: {
    [key: string]: string;
  };
  /*
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: "identity.verification_session";
  options: GelatoVerificationSessionOptions;
  /*
   * Redaction status of this VerificationSession. If the VerificationSession is not redacted, this field will be null.
   */
  redaction?: VerificationSessionRedaction | null;
  /*
   * Status of this VerificationSession. [Learn more about the lifecycle of sessions](https://stripe.com/docs/identity/how-sessions-work).
   */
  status: "canceled" | "processing" | "requires_input" | "verified";
  /*
   * The type of [verification check](https://stripe.com/docs/identity/verification-checks) to be performed.
   *
   * @x-stripeBypassValidation true
   */
  type: "document" | "id_number";
  /*
   * The short-lived URL that you use to redirect a user to Stripe to submit their identity information. This URL expires after 48 hours and can only be used once. Don’t store it, log it, send it in emails or expose it to anyone other than the user. Refer to our docs on [verifying identity documents](https://stripe.com/docs/identity/verify-identity-documents?platform=web&type=redirect) to learn how to redirect users to Stripe.
   *
   * @maxLength 5000
   */
  url?: string | null;
  /*
   * The user’s verified data.
   */
  verified_outputs?: GelatoVerifiedOutputs | null;
};

/**
 * Invoices are statements of amounts owed by a customer, and are either
 * generated one-off, or generated periodically from a subscription.
 *
 * They contain [invoice items](https://stripe.com/docs/api#invoiceitems), and proration adjustments
 * that may be caused by subscription upgrades/downgrades (if necessary).
 *
 * If your invoice is configured to be billed through automatic charges,
 * Stripe automatically finalizes your invoice and attempts payment. Note
 * that finalizing the invoice,
 * [when automatic](https://stripe.com/docs/billing/invoices/workflow/#auto_advance), does
 * not happen immediately as the invoice is created. Stripe waits
 * until one hour after the last webhook was successfully sent (or the last
 * webhook timed out after failing). If you (and the platforms you may have
 * connected to) have no webhooks configured, Stripe waits one hour after
 * creation to finalize the invoice.
 *
 * If your invoice is configured to be billed by sending an email, then based on your
 * [email settings](https://dashboard.stripe.com/account/billing/automatic),
 * Stripe will email the invoice to your customer and await payment. These
 * emails can contain a link to a hosted page to pay the invoice.
 *
 * Stripe applies any customer credit on the account before determining the
 * amount due for the invoice (i.e., the amount that will be actually
 * charged). If the amount due for the invoice is less than Stripe's [minimum allowed charge
 * per currency](/docs/currencies#minimum-and-maximum-charge-amounts), the
 * invoice is automatically marked paid, and we add the amount due to the
 * customer's credit balance which is applied to the next invoice.
 *
 * More details on the customer's credit balance are
 * [here](https://stripe.com/docs/billing/customer/balance).
 *
 * Related guide: [Send Invoices to Customers](https://stripe.com/docs/billing/invoices/sending).
 *
 * @x-resourceId invoice
 */
export type Invoice = {
  /*
   * The country of the business associated with this invoice, most often the business creating the invoice.
   *
   * @maxLength 5000
   */
  account_country?: string | null;
  /*
   * The public name of the business associated with this invoice, most often the business creating the invoice.
   *
   * @maxLength 5000
   */
  account_name?: string | null;
  /*
   * The account tax IDs associated with the invoice. Only editable when the invoice is a draft.
   */
  account_tax_ids?: (string | TaxId | DeletedTaxId)[] | null;
  /*
   * Final amount due at this time for this invoice. If the invoice's total is smaller than the minimum charge amount, for example, or if there is account credit that can be applied to the invoice, the `amount_due` may be 0. If there is a positive `starting_balance` for the invoice (the customer owes money), the `amount_due` will also take that into account. The charge that gets generated for the invoice will be for the amount specified in `amount_due`.
   */
  amount_due: number;
  /*
   * The amount, in %s, that was paid.
   */
  amount_paid: number;
  /*
   * The amount remaining, in %s, that is due.
   */
  amount_remaining: number;
  /*
   * The fee in %s that will be applied to the invoice and transferred to the application owner's Stripe account when the invoice is paid.
   */
  application_fee_amount?: number | null;
  /*
   * Number of payment attempts made for this invoice, from the perspective of the payment retry schedule. Any payment attempt counts as the first attempt, and subsequently only automatic retries increment the attempt count. In other words, manual payment attempts after the first attempt do not affect the retry schedule.
   */
  attempt_count: number;
  /*
   * Whether an attempt has been made to pay the invoice. An invoice is not attempted until 1 hour after the `invoice.created` webhook, for example, so you might not want to display that invoice as unpaid to your users.
   */
  attempted: boolean;
  /*
   * Controls whether Stripe will perform [automatic collection](https://stripe.com/docs/billing/invoices/workflow/#auto_advance) of the invoice. When `false`, the invoice's state will not automatically advance without an explicit action.
   */
  auto_advance?: boolean;
  automatic_tax: AutomaticTax;
  /*
   * Indicates the reason why the invoice was created. `subscription_cycle` indicates an invoice created by a subscription advancing into a new period. `subscription_create` indicates an invoice created due to creating a subscription. `subscription_update` indicates an invoice created due to updating a subscription. `subscription` is set for all old invoices to indicate either a change to a subscription or a period advancement. `manual` is set for all invoices unrelated to a subscription (for example: created via the invoice editor). The `upcoming` value is reserved for simulated invoices per the upcoming invoice endpoint. `subscription_threshold` indicates an invoice created due to a billing threshold being reached.
   */
  billing_reason?:
    | "automatic_pending_invoice_item_invoice"
    | "manual"
    | "quote_accept"
    | "subscription"
    | "subscription_create"
    | "subscription_cycle"
    | "subscription_threshold"
    | "subscription_update"
    | "upcoming";
  /*
   * ID of the latest charge generated for this invoice, if any.
   */
  charge?: string | Charge | null;
  /*
   * Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay this invoice using the default source attached to the customer. When sending an invoice, Stripe will email this invoice to the customer with payment instructions.
   */
  collection_method: "charge_automatically" | "send_invoice";
  /*
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   *
   * @format unix-time
   */
  created: number;
  /*
   * Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
   */
  currency: string;
  /*
   * Custom fields displayed on the invoice.
   */
  custom_fields?: InvoiceSettingCustomField[] | null;
  /*
   * The ID of the customer who will be billed.
   */
  customer?: string | Customer | DeletedCustomer | null;
  /*
   * The customer's address. Until the invoice is finalized, this field will equal `customer.address`. Once the invoice is finalized, this field will no longer be updated.
   */
  customer_address?: Address | null;
  /*
   * The customer's email. Until the invoice is finalized, this field will equal `customer.email`. Once the invoice is finalized, this field will no longer be updated.
   *
   * @maxLength 5000
   */
  customer_email?: string | null;
  /*
   * The customer's name. Until the invoice is finalized, this field will equal `customer.name`. Once the invoice is finalized, this field will no longer be updated.
   *
   * @maxLength 5000
   */
  customer_name?: string | null;
  /*
   * The customer's phone number. Until the invoice is finalized, this field will equal `customer.phone`. Once the invoice is finalized, this field will no longer be updated.
   *
   * @maxLength 5000
   */
  customer_phone?: string | null;
  /*
   * The customer's shipping information. Until the invoice is finalized, this field will equal `customer.shipping`. Once the invoice is finalized, this field will no longer be updated.
   */
  customer_shipping?: Shipping | null;
  /*
   * The customer's tax exempt status. Until the invoice is finalized, this field will equal `customer.tax_exempt`. Once the invoice is finalized, this field will no longer be updated.
   */
  customer_tax_exempt?: "exempt" | "none" | "reverse";
  /*
   * The customer's tax IDs. Until the invoice is finalized, this field will contain the same tax IDs as `customer.tax_ids`. Once the invoice is finalized, this field will no longer be updated.
   */
  customer_tax_ids?: InvoicesResourceInvoiceTaxId[] | null;
  /*
   * ID of the default payment method for the invoice. It must belong to the customer associated with the invoice. If not set, defaults to the subscription's default payment method, if any, or to the default payment method in the customer's invoice settings.
   */
  default_payment_method?: string | PaymentMethod | null;
  /*
   * ID of the default payment source for the invoice. It must belong to the customer associated with the invoice and be in a chargeable state. If not set, defaults to the subscription's default source, if any, or to the customer's default source.
   */
  default_source?:
    | string
    | AlipayAccount
    | BankAccount
    | BitcoinReceiver
    | Card
    | Source
    | null;
  /*
   * The tax rates applied to this invoice, if any.
   */
  default_tax_rates: TaxRate[];
  /*
   * An arbitrary string attached to the object. Often useful for displaying to users. Referenced as 'memo' in the Dashboard.
   *
   * @maxLength 5000
   */
  description?: string | null;
  /*
   * Describes the current discount applied to this invoice, if there is one. Not populated if there are multiple discounts.
   */
  discount?: Discount | null;
  /*
   * The discounts applied to the invoice. Line item discounts are applied before invoice discounts. Use `expand[]=discounts` to expand each discount.
   */
  discounts?: (string | Discount | DeletedDiscount)[] | null;
  /*
   * The date on which payment for this invoice is due. This value will be `null` for invoices where `collection_method=charge_automatically`.
   *
   * @format unix-time
   */
  due_date?: number | null;
  /*
   * Ending customer balance after the invoice is finalized. Invoices are finalized approximately an hour after successful webhook delivery or when payment collection is attempted for the invoice. If the invoice has not been finalized yet, this will be null.
   */
  ending_balance?: number | null;
  /*
   * Footer displayed on the invoice.
   *
   * @maxLength 5000
   */
  footer?: string | null;
  /*
   * The URL for the hosted invoice page, which allows customers to view and pay an invoice. If the invoice has not been finalized yet, this will be null.
   *
   * @maxLength 5000
   */
  hosted_invoice_url?: string | null;
  /*
   * Unique identifier for the object.
   *
   * @maxLength 5000
   */
  id?: string;
  /*
   * The link to download the PDF for the invoice. If the invoice has not been finalized yet, this will be null.
   *
   * @maxLength 5000
   */
  invoice_pdf?: string | null;
  /*
   * The error encountered during the previous attempt to finalize the invoice. This field is cleared when the invoice is successfully finalized.
   */
  last_finalization_error?: ApiErrors | null;
  /*
   * The individual line items that make up the invoice. `lines` is sorted as follows: invoice items in reverse chronological order, followed by the subscription, if any.
   */
  lines: {
    /*
     * Details about each object.
     */
    data: LineItem[];
    /*
     * True if this list has another page of items after this one that can be fetched.
     */
    has_more: boolean;
    /*
     * String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
     */
    object: "list";
    /*
     * The URL where this list can be accessed.
     *
     * @maxLength 5000
     */
    url: string;
  };
  /*
   * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
   */
  livemode: boolean;
  /*
   * Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
   */
  metadata?: {
    [key: string]: string;
  } | null;
  /*
   * The time at which payment will next be attempted. This value will be `null` for invoices where `collection_method=send_invoice`.
   *
   * @format unix-time
   */
  next_payment_attempt?: number | null;
  /*
   * A unique, identifying string that appears on emails sent to the customer for this invoice. This starts with the customer's unique invoice_prefix if it is specified.
   *
   * @maxLength 5000
   */
  number?: string | null;
  /*
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: "invoice";
  /*
   * The account (if any) for which the funds of the invoice payment are intended. If set, the invoice will be presented with the branding and support information of the specified account. See the [Invoices with Connect](https://stripe.com/docs/billing/invoices/connect) documentation for details.
   */
  on_behalf_of?: string | Account | null;
  /*
   * Whether payment was successfully collected for this invoice. An invoice can be paid (most commonly) with a charge or with credit from the customer's account balance.
   */
  paid: boolean;
  /*
   * The PaymentIntent associated with this invoice. The PaymentIntent is generated when the invoice is finalized, and can then be used to pay the invoice. Note that voiding an invoice will cancel the PaymentIntent.
   */
  payment_intent?: string | PaymentIntent | null;
  payment_settings: InvoicesPaymentSettings;
  /*
   * End of the usage period during which invoice items were added to this invoice.
   *
   * @format unix-time
   */
  period_end: number;
  /*
   * Start of the usage period during which invoice items were added to this invoice.
   *
   * @format unix-time
   */
  period_start: number;
  /*
   * Total amount of all post-payment credit notes issued for this invoice.
   */
  post_payment_credit_notes_amount: number;
  /*
   * Total amount of all pre-payment credit notes issued for this invoice.
   */
  pre_payment_credit_notes_amount: number;
  /*
   * The quote this invoice was generated from.
   */
  quote?: string | Quote | null;
  /*
   * This is the transaction number that appears on email receipts sent for this invoice.
   *
   * @maxLength 5000
   */
  receipt_number?: string | null;
  /*
   * Starting customer balance before the invoice is finalized. If the invoice has not been finalized yet, this will be the current customer balance.
   */
  starting_balance: number;
  /*
   * Extra information about an invoice for the customer's credit card statement.
   *
   * @maxLength 5000
   */
  statement_descriptor?: string | null;
  /*
   * The status of the invoice, one of `draft`, `open`, `paid`, `uncollectible`, or `void`. [Learn more](https://stripe.com/docs/billing/invoices/workflow#workflow-overview)
   */
  status?: "deleted" | "draft" | "open" | "paid" | "uncollectible" | "void";
  status_transitions: InvoicesStatusTransitions;
  /*
   * The subscription that this invoice was prepared for, if any.
   */
  subscription?: string | Subscription | null;
  /*
   * Only set for upcoming invoices that preview prorations. The time used to calculate prorations.
   */
  subscription_proration_date?: number;
  /*
   * Total of all subscriptions, invoice items, and prorations on the invoice before any invoice level discount or tax is applied. Item discounts are already incorporated
   */
  subtotal: number;
  /*
   * The amount of tax on this invoice. This is the sum of all the tax amounts on this invoice.
   */
  tax?: number | null;
  threshold_reason?: InvoiceThresholdReason;
  /*
   * Total after discounts and taxes.
   */
  total: number;
  /*
   * The aggregate amounts calculated per discount across all line items.
   */
  total_discount_amounts?: DiscountsResourceDiscountAmount[] | null;
  /*
   * The aggregate amounts calculated per tax rate for all line items.
   */
  total_tax_amounts: InvoiceTaxAmount[];
  /*
   * The account (if any) the payment will be attributed to for tax reporting, and where funds from the payment will be transferred to for the invoice.
   */
  transfer_data?: InvoiceTransferData | null;
  /*
   * Invoices are automatically paid or sent 1 hour after webhooks are delivered, or until all webhook delivery attempts have [been exhausted](https://stripe.com/docs/billing/webhooks#understand). This field tracks the time when webhooks for this invoice were successfully delivered. If the invoice had no webhooks to deliver, this will be set while the invoice is being created.
   *
   * @format unix-time
   */
  webhooks_delivered_at?: number | null;
};

export type InvoiceItemThresholdReason = {
  /*
   * The IDs of the line items that triggered the threshold invoice.
   */
  line_item_ids: string[];
  /*
   * The quantity threshold boundary that applied to the given line item.
   */
  usage_gte: number;
};

export type InvoiceLineItemPeriod = {
  /*
   * End of the line item's billing period
   *
   * @format unix-time
   */
  end: number;
  /*
   * Start of the line item's billing period
   *
   * @format unix-time
   */
  start: number;
};

export type InvoicePaymentMethodOptionsBancontact = {
  /*
   * Preferred language of the Bancontact authorization page that the customer is redirected to.
   */
  preferred_language: "de" | "en" | "fr" | "nl";
};

export type InvoicePaymentMethodOptionsCard = {
  /*
   * We strongly recommend that you rely on our SCA Engine to automatically prompt your customers for authentication based on risk level and [other requirements](https://stripe.com/docs/strong-customer-authentication). However, if you wish to request 3D Secure based on logic from your own fraud engine, provide this option. Read our guide on [manually requesting 3D Secure](https://stripe.com/docs/payments/3d-secure#manual-three-ds) for more information on how this configuration interacts with Radar and our SCA Engine.
   */
  request_three_d_secure?: "any" | "automatic";
};

export type InvoiceSettingCustomField = {
  /*
   * The name of the custom field.
   *
   * @maxLength 5000
   */
  name: string;
  /*
   * The value of the custom field.
   *
   * @maxLength 5000
   */
  value: string;
};

export type InvoiceSettingCustomerSetting = {
  /*
   * Default custom fields to be displayed on invoices for this customer.
   */
  custom_fields?: InvoiceSettingCustomField[] | null;
  /*
   * ID of a payment method that's attached to the customer, to be used as the customer's default payment method for subscriptions and invoices.
   */
  default_payment_method?: string | PaymentMethod | null;
  /*
   * Default footer to be displayed on invoices for this customer.
   *
   * @maxLength 5000
   */
  footer?: string | null;
};

export type InvoiceSettingQuoteSetting = {
  /*
   * Number of days within which a customer must pay invoices generated by this quote. This value will be `null` for quotes where `collection_method=charge_automatically`.
   */
  days_until_due?: number | null;
};

export type InvoiceSettingSubscriptionScheduleSetting = {
  /*
   * Number of days within which a customer must pay invoices generated by this subscription schedule. This value will be `null` for subscription schedules where `billing=charge_automatically`.
   */
  days_until_due?: number | null;
};

export type InvoiceTaxAmount = {
  /*
   * The amount, in %s, of the tax.
   */
  amount: number;
  /*
   * Whether this tax amount is inclusive or exclusive.
   */
  inclusive: boolean;
  /*
   * The tax rate that was applied to get this tax amount.
   */
  tax_rate: string | TaxRate;
};

export type InvoiceThresholdReason = {
  /*
   * The total invoice amount threshold boundary if it triggered the threshold invoice.
   */
  amount_gte?: number | null;
  /*
   * Indicates which line items triggered a threshold invoice.
   */
  item_reasons: InvoiceItemThresholdReason[];
};

export type InvoiceTransferData = {
  /*
   * The amount in %s that will be transferred to the destination account when the invoice is paid. By default, the entire amount is transferred to the destination.
   */
  amount?: number | null;
  /*
   * The account where funds from the payment will be transferred to upon payment success.
   */
  destination: string | Account;
};

/**
 * Sometimes you want to add a charge or credit to a customer, but actually
 * charge or credit the customer's card only at the end of a regular billing
 * cycle. This is useful for combining several charges (to minimize
 * per-transaction fees), or for having Stripe tabulate your usage-based billing
 * totals.
 *
 * Related guide: [Subscription Invoices](https://stripe.com/docs/billing/invoices/subscription#adding-upcoming-invoice-items).
 *
 * @x-resourceId invoiceitem
 */
export type Invoiceitem = {
  /*
   * Amount (in the `currency` specified) of the invoice item. This should always be equal to `unit_amount * quantity`.
   */
  amount: number;
  /*
   * Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
   */
  currency: string;
  /*
   * The ID of the customer who will be billed when this invoice item is billed.
   */
  customer: string | Customer | DeletedCustomer;
  /*
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   *
   * @format unix-time
   */
  date: number;
  /*
   * An arbitrary string attached to the object. Often useful for displaying to users.
   *
   * @maxLength 5000
   */
  description?: string | null;
  /*
   * If true, discounts will apply to this invoice item. Always false for prorations.
   */
  discountable: boolean;
  /*
   * The discounts which apply to the invoice item. Item discounts are applied before invoice discounts. Use `expand[]=discounts` to expand each discount.
   */
  discounts?: (string | Discount)[] | null;
  /*
   * Unique identifier for the object.
   *
   * @maxLength 5000
   */
  id: string;
  /*
   * The ID of the invoice this invoice item belongs to.
   */
  invoice?: string | Invoice | null;
  /*
   * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
   */
  livemode: boolean;
  /*
   * Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
   */
  metadata?: {
    [key: string]: string;
  } | null;
  /*
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: "invoiceitem";
  period: InvoiceLineItemPeriod;
  /*
   * The price of the invoice item.
   */
  price?: Price | null;
  /*
   * Whether the invoice item was created automatically as a proration adjustment when the customer switched plans.
   */
  proration: boolean;
  /*
   * Quantity of units for the invoice item. If the invoice item is a proration, the quantity of the subscription that the proration was computed for.
   */
  quantity: number;
  /*
   * The subscription that this invoice item has been created for, if any.
   */
  subscription?: string | Subscription | null;
  /*
   * The subscription item that this invoice item has been created for, if any.
   *
   * @maxLength 5000
   */
  subscription_item?: string;
  /*
   * The tax rates which apply to the invoice item. When set, the `default_tax_rates` on the invoice do not apply to this invoice item.
   */
  tax_rates?: TaxRate[] | null;
  /*
   * Unit amount (in the `currency` specified) of the invoice item.
   */
  unit_amount?: number | null;
  /*
   * Same as `unit_amount`, but contains a decimal value with at most 12 decimal places.
   *
   * @format decimal
   */
  unit_amount_decimal?: string | null;
};

export type InvoicesPaymentMethodOptions = {
  /*
   * If paying by `bancontact`, this sub-hash contains details about the Bancontact payment method options to pass to the invoice’s PaymentIntent.
   */
  bancontact?: InvoicePaymentMethodOptionsBancontact | null;
  /*
   * If paying by `card`, this sub-hash contains details about the Card payment method options to pass to the invoice’s PaymentIntent.
   */
  card?: InvoicePaymentMethodOptionsCard | null;
};

export type InvoicesPaymentSettings = {
  /*
   * Payment-method-specific configuration to provide to the invoice’s PaymentIntent.
   */
  payment_method_options?: InvoicesPaymentMethodOptions | null;
  /*
   * The list of payment method types (e.g. card) to provide to the invoice’s PaymentIntent. If not set, Stripe attempts to automatically determine the types to use by looking at the invoice’s default payment method, the subscription’s default payment method, the customer’s default payment method, and your [invoice template settings](https://dashboard.stripe.com/settings/billing/invoice).
   */
  payment_method_types?:
    | (
        | "ach_credit_transfer"
        | "ach_debit"
        | "au_becs_debit"
        | "bacs_debit"
        | "bancontact"
        | "boleto"
        | "card"
        | "fpx"
        | "giropay"
        | "ideal"
        | "sepa_debit"
        | "sofort"
        | "wechat_pay"
      )[]
    | null;
};

export type InvoicesResourceInvoiceTaxId = {
  /*
   * The type of the tax ID, one of `eu_vat`, `br_cnpj`, `br_cpf`, `gb_vat`, `nz_gst`, `au_abn`, `au_arn`, `in_gst`, `no_vat`, `za_vat`, `ch_vat`, `mx_rfc`, `sg_uen`, `ru_inn`, `ru_kpp`, `ca_bn`, `hk_br`, `es_cif`, `tw_vat`, `th_vat`, `jp_cn`, `jp_rn`, `li_uid`, `my_itn`, `us_ein`, `kr_brn`, `ca_qst`, `ca_gst_hst`, `ca_pst_bc`, `ca_pst_mb`, `ca_pst_sk`, `my_sst`, `sg_gst`, `ae_trn`, `cl_tin`, `sa_vat`, `id_npwp`, `my_frp`, `il_vat`, or `unknown`
   */
  type:
    | "ae_trn"
    | "au_abn"
    | "au_arn"
    | "br_cnpj"
    | "br_cpf"
    | "ca_bn"
    | "ca_gst_hst"
    | "ca_pst_bc"
    | "ca_pst_mb"
    | "ca_pst_sk"
    | "ca_qst"
    | "ch_vat"
    | "cl_tin"
    | "es_cif"
    | "eu_vat"
    | "gb_vat"
    | "hk_br"
    | "id_npwp"
    | "il_vat"
    | "in_gst"
    | "jp_cn"
    | "jp_rn"
    | "kr_brn"
    | "li_uid"
    | "mx_rfc"
    | "my_frp"
    | "my_itn"
    | "my_sst"
    | "no_vat"
    | "nz_gst"
    | "ru_inn"
    | "ru_kpp"
    | "sa_vat"
    | "sg_gst"
    | "sg_uen"
    | "th_vat"
    | "tw_vat"
    | "unknown"
    | "us_ein"
    | "za_vat";
  /*
   * The value of the tax ID.
   *
   * @maxLength 5000
   */
  value?: string | null;
};

export type InvoicesStatusTransitions = {
  /*
   * The time that the invoice draft was finalized.
   *
   * @format unix-time
   */
  finalized_at?: number | null;
  /*
   * The time that the invoice was marked uncollectible.
   *
   * @format unix-time
   */
  marked_uncollectible_at?: number | null;
  /*
   * The time that the invoice was paid.
   *
   * @format unix-time
   */
  paid_at?: number | null;
  /*
   * The time that the invoice was voided.
   *
   * @format unix-time
   */
  voided_at?: number | null;
};

/**
 * This resource has been renamed to [Early Fraud
 * Warning](#early_fraud_warning_object) and will be removed in a future API
 * version.
 *
 * @x-resourceId issuer_fraud_record
 */
export type IssuerFraudRecord = {
  /*
   * An IFR is actionable if it has not received a dispute and has not been fully refunded. You may wish to proactively refund a charge that receives an IFR, in order to avoid receiving a dispute later.
   */
  actionable: boolean;
  /*
   * ID of the charge this issuer fraud record is for, optionally expanded.
   */
  charge: string | Charge;
  /*
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   *
   * @format unix-time
   */
  created: number;
  /*
   * The type of fraud labelled by the issuer. One of `card_never_received`, `fraudulent_card_application`, `made_with_counterfeit_card`, `made_with_lost_card`, `made_with_stolen_card`, `misc`, `unauthorized_use_of_card`.
   *
   * @maxLength 5000
   */
  fraud_type: string;
  /*
   * If true, the associated charge is subject to [liability shift](https://stripe.com/docs/payments/3d-secure#disputed-payments).
   */
  has_liability_shift: boolean;
  /*
   * Unique identifier for the object.
   *
   * @maxLength 5000
   */
  id: string;
  /*
   * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
   */
  livemode: boolean;
  /*
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: "issuer_fraud_record";
  /*
   * The timestamp at which the card issuer posted the issuer fraud record.
   */
  post_date: number;
};

/**
 * When an [issued card](https://stripe.com/docs/issuing) is used to make a purchase, an Issuing `Authorization`
 * object is created. [Authorizations](https://stripe.com/docs/issuing/purchases/authorizations) must be approved for the
 * purchase to be completed successfully.
 *
 * Related guide: [Issued Card Authorizations](https://stripe.com/docs/issuing/purchases/authorizations).
 *
 * @x-resourceId issuing.authorization
 */
export type IssuingAuthorization = {
  /*
   * The total amount that was authorized or rejected. This amount is in the card's currency and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
   */
  amount: number;
  /*
   * Detailed breakdown of amount components. These amounts are denominated in `currency` and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
   */
  amount_details?: IssuingAuthorizationAmountDetails | null;
  /*
   * Whether the authorization has been approved.
   */
  approved: boolean;
  /*
   * How the card details were provided.
   */
  authorization_method:
    | "chip"
    | "contactless"
    | "keyed_in"
    | "online"
    | "swipe";
  /*
   * List of balance transactions associated with this authorization.
   */
  balance_transactions: BalanceTransaction[];
  card: IssuingCard;
  /*
   * The cardholder to whom this authorization belongs.
   */
  cardholder?: string | IssuingCardholder | null;
  /*
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   *
   * @format unix-time
   */
  created: number;
  /*
   * Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
   */
  currency: string;
  /*
   * Unique identifier for the object.
   *
   * @maxLength 5000
   */
  id: string;
  /*
   * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
   */
  livemode: boolean;
  /*
   * The total amount that was authorized or rejected. This amount is in the `merchant_currency` and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
   */
  merchant_amount: number;
  /*
   * The currency that was presented to the cardholder for the authorization. Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
   */
  merchant_currency: string;
  merchant_data: IssuingAuthorizationMerchantData;
  /*
   * Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
   */
  metadata: {
    [key: string]: string;
  };
  /*
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: "issuing.authorization";
  /*
   * The pending authorization request. This field will only be non-null during an `issuing_authorization.request` webhook.
   */
  pending_request?: IssuingAuthorizationPendingRequest | null;
  /*
   * History of every time `pending_request` was approved/denied, either by you directly or by Stripe (e.g. based on your `spending_controls`). If the merchant changes the authorization by performing an [incremental authorization](https://stripe.com/docs/issuing/purchases/authorizations), you can look at this field to see the previous requests for the authorization.
   */
  request_history: IssuingAuthorizationRequest[];
  /*
   * The current status of the authorization in its lifecycle.
   */
  status: "closed" | "pending" | "reversed";
  /*
   * List of [transactions](https://stripe.com/docs/api/issuing/transactions) associated with this authorization.
   */
  transactions: IssuingTransaction[];
  verification_data: IssuingAuthorizationVerificationData;
  /*
   * The digital wallet used for this authorization. One of `apple_pay`, `google_pay`, or `samsung_pay`.
   *
   * @maxLength 5000
   */
  wallet?: string | null;
};

/**
 * You can [create physical or virtual cards](https://stripe.com/docs/issuing/cards) that are issued to cardholders.
 *
 * @x-resourceId issuing.card
 */
export type IssuingCard = {
  /*
   * The brand of the card.
   *
   * @maxLength 5000
   */
  brand: string;
  /*
   * The reason why the card was canceled.
   */
  cancellation_reason?: "lost" | "stolen";
  cardholder: IssuingCardholder;
  /*
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   *
   * @format unix-time
   */
  created: number;
  /*
   * Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
   */
  currency: string;
  /*
   * The card's CVC. For security reasons, this is only available for virtual cards, and will be omitted unless you explicitly request it with [the `expand` parameter](https://stripe.com/docs/api/expanding_objects). Additionally, it's only available via the ["Retrieve a card" endpoint](https://stripe.com/docs/api/issuing/cards/retrieve), not via "List all cards" or any other endpoint.
   *
   * @maxLength 5000
   */
  cvc?: string;
  /*
   * The expiration month of the card.
   */
  exp_month: number;
  /*
   * The expiration year of the card.
   */
  exp_year: number;
  /*
   * Unique identifier for the object.
   *
   * @maxLength 5000
   */
  id: string;
  /*
   * The last 4 digits of the card number.
   *
   * @maxLength 5000
   */
  last4: string;
  /*
   * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
   */
  livemode: boolean;
  /*
   * Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
   */
  metadata: {
    [key: string]: string;
  };
  /*
   * The full unredacted card number. For security reasons, this is only available for virtual cards, and will be omitted unless you explicitly request it with [the `expand` parameter](https://stripe.com/docs/api/expanding_objects). Additionally, it's only available via the ["Retrieve a card" endpoint](https://stripe.com/docs/api/issuing/cards/retrieve), not via "List all cards" or any other endpoint.
   *
   * @maxLength 5000
   */
  number?: string;
  /*
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: "issuing.card";
  /*
   * The latest card that replaces this card, if any.
   */
  replaced_by?: string | IssuingCard | null;
  /*
   * The card this card replaces, if any.
   */
  replacement_for?: string | IssuingCard | null;
  /*
   * The reason why the previous card needed to be replaced.
   *
   * @x-stripeBypassValidation true
   */
  replacement_reason?: "damaged" | "expired" | "lost" | "stolen";
  /*
   * Where and how the card will be shipped.
   */
  shipping?: IssuingCardShipping | null;
  spending_controls: IssuingCardAuthorizationControls;
  /*
   * Whether authorizations can be approved on this card.
   *
   * @x-stripeBypassValidation true
   */
  status: "active" | "canceled" | "inactive";
  /*
   * The type of the card.
   */
  type: "physical" | "virtual";
};

/**
 * An Issuing `Cardholder` object represents an individual or business entity who is [issued](https://stripe.com/docs/issuing) cards.
 *
 * Related guide: [How to create a Cardholder](https://stripe.com/docs/issuing/cards#create-cardholder)
 *
 * @x-resourceId issuing.cardholder
 */
export type IssuingCardholder = {
  billing: IssuingCardholderAddress;
  /*
   * Additional information about a `company` cardholder.
   */
  company?: IssuingCardholderCompany | null;
  /*
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   *
   * @format unix-time
   */
  created: number;
  /*
   * The cardholder's email address.
   *
   * @maxLength 5000
   */
  email?: string | null;
  /*
   * Unique identifier for the object.
   *
   * @maxLength 5000
   */
  id: string;
  /*
   * Additional information about an `individual` cardholder.
   */
  individual?: IssuingCardholderIndividual | null;
  /*
   * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
   */
  livemode: boolean;
  /*
   * Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
   */
  metadata: {
    [key: string]: string;
  };
  /*
   * The cardholder's name. This will be printed on cards issued to them.
   *
   * @maxLength 5000
   */
  name: string;
  /*
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: "issuing.cardholder";
  /*
   * The cardholder's phone number. This is required for all cardholders who will be creating EU cards. See the [3D Secure documentation](https://stripe.com/docs/issuing/3d-secure#when-is-3d-secure-applied) for more details.
   *
   * @maxLength 5000
   */
  phone_number?: string | null;
  requirements: IssuingCardholderRequirements;
  /*
   * Rules that control spending across this cardholder's cards. Refer to our [documentation](https://stripe.com/docs/issuing/controls/spending-controls) for more details.
   */
  spending_controls?: IssuingCardholderAuthorizationControls | null;
  /*
   * Specifies whether to permit authorizations on this cardholder's cards.
   */
  status: "active" | "blocked" | "inactive";
  /*
   * One of `individual` or `company`.
   *
   * @x-stripeBypassValidation true
   */
  type: "company" | "individual";
};

/**
 * As a [card issuer](https://stripe.com/docs/issuing), you can dispute transactions that the cardholder does not recognize, suspects to be fraudulent, or has other issues with.
 *
 * Related guide: [Disputing Transactions](https://stripe.com/docs/issuing/purchases/disputes)
 *
 * @x-resourceId issuing.dispute
 */
export type IssuingDispute = {
  /*
   * Disputed amount. Usually the amount of the `transaction`, but can differ (usually because of currency fluctuation).
   */
  amount: number;
  /*
   * List of balance transactions associated with the dispute.
   */
  balance_transactions?: BalanceTransaction[] | null;
  /*
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   *
   * @format unix-time
   */
  created: number;
  /*
   * The currency the `transaction` was made in.
   */
  currency: string;
  evidence: IssuingDisputeEvidence;
  /*
   * Unique identifier for the object.
   *
   * @maxLength 5000
   */
  id: string;
  /*
   * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
   */
  livemode: boolean;
  /*
   * Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
   */
  metadata: {
    [key: string]: string;
  };
  /*
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: "issuing.dispute";
  /*
   * Current status of the dispute.
   */
  status: "expired" | "lost" | "submitted" | "unsubmitted" | "won";
  /*
   * The transaction being disputed.
   */
  transaction: string | IssuingTransaction;
};

/**
 * When a non-stripe BIN is used, any use of an [issued card](https://stripe.com/docs/issuing) must be settled directly with the card network. The net amount owed is represented by an Issuing `Settlement` object.
 *
 * @x-resourceId issuing.settlement
 */
export type IssuingSettlement = {
  /*
   * The Bank Identification Number reflecting this settlement record.
   *
   * @maxLength 5000
   */
  bin: string;
  /*
   * The date that the transactions are cleared and posted to user's accounts.
   */
  clearing_date: number;
  /*
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   *
   * @format unix-time
   */
  created: number;
  /*
   * Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
   */
  currency: string;
  /*
   * Unique identifier for the object.
   *
   * @maxLength 5000
   */
  id: string;
  /*
   * The total interchange received as reimbursement for the transactions.
   */
  interchange_fees: number;
  /*
   * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
   */
  livemode: boolean;
  /*
   * Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
   */
  metadata: {
    [key: string]: string;
  };
  /*
   * The total net amount required to settle with the network.
   */
  net_total: number;
  /*
   * The card network for this settlement report. One of ["visa"]
   */
  network: "visa";
  /*
   * The total amount of fees owed to the network.
   */
  network_fees: number;
  /*
   * The Settlement Identification Number assigned by the network.
   *
   * @maxLength 5000
   */
  network_settlement_identifier: string;
  /*
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: "issuing.settlement";
  /*
   * One of `international` or `uk_national_net`.
   *
   * @maxLength 5000
   */
  settlement_service: string;
  /*
   * The total number of transactions reflected in this settlement.
   */
  transaction_count: number;
  /*
   * The total transaction amount reflected in this settlement.
   */
  transaction_volume: number;
};

/**
 * Any use of an [issued card](https://stripe.com/docs/issuing) that results in funds entering or leaving
 * your Stripe account, such as a completed purchase or refund, is represented by an Issuing
 * `Transaction` object.
 *
 * Related guide: [Issued Card Transactions](https://stripe.com/docs/issuing/purchases/transactions).
 *
 * @x-resourceId issuing.transaction
 */
export type IssuingTransaction = {
  /*
   * The transaction amount, which will be reflected in your balance. This amount is in your currency and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
   */
  amount: number;
  /*
   * Detailed breakdown of amount components. These amounts are denominated in `currency` and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
   */
  amount_details?: IssuingTransactionAmountDetails | null;
  /*
   * The `Authorization` object that led to this transaction.
   */
  authorization?: string | IssuingAuthorization | null;
  /*
   * ID of the [balance transaction](https://stripe.com/docs/api/balance_transactions) associated with this transaction.
   */
  balance_transaction?: string | BalanceTransaction | null;
  /*
   * The card used to make this transaction.
   */
  card: string | IssuingCard;
  /*
   * The cardholder to whom this transaction belongs.
   */
  cardholder?: string | IssuingCardholder | null;
  /*
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   *
   * @format unix-time
   */
  created: number;
  /*
   * Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
   */
  currency: string;
  /*
   * If you've disputed the transaction, the ID of the dispute.
   */
  dispute?: string | IssuingDispute | null;
  /*
   * Unique identifier for the object.
   *
   * @maxLength 5000
   */
  id: string;
  /*
   * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
   */
  livemode: boolean;
  /*
   * The amount that the merchant will receive, denominated in `merchant_currency` and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). It will be different from `amount` if the merchant is taking payment in a different currency.
   */
  merchant_amount: number;
  /*
   * The currency with which the merchant is taking payment.
   */
  merchant_currency: string;
  merchant_data: IssuingAuthorizationMerchantData;
  /*
   * Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
   */
  metadata: {
    [key: string]: string;
  };
  /*
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: "issuing.transaction";
  /*
   * Additional purchase information that is optionally provided by the merchant.
   */
  purchase_details?: IssuingTransactionPurchaseDetails | null;
  /*
   * The nature of the transaction.
   *
   * @x-stripeBypassValidation true
   */
  type: "capture" | "refund";
  /*
   * The digital wallet used for this transaction. One of `apple_pay`, `google_pay`, or `samsung_pay`.
   */
  wallet?: "apple_pay" | "google_pay" | "samsung_pay";
};

export type IssuingAuthorizationAmountDetails = {
  /*
   * The fee charged by the ATM for the cash withdrawal.
   */
  atm_fee?: number | null;
};

export type IssuingAuthorizationMerchantData = {
  /*
   * A categorization of the seller's type of business. See our [merchant categories guide](https://stripe.com/docs/issuing/merchant-categories) for a list of possible values.
   *
   * @maxLength 5000
   */
  category: string;
  /*
   * The merchant category code for the seller’s business
   *
   * @maxLength 5000
   */
  category_code: string;
  /*
   * City where the seller is located
   *
   * @maxLength 5000
   */
  city?: string | null;
  /*
   * Country where the seller is located
   *
   * @maxLength 5000
   */
  country?: string | null;
  /*
   * Name of the seller
   *
   * @maxLength 5000
   */
  name?: string | null;
  /*
   * Identifier assigned to the seller by the card brand
   *
   * @maxLength 5000
   */
  network_id: string;
  /*
   * Postal code where the seller is located
   *
   * @maxLength 5000
   */
  postal_code?: string | null;
  /*
   * State where the seller is located
   *
   * @maxLength 5000
   */
  state?: string | null;
};

export type IssuingAuthorizationPendingRequest = {
  /*
   * The additional amount Stripe will hold if the authorization is approved, in the card's [currency](https://stripe.com/docs/api#issuing_authorization_object-pending-request-currency) and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
   */
  amount: number;
  /*
   * Detailed breakdown of amount components. These amounts are denominated in `currency` and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
   */
  amount_details?: IssuingAuthorizationAmountDetails | null;
  /*
   * Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
   */
  currency: string;
  /*
   * If set `true`, you may provide [amount](https://stripe.com/docs/api/issuing/authorizations/approve#approve_issuing_authorization-amount) to control how much to hold for the authorization.
   */
  is_amount_controllable: boolean;
  /*
   * The amount the merchant is requesting to be authorized in the `merchant_currency`. The amount is in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
   */
  merchant_amount: number;
  /*
   * The local currency the merchant is requesting to authorize.
   */
  merchant_currency: string;
};

export type IssuingAuthorizationRequest = {
  /*
   * The `pending_request.amount` at the time of the request, presented in your card's currency and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). Stripe held this amount from your account to fund the authorization if the request was approved.
   */
  amount: number;
  /*
   * Detailed breakdown of amount components. These amounts are denominated in `currency` and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
   */
  amount_details?: IssuingAuthorizationAmountDetails | null;
  /*
   * Whether this request was approved.
   */
  approved: boolean;
  /*
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   *
   * @format unix-time
   */
  created: number;
  /*
   * Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
   *
   * @maxLength 5000
   */
  currency: string;
  /*
   * The `pending_request.merchant_amount` at the time of the request, presented in the `merchant_currency` and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
   */
  merchant_amount: number;
  /*
   * The currency that was collected by the merchant and presented to the cardholder for the authorization. Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
   *
   * @maxLength 5000
   */
  merchant_currency: string;
  /*
   * The reason for the approval or decline.
   *
   * @x-stripeBypassValidation true
   */
  reason:
    | "account_disabled"
    | "card_active"
    | "card_inactive"
    | "cardholder_inactive"
    | "cardholder_verification_required"
    | "insufficient_funds"
    | "not_allowed"
    | "spending_controls"
    | "suspected_fraud"
    | "verification_failed"
    | "webhook_approved"
    | "webhook_declined"
    | "webhook_timeout";
};

export type IssuingAuthorizationVerificationData = {
  /*
   * Whether the cardholder provided an address first line and if it matched the cardholder’s `billing.address.line1`.
   */
  address_line1_check: "match" | "mismatch" | "not_provided";
  /*
   * Whether the cardholder provided a postal code and if it matched the cardholder’s `billing.address.postal_code`.
   */
  address_postal_code_check: "match" | "mismatch" | "not_provided";
  /*
   * Whether the cardholder provided a CVC and if it matched Stripe’s record.
   */
  cvc_check: "match" | "mismatch" | "not_provided";
  /*
   * Whether the cardholder provided an expiry date and if it matched Stripe’s record.
   */
  expiry_check: "match" | "mismatch" | "not_provided";
};

export type IssuingCardAuthorizationControls = {
  /*
   * Array of strings containing [categories](https://stripe.com/docs/api#issuing_authorization_object-merchant_data-category) of authorizations to allow. All other categories will be blocked. Cannot be set with `blocked_categories`.
   */
  allowed_categories?:
    | (
        | "ac_refrigeration_repair"
        | "accounting_bookkeeping_services"
        | "advertising_services"
        | "agricultural_cooperative"
        | "airlines_air_carriers"
        | "airports_flying_fields"
        | "ambulance_services"
        | "amusement_parks_carnivals"
        | "antique_reproductions"
        | "antique_shops"
        | "aquariums"
        | "architectural_surveying_services"
        | "art_dealers_and_galleries"
        | "artists_supply_and_craft_shops"
        | "auto_and_home_supply_stores"
        | "auto_body_repair_shops"
        | "auto_paint_shops"
        | "auto_service_shops"
        | "automated_cash_disburse"
        | "automated_fuel_dispensers"
        | "automobile_associations"
        | "automotive_parts_and_accessories_stores"
        | "automotive_tire_stores"
        | "bail_and_bond_payments"
        | "bakeries"
        | "bands_orchestras"
        | "barber_and_beauty_shops"
        | "betting_casino_gambling"
        | "bicycle_shops"
        | "billiard_pool_establishments"
        | "boat_dealers"
        | "boat_rentals_and_leases"
        | "book_stores"
        | "books_periodicals_and_newspapers"
        | "bowling_alleys"
        | "bus_lines"
        | "business_secretarial_schools"
        | "buying_shopping_services"
        | "cable_satellite_and_other_pay_television_and_radio"
        | "camera_and_photographic_supply_stores"
        | "candy_nut_and_confectionery_stores"
        | "car_and_truck_dealers_new_used"
        | "car_and_truck_dealers_used_only"
        | "car_rental_agencies"
        | "car_washes"
        | "carpentry_services"
        | "carpet_upholstery_cleaning"
        | "caterers"
        | "charitable_and_social_service_organizations_fundraising"
        | "chemicals_and_allied_products"
        | "child_care_services"
        | "childrens_and_infants_wear_stores"
        | "chiropodists_podiatrists"
        | "chiropractors"
        | "cigar_stores_and_stands"
        | "civic_social_fraternal_associations"
        | "cleaning_and_maintenance"
        | "clothing_rental"
        | "colleges_universities"
        | "commercial_equipment"
        | "commercial_footwear"
        | "commercial_photography_art_and_graphics"
        | "commuter_transport_and_ferries"
        | "computer_network_services"
        | "computer_programming"
        | "computer_repair"
        | "computer_software_stores"
        | "computers_peripherals_and_software"
        | "concrete_work_services"
        | "construction_materials"
        | "consulting_public_relations"
        | "correspondence_schools"
        | "cosmetic_stores"
        | "counseling_services"
        | "country_clubs"
        | "courier_services"
        | "court_costs"
        | "credit_reporting_agencies"
        | "cruise_lines"
        | "dairy_products_stores"
        | "dance_hall_studios_schools"
        | "dating_escort_services"
        | "dentists_orthodontists"
        | "department_stores"
        | "detective_agencies"
        | "digital_goods_applications"
        | "digital_goods_games"
        | "digital_goods_large_volume"
        | "digital_goods_media"
        | "direct_marketing_catalog_merchant"
        | "direct_marketing_combination_catalog_and_retail_merchant"
        | "direct_marketing_inbound_telemarketing"
        | "direct_marketing_insurance_services"
        | "direct_marketing_other"
        | "direct_marketing_outbound_telemarketing"
        | "direct_marketing_subscription"
        | "direct_marketing_travel"
        | "discount_stores"
        | "doctors"
        | "door_to_door_sales"
        | "drapery_window_covering_and_upholstery_stores"
        | "drinking_places"
        | "drug_stores_and_pharmacies"
        | "drugs_drug_proprietaries_and_druggist_sundries"
        | "dry_cleaners"
        | "durable_goods"
        | "duty_free_stores"
        | "eating_places_restaurants"
        | "educational_services"
        | "electric_razor_stores"
        | "electrical_parts_and_equipment"
        | "electrical_services"
        | "electronics_repair_shops"
        | "electronics_stores"
        | "elementary_secondary_schools"
        | "employment_temp_agencies"
        | "equipment_rental"
        | "exterminating_services"
        | "family_clothing_stores"
        | "fast_food_restaurants"
        | "financial_institutions"
        | "fines_government_administrative_entities"
        | "fireplace_fireplace_screens_and_accessories_stores"
        | "floor_covering_stores"
        | "florists"
        | "florists_supplies_nursery_stock_and_flowers"
        | "freezer_and_locker_meat_provisioners"
        | "fuel_dealers_non_automotive"
        | "funeral_services_crematories"
        | "furniture_home_furnishings_and_equipment_stores_except_appliances"
        | "furniture_repair_refinishing"
        | "furriers_and_fur_shops"
        | "general_services"
        | "gift_card_novelty_and_souvenir_shops"
        | "glass_paint_and_wallpaper_stores"
        | "glassware_crystal_stores"
        | "golf_courses_public"
        | "government_services"
        | "grocery_stores_supermarkets"
        | "hardware_equipment_and_supplies"
        | "hardware_stores"
        | "health_and_beauty_spas"
        | "hearing_aids_sales_and_supplies"
        | "heating_plumbing_a_c"
        | "hobby_toy_and_game_shops"
        | "home_supply_warehouse_stores"
        | "hospitals"
        | "hotels_motels_and_resorts"
        | "household_appliance_stores"
        | "industrial_supplies"
        | "information_retrieval_services"
        | "insurance_default"
        | "insurance_underwriting_premiums"
        | "intra_company_purchases"
        | "jewelry_stores_watches_clocks_and_silverware_stores"
        | "landscaping_services"
        | "laundries"
        | "laundry_cleaning_services"
        | "legal_services_attorneys"
        | "luggage_and_leather_goods_stores"
        | "lumber_building_materials_stores"
        | "manual_cash_disburse"
        | "marinas_service_and_supplies"
        | "masonry_stonework_and_plaster"
        | "massage_parlors"
        | "medical_and_dental_labs"
        | "medical_dental_ophthalmic_and_hospital_equipment_and_supplies"
        | "medical_services"
        | "membership_organizations"
        | "mens_and_boys_clothing_and_accessories_stores"
        | "mens_womens_clothing_stores"
        | "metal_service_centers"
        | "miscellaneous"
        | "miscellaneous_apparel_and_accessory_shops"
        | "miscellaneous_auto_dealers"
        | "miscellaneous_business_services"
        | "miscellaneous_food_stores"
        | "miscellaneous_general_merchandise"
        | "miscellaneous_general_services"
        | "miscellaneous_home_furnishing_specialty_stores"
        | "miscellaneous_publishing_and_printing"
        | "miscellaneous_recreation_services"
        | "miscellaneous_repair_shops"
        | "miscellaneous_specialty_retail"
        | "mobile_home_dealers"
        | "motion_picture_theaters"
        | "motor_freight_carriers_and_trucking"
        | "motor_homes_dealers"
        | "motor_vehicle_supplies_and_new_parts"
        | "motorcycle_shops_and_dealers"
        | "motorcycle_shops_dealers"
        | "music_stores_musical_instruments_pianos_and_sheet_music"
        | "news_dealers_and_newsstands"
        | "non_fi_money_orders"
        | "non_fi_stored_value_card_purchase_load"
        | "nondurable_goods"
        | "nurseries_lawn_and_garden_supply_stores"
        | "nursing_personal_care"
        | "office_and_commercial_furniture"
        | "opticians_eyeglasses"
        | "optometrists_ophthalmologist"
        | "orthopedic_goods_prosthetic_devices"
        | "osteopaths"
        | "package_stores_beer_wine_and_liquor"
        | "paints_varnishes_and_supplies"
        | "parking_lots_garages"
        | "passenger_railways"
        | "pawn_shops"
        | "pet_shops_pet_food_and_supplies"
        | "petroleum_and_petroleum_products"
        | "photo_developing"
        | "photographic_photocopy_microfilm_equipment_and_supplies"
        | "photographic_studios"
        | "picture_video_production"
        | "piece_goods_notions_and_other_dry_goods"
        | "plumbing_heating_equipment_and_supplies"
        | "political_organizations"
        | "postal_services_government_only"
        | "precious_stones_and_metals_watches_and_jewelry"
        | "professional_services"
        | "public_warehousing_and_storage"
        | "quick_copy_repro_and_blueprint"
        | "railroads"
        | "real_estate_agents_and_managers_rentals"
        | "record_stores"
        | "recreational_vehicle_rentals"
        | "religious_goods_stores"
        | "religious_organizations"
        | "roofing_siding_sheet_metal"
        | "secretarial_support_services"
        | "security_brokers_dealers"
        | "service_stations"
        | "sewing_needlework_fabric_and_piece_goods_stores"
        | "shoe_repair_hat_cleaning"
        | "shoe_stores"
        | "small_appliance_repair"
        | "snowmobile_dealers"
        | "special_trade_services"
        | "specialty_cleaning"
        | "sporting_goods_stores"
        | "sporting_recreation_camps"
        | "sports_and_riding_apparel_stores"
        | "sports_clubs_fields"
        | "stamp_and_coin_stores"
        | "stationary_office_supplies_printing_and_writing_paper"
        | "stationery_stores_office_and_school_supply_stores"
        | "swimming_pools_sales"
        | "t_ui_travel_germany"
        | "tailors_alterations"
        | "tax_payments_government_agencies"
        | "tax_preparation_services"
        | "taxicabs_limousines"
        | "telecommunication_equipment_and_telephone_sales"
        | "telecommunication_services"
        | "telegraph_services"
        | "tent_and_awning_shops"
        | "testing_laboratories"
        | "theatrical_ticket_agencies"
        | "timeshares"
        | "tire_retreading_and_repair"
        | "tolls_bridge_fees"
        | "tourist_attractions_and_exhibits"
        | "towing_services"
        | "trailer_parks_campgrounds"
        | "transportation_services"
        | "travel_agencies_tour_operators"
        | "truck_stop_iteration"
        | "truck_utility_trailer_rentals"
        | "typesetting_plate_making_and_related_services"
        | "typewriter_stores"
        | "u_s_federal_government_agencies_or_departments"
        | "uniforms_commercial_clothing"
        | "used_merchandise_and_secondhand_stores"
        | "utilities"
        | "variety_stores"
        | "veterinary_services"
        | "video_amusement_game_supplies"
        | "video_game_arcades"
        | "video_tape_rental_stores"
        | "vocational_trade_schools"
        | "watch_jewelry_repair"
        | "welding_repair"
        | "wholesale_clubs"
        | "wig_and_toupee_stores"
        | "wires_money_orders"
        | "womens_accessory_and_specialty_shops"
        | "womens_ready_to_wear_stores"
        | "wrecking_and_salvage_yards"
      )[]
    | null;
  /*
   * Array of strings containing [categories](https://stripe.com/docs/api#issuing_authorization_object-merchant_data-category) of authorizations to decline. All other categories will be allowed. Cannot be set with `allowed_categories`.
   */
  blocked_categories?:
    | (
        | "ac_refrigeration_repair"
        | "accounting_bookkeeping_services"
        | "advertising_services"
        | "agricultural_cooperative"
        | "airlines_air_carriers"
        | "airports_flying_fields"
        | "ambulance_services"
        | "amusement_parks_carnivals"
        | "antique_reproductions"
        | "antique_shops"
        | "aquariums"
        | "architectural_surveying_services"
        | "art_dealers_and_galleries"
        | "artists_supply_and_craft_shops"
        | "auto_and_home_supply_stores"
        | "auto_body_repair_shops"
        | "auto_paint_shops"
        | "auto_service_shops"
        | "automated_cash_disburse"
        | "automated_fuel_dispensers"
        | "automobile_associations"
        | "automotive_parts_and_accessories_stores"
        | "automotive_tire_stores"
        | "bail_and_bond_payments"
        | "bakeries"
        | "bands_orchestras"
        | "barber_and_beauty_shops"
        | "betting_casino_gambling"
        | "bicycle_shops"
        | "billiard_pool_establishments"
        | "boat_dealers"
        | "boat_rentals_and_leases"
        | "book_stores"
        | "books_periodicals_and_newspapers"
        | "bowling_alleys"
        | "bus_lines"
        | "business_secretarial_schools"
        | "buying_shopping_services"
        | "cable_satellite_and_other_pay_television_and_radio"
        | "camera_and_photographic_supply_stores"
        | "candy_nut_and_confectionery_stores"
        | "car_and_truck_dealers_new_used"
        | "car_and_truck_dealers_used_only"
        | "car_rental_agencies"
        | "car_washes"
        | "carpentry_services"
        | "carpet_upholstery_cleaning"
        | "caterers"
        | "charitable_and_social_service_organizations_fundraising"
        | "chemicals_and_allied_products"
        | "child_care_services"
        | "childrens_and_infants_wear_stores"
        | "chiropodists_podiatrists"
        | "chiropractors"
        | "cigar_stores_and_stands"
        | "civic_social_fraternal_associations"
        | "cleaning_and_maintenance"
        | "clothing_rental"
        | "colleges_universities"
        | "commercial_equipment"
        | "commercial_footwear"
        | "commercial_photography_art_and_graphics"
        | "commuter_transport_and_ferries"
        | "computer_network_services"
        | "computer_programming"
        | "computer_repair"
        | "computer_software_stores"
        | "computers_peripherals_and_software"
        | "concrete_work_services"
        | "construction_materials"
        | "consulting_public_relations"
        | "correspondence_schools"
        | "cosmetic_stores"
        | "counseling_services"
        | "country_clubs"
        | "courier_services"
        | "court_costs"
        | "credit_reporting_agencies"
        | "cruise_lines"
        | "dairy_products_stores"
        | "dance_hall_studios_schools"
        | "dating_escort_services"
        | "dentists_orthodontists"
        | "department_stores"
        | "detective_agencies"
        | "digital_goods_applications"
        | "digital_goods_games"
        | "digital_goods_large_volume"
        | "digital_goods_media"
        | "direct_marketing_catalog_merchant"
        | "direct_marketing_combination_catalog_and_retail_merchant"
        | "direct_marketing_inbound_telemarketing"
        | "direct_marketing_insurance_services"
        | "direct_marketing_other"
        | "direct_marketing_outbound_telemarketing"
        | "direct_marketing_subscription"
        | "direct_marketing_travel"
        | "discount_stores"
        | "doctors"
        | "door_to_door_sales"
        | "drapery_window_covering_and_upholstery_stores"
        | "drinking_places"
        | "drug_stores_and_pharmacies"
        | "drugs_drug_proprietaries_and_druggist_sundries"
        | "dry_cleaners"
        | "durable_goods"
        | "duty_free_stores"
        | "eating_places_restaurants"
        | "educational_services"
        | "electric_razor_stores"
        | "electrical_parts_and_equipment"
        | "electrical_services"
        | "electronics_repair_shops"
        | "electronics_stores"
        | "elementary_secondary_schools"
        | "employment_temp_agencies"
        | "equipment_rental"
        | "exterminating_services"
        | "family_clothing_stores"
        | "fast_food_restaurants"
        | "financial_institutions"
        | "fines_government_administrative_entities"
        | "fireplace_fireplace_screens_and_accessories_stores"
        | "floor_covering_stores"
        | "florists"
        | "florists_supplies_nursery_stock_and_flowers"
        | "freezer_and_locker_meat_provisioners"
        | "fuel_dealers_non_automotive"
        | "funeral_services_crematories"
        | "furniture_home_furnishings_and_equipment_stores_except_appliances"
        | "furniture_repair_refinishing"
        | "furriers_and_fur_shops"
        | "general_services"
        | "gift_card_novelty_and_souvenir_shops"
        | "glass_paint_and_wallpaper_stores"
        | "glassware_crystal_stores"
        | "golf_courses_public"
        | "government_services"
        | "grocery_stores_supermarkets"
        | "hardware_equipment_and_supplies"
        | "hardware_stores"
        | "health_and_beauty_spas"
        | "hearing_aids_sales_and_supplies"
        | "heating_plumbing_a_c"
        | "hobby_toy_and_game_shops"
        | "home_supply_warehouse_stores"
        | "hospitals"
        | "hotels_motels_and_resorts"
        | "household_appliance_stores"
        | "industrial_supplies"
        | "information_retrieval_services"
        | "insurance_default"
        | "insurance_underwriting_premiums"
        | "intra_company_purchases"
        | "jewelry_stores_watches_clocks_and_silverware_stores"
        | "landscaping_services"
        | "laundries"
        | "laundry_cleaning_services"
        | "legal_services_attorneys"
        | "luggage_and_leather_goods_stores"
        | "lumber_building_materials_stores"
        | "manual_cash_disburse"
        | "marinas_service_and_supplies"
        | "masonry_stonework_and_plaster"
        | "massage_parlors"
        | "medical_and_dental_labs"
        | "medical_dental_ophthalmic_and_hospital_equipment_and_supplies"
        | "medical_services"
        | "membership_organizations"
        | "mens_and_boys_clothing_and_accessories_stores"
        | "mens_womens_clothing_stores"
        | "metal_service_centers"
        | "miscellaneous"
        | "miscellaneous_apparel_and_accessory_shops"
        | "miscellaneous_auto_dealers"
        | "miscellaneous_business_services"
        | "miscellaneous_food_stores"
        | "miscellaneous_general_merchandise"
        | "miscellaneous_general_services"
        | "miscellaneous_home_furnishing_specialty_stores"
        | "miscellaneous_publishing_and_printing"
        | "miscellaneous_recreation_services"
        | "miscellaneous_repair_shops"
        | "miscellaneous_specialty_retail"
        | "mobile_home_dealers"
        | "motion_picture_theaters"
        | "motor_freight_carriers_and_trucking"
        | "motor_homes_dealers"
        | "motor_vehicle_supplies_and_new_parts"
        | "motorcycle_shops_and_dealers"
        | "motorcycle_shops_dealers"
        | "music_stores_musical_instruments_pianos_and_sheet_music"
        | "news_dealers_and_newsstands"
        | "non_fi_money_orders"
        | "non_fi_stored_value_card_purchase_load"
        | "nondurable_goods"
        | "nurseries_lawn_and_garden_supply_stores"
        | "nursing_personal_care"
        | "office_and_commercial_furniture"
        | "opticians_eyeglasses"
        | "optometrists_ophthalmologist"
        | "orthopedic_goods_prosthetic_devices"
        | "osteopaths"
        | "package_stores_beer_wine_and_liquor"
        | "paints_varnishes_and_supplies"
        | "parking_lots_garages"
        | "passenger_railways"
        | "pawn_shops"
        | "pet_shops_pet_food_and_supplies"
        | "petroleum_and_petroleum_products"
        | "photo_developing"
        | "photographic_photocopy_microfilm_equipment_and_supplies"
        | "photographic_studios"
        | "picture_video_production"
        | "piece_goods_notions_and_other_dry_goods"
        | "plumbing_heating_equipment_and_supplies"
        | "political_organizations"
        | "postal_services_government_only"
        | "precious_stones_and_metals_watches_and_jewelry"
        | "professional_services"
        | "public_warehousing_and_storage"
        | "quick_copy_repro_and_blueprint"
        | "railroads"
        | "real_estate_agents_and_managers_rentals"
        | "record_stores"
        | "recreational_vehicle_rentals"
        | "religious_goods_stores"
        | "religious_organizations"
        | "roofing_siding_sheet_metal"
        | "secretarial_support_services"
        | "security_brokers_dealers"
        | "service_stations"
        | "sewing_needlework_fabric_and_piece_goods_stores"
        | "shoe_repair_hat_cleaning"
        | "shoe_stores"
        | "small_appliance_repair"
        | "snowmobile_dealers"
        | "special_trade_services"
        | "specialty_cleaning"
        | "sporting_goods_stores"
        | "sporting_recreation_camps"
        | "sports_and_riding_apparel_stores"
        | "sports_clubs_fields"
        | "stamp_and_coin_stores"
        | "stationary_office_supplies_printing_and_writing_paper"
        | "stationery_stores_office_and_school_supply_stores"
        | "swimming_pools_sales"
        | "t_ui_travel_germany"
        | "tailors_alterations"
        | "tax_payments_government_agencies"
        | "tax_preparation_services"
        | "taxicabs_limousines"
        | "telecommunication_equipment_and_telephone_sales"
        | "telecommunication_services"
        | "telegraph_services"
        | "tent_and_awning_shops"
        | "testing_laboratories"
        | "theatrical_ticket_agencies"
        | "timeshares"
        | "tire_retreading_and_repair"
        | "tolls_bridge_fees"
        | "tourist_attractions_and_exhibits"
        | "towing_services"
        | "trailer_parks_campgrounds"
        | "transportation_services"
        | "travel_agencies_tour_operators"
        | "truck_stop_iteration"
        | "truck_utility_trailer_rentals"
        | "typesetting_plate_making_and_related_services"
        | "typewriter_stores"
        | "u_s_federal_government_agencies_or_departments"
        | "uniforms_commercial_clothing"
        | "used_merchandise_and_secondhand_stores"
        | "utilities"
        | "variety_stores"
        | "veterinary_services"
        | "video_amusement_game_supplies"
        | "video_game_arcades"
        | "video_tape_rental_stores"
        | "vocational_trade_schools"
        | "watch_jewelry_repair"
        | "welding_repair"
        | "wholesale_clubs"
        | "wig_and_toupee_stores"
        | "wires_money_orders"
        | "womens_accessory_and_specialty_shops"
        | "womens_ready_to_wear_stores"
        | "wrecking_and_salvage_yards"
      )[]
    | null;
  /*
   * Limit spending with amount-based rules that apply across any cards this card replaced (i.e., its `replacement_for` card and _that_ card's `replacement_for` card, up the chain).
   */
  spending_limits?: IssuingCardSpendingLimit[] | null;
  /*
   * Currency of the amounts within `spending_limits`. Always the same as the currency of the card.
   */
  spending_limits_currency?: string | null;
};

export type IssuingCardShipping = {
  address: Address;
  /*
   * The delivery company that shipped a card.
   */
  carrier?: "dhl" | "fedex" | "royal_mail" | "usps";
  /*
   * A unix timestamp representing a best estimate of when the card will be delivered.
   *
   * @format unix-time
   */
  eta?: number | null;
  /*
   * Recipient name.
   *
   * @maxLength 5000
   */
  name: string;
  /*
   * Shipment service, such as `standard` or `express`.
   *
   * @x-stripeBypassValidation true
   */
  service: "express" | "priority" | "standard";
  /*
   * The delivery status of the card.
   */
  status?:
    | "canceled"
    | "delivered"
    | "failure"
    | "pending"
    | "returned"
    | "shipped";
  /*
   * A tracking number for a card shipment.
   *
   * @maxLength 5000
   */
  tracking_number?: string | null;
  /*
   * A link to the shipping carrier's site where you can view detailed information about a card shipment.
   *
   * @maxLength 5000
   */
  tracking_url?: string | null;
  /*
   * Packaging options.
   */
  type: "bulk" | "individual";
};

export type IssuingCardSpendingLimit = {
  /*
   * Maximum amount allowed to spend per interval.
   */
  amount: number;
  /*
   * Array of strings containing [categories](https://stripe.com/docs/api#issuing_authorization_object-merchant_data-category) this limit applies to. Omitting this field will apply the limit to all categories.
   */
  categories?:
    | (
        | "ac_refrigeration_repair"
        | "accounting_bookkeeping_services"
        | "advertising_services"
        | "agricultural_cooperative"
        | "airlines_air_carriers"
        | "airports_flying_fields"
        | "ambulance_services"
        | "amusement_parks_carnivals"
        | "antique_reproductions"
        | "antique_shops"
        | "aquariums"
        | "architectural_surveying_services"
        | "art_dealers_and_galleries"
        | "artists_supply_and_craft_shops"
        | "auto_and_home_supply_stores"
        | "auto_body_repair_shops"
        | "auto_paint_shops"
        | "auto_service_shops"
        | "automated_cash_disburse"
        | "automated_fuel_dispensers"
        | "automobile_associations"
        | "automotive_parts_and_accessories_stores"
        | "automotive_tire_stores"
        | "bail_and_bond_payments"
        | "bakeries"
        | "bands_orchestras"
        | "barber_and_beauty_shops"
        | "betting_casino_gambling"
        | "bicycle_shops"
        | "billiard_pool_establishments"
        | "boat_dealers"
        | "boat_rentals_and_leases"
        | "book_stores"
        | "books_periodicals_and_newspapers"
        | "bowling_alleys"
        | "bus_lines"
        | "business_secretarial_schools"
        | "buying_shopping_services"
        | "cable_satellite_and_other_pay_television_and_radio"
        | "camera_and_photographic_supply_stores"
        | "candy_nut_and_confectionery_stores"
        | "car_and_truck_dealers_new_used"
        | "car_and_truck_dealers_used_only"
        | "car_rental_agencies"
        | "car_washes"
        | "carpentry_services"
        | "carpet_upholstery_cleaning"
        | "caterers"
        | "charitable_and_social_service_organizations_fundraising"
        | "chemicals_and_allied_products"
        | "child_care_services"
        | "childrens_and_infants_wear_stores"
        | "chiropodists_podiatrists"
        | "chiropractors"
        | "cigar_stores_and_stands"
        | "civic_social_fraternal_associations"
        | "cleaning_and_maintenance"
        | "clothing_rental"
        | "colleges_universities"
        | "commercial_equipment"
        | "commercial_footwear"
        | "commercial_photography_art_and_graphics"
        | "commuter_transport_and_ferries"
        | "computer_network_services"
        | "computer_programming"
        | "computer_repair"
        | "computer_software_stores"
        | "computers_peripherals_and_software"
        | "concrete_work_services"
        | "construction_materials"
        | "consulting_public_relations"
        | "correspondence_schools"
        | "cosmetic_stores"
        | "counseling_services"
        | "country_clubs"
        | "courier_services"
        | "court_costs"
        | "credit_reporting_agencies"
        | "cruise_lines"
        | "dairy_products_stores"
        | "dance_hall_studios_schools"
        | "dating_escort_services"
        | "dentists_orthodontists"
        | "department_stores"
        | "detective_agencies"
        | "digital_goods_applications"
        | "digital_goods_games"
        | "digital_goods_large_volume"
        | "digital_goods_media"
        | "direct_marketing_catalog_merchant"
        | "direct_marketing_combination_catalog_and_retail_merchant"
        | "direct_marketing_inbound_telemarketing"
        | "direct_marketing_insurance_services"
        | "direct_marketing_other"
        | "direct_marketing_outbound_telemarketing"
        | "direct_marketing_subscription"
        | "direct_marketing_travel"
        | "discount_stores"
        | "doctors"
        | "door_to_door_sales"
        | "drapery_window_covering_and_upholstery_stores"
        | "drinking_places"
        | "drug_stores_and_pharmacies"
        | "drugs_drug_proprietaries_and_druggist_sundries"
        | "dry_cleaners"
        | "durable_goods"
        | "duty_free_stores"
        | "eating_places_restaurants"
        | "educational_services"
        | "electric_razor_stores"
        | "electrical_parts_and_equipment"
        | "electrical_services"
        | "electronics_repair_shops"
        | "electronics_stores"
        | "elementary_secondary_schools"
        | "employment_temp_agencies"
        | "equipment_rental"
        | "exterminating_services"
        | "family_clothing_stores"
        | "fast_food_restaurants"
        | "financial_institutions"
        | "fines_government_administrative_entities"
        | "fireplace_fireplace_screens_and_accessories_stores"
        | "floor_covering_stores"
        | "florists"
        | "florists_supplies_nursery_stock_and_flowers"
        | "freezer_and_locker_meat_provisioners"
        | "fuel_dealers_non_automotive"
        | "funeral_services_crematories"
        | "furniture_home_furnishings_and_equipment_stores_except_appliances"
        | "furniture_repair_refinishing"
        | "furriers_and_fur_shops"
        | "general_services"
        | "gift_card_novelty_and_souvenir_shops"
        | "glass_paint_and_wallpaper_stores"
        | "glassware_crystal_stores"
        | "golf_courses_public"
        | "government_services"
        | "grocery_stores_supermarkets"
        | "hardware_equipment_and_supplies"
        | "hardware_stores"
        | "health_and_beauty_spas"
        | "hearing_aids_sales_and_supplies"
        | "heating_plumbing_a_c"
        | "hobby_toy_and_game_shops"
        | "home_supply_warehouse_stores"
        | "hospitals"
        | "hotels_motels_and_resorts"
        | "household_appliance_stores"
        | "industrial_supplies"
        | "information_retrieval_services"
        | "insurance_default"
        | "insurance_underwriting_premiums"
        | "intra_company_purchases"
        | "jewelry_stores_watches_clocks_and_silverware_stores"
        | "landscaping_services"
        | "laundries"
        | "laundry_cleaning_services"
        | "legal_services_attorneys"
        | "luggage_and_leather_goods_stores"
        | "lumber_building_materials_stores"
        | "manual_cash_disburse"
        | "marinas_service_and_supplies"
        | "masonry_stonework_and_plaster"
        | "massage_parlors"
        | "medical_and_dental_labs"
        | "medical_dental_ophthalmic_and_hospital_equipment_and_supplies"
        | "medical_services"
        | "membership_organizations"
        | "mens_and_boys_clothing_and_accessories_stores"
        | "mens_womens_clothing_stores"
        | "metal_service_centers"
        | "miscellaneous"
        | "miscellaneous_apparel_and_accessory_shops"
        | "miscellaneous_auto_dealers"
        | "miscellaneous_business_services"
        | "miscellaneous_food_stores"
        | "miscellaneous_general_merchandise"
        | "miscellaneous_general_services"
        | "miscellaneous_home_furnishing_specialty_stores"
        | "miscellaneous_publishing_and_printing"
        | "miscellaneous_recreation_services"
        | "miscellaneous_repair_shops"
        | "miscellaneous_specialty_retail"
        | "mobile_home_dealers"
        | "motion_picture_theaters"
        | "motor_freight_carriers_and_trucking"
        | "motor_homes_dealers"
        | "motor_vehicle_supplies_and_new_parts"
        | "motorcycle_shops_and_dealers"
        | "motorcycle_shops_dealers"
        | "music_stores_musical_instruments_pianos_and_sheet_music"
        | "news_dealers_and_newsstands"
        | "non_fi_money_orders"
        | "non_fi_stored_value_card_purchase_load"
        | "nondurable_goods"
        | "nurseries_lawn_and_garden_supply_stores"
        | "nursing_personal_care"
        | "office_and_commercial_furniture"
        | "opticians_eyeglasses"
        | "optometrists_ophthalmologist"
        | "orthopedic_goods_prosthetic_devices"
        | "osteopaths"
        | "package_stores_beer_wine_and_liquor"
        | "paints_varnishes_and_supplies"
        | "parking_lots_garages"
        | "passenger_railways"
        | "pawn_shops"
        | "pet_shops_pet_food_and_supplies"
        | "petroleum_and_petroleum_products"
        | "photo_developing"
        | "photographic_photocopy_microfilm_equipment_and_supplies"
        | "photographic_studios"
        | "picture_video_production"
        | "piece_goods_notions_and_other_dry_goods"
        | "plumbing_heating_equipment_and_supplies"
        | "political_organizations"
        | "postal_services_government_only"
        | "precious_stones_and_metals_watches_and_jewelry"
        | "professional_services"
        | "public_warehousing_and_storage"
        | "quick_copy_repro_and_blueprint"
        | "railroads"
        | "real_estate_agents_and_managers_rentals"
        | "record_stores"
        | "recreational_vehicle_rentals"
        | "religious_goods_stores"
        | "religious_organizations"
        | "roofing_siding_sheet_metal"
        | "secretarial_support_services"
        | "security_brokers_dealers"
        | "service_stations"
        | "sewing_needlework_fabric_and_piece_goods_stores"
        | "shoe_repair_hat_cleaning"
        | "shoe_stores"
        | "small_appliance_repair"
        | "snowmobile_dealers"
        | "special_trade_services"
        | "specialty_cleaning"
        | "sporting_goods_stores"
        | "sporting_recreation_camps"
        | "sports_and_riding_apparel_stores"
        | "sports_clubs_fields"
        | "stamp_and_coin_stores"
        | "stationary_office_supplies_printing_and_writing_paper"
        | "stationery_stores_office_and_school_supply_stores"
        | "swimming_pools_sales"
        | "t_ui_travel_germany"
        | "tailors_alterations"
        | "tax_payments_government_agencies"
        | "tax_preparation_services"
        | "taxicabs_limousines"
        | "telecommunication_equipment_and_telephone_sales"
        | "telecommunication_services"
        | "telegraph_services"
        | "tent_and_awning_shops"
        | "testing_laboratories"
        | "theatrical_ticket_agencies"
        | "timeshares"
        | "tire_retreading_and_repair"
        | "tolls_bridge_fees"
        | "tourist_attractions_and_exhibits"
        | "towing_services"
        | "trailer_parks_campgrounds"
        | "transportation_services"
        | "travel_agencies_tour_operators"
        | "truck_stop_iteration"
        | "truck_utility_trailer_rentals"
        | "typesetting_plate_making_and_related_services"
        | "typewriter_stores"
        | "u_s_federal_government_agencies_or_departments"
        | "uniforms_commercial_clothing"
        | "used_merchandise_and_secondhand_stores"
        | "utilities"
        | "variety_stores"
        | "veterinary_services"
        | "video_amusement_game_supplies"
        | "video_game_arcades"
        | "video_tape_rental_stores"
        | "vocational_trade_schools"
        | "watch_jewelry_repair"
        | "welding_repair"
        | "wholesale_clubs"
        | "wig_and_toupee_stores"
        | "wires_money_orders"
        | "womens_accessory_and_specialty_shops"
        | "womens_ready_to_wear_stores"
        | "wrecking_and_salvage_yards"
      )[]
    | null;
  /*
   * Interval (or event) to which the amount applies.
   */
  interval:
    | "all_time"
    | "daily"
    | "monthly"
    | "per_authorization"
    | "weekly"
    | "yearly";
};

export type IssuingCardholderAddress = {
  address: Address;
};

export type IssuingCardholderAuthorizationControls = {
  /*
   * Array of strings containing [categories](https://stripe.com/docs/api#issuing_authorization_object-merchant_data-category) of authorizations to allow. All other categories will be blocked. Cannot be set with `blocked_categories`.
   */
  allowed_categories?:
    | (
        | "ac_refrigeration_repair"
        | "accounting_bookkeeping_services"
        | "advertising_services"
        | "agricultural_cooperative"
        | "airlines_air_carriers"
        | "airports_flying_fields"
        | "ambulance_services"
        | "amusement_parks_carnivals"
        | "antique_reproductions"
        | "antique_shops"
        | "aquariums"
        | "architectural_surveying_services"
        | "art_dealers_and_galleries"
        | "artists_supply_and_craft_shops"
        | "auto_and_home_supply_stores"
        | "auto_body_repair_shops"
        | "auto_paint_shops"
        | "auto_service_shops"
        | "automated_cash_disburse"
        | "automated_fuel_dispensers"
        | "automobile_associations"
        | "automotive_parts_and_accessories_stores"
        | "automotive_tire_stores"
        | "bail_and_bond_payments"
        | "bakeries"
        | "bands_orchestras"
        | "barber_and_beauty_shops"
        | "betting_casino_gambling"
        | "bicycle_shops"
        | "billiard_pool_establishments"
        | "boat_dealers"
        | "boat_rentals_and_leases"
        | "book_stores"
        | "books_periodicals_and_newspapers"
        | "bowling_alleys"
        | "bus_lines"
        | "business_secretarial_schools"
        | "buying_shopping_services"
        | "cable_satellite_and_other_pay_television_and_radio"
        | "camera_and_photographic_supply_stores"
        | "candy_nut_and_confectionery_stores"
        | "car_and_truck_dealers_new_used"
        | "car_and_truck_dealers_used_only"
        | "car_rental_agencies"
        | "car_washes"
        | "carpentry_services"
        | "carpet_upholstery_cleaning"
        | "caterers"
        | "charitable_and_social_service_organizations_fundraising"
        | "chemicals_and_allied_products"
        | "child_care_services"
        | "childrens_and_infants_wear_stores"
        | "chiropodists_podiatrists"
        | "chiropractors"
        | "cigar_stores_and_stands"
        | "civic_social_fraternal_associations"
        | "cleaning_and_maintenance"
        | "clothing_rental"
        | "colleges_universities"
        | "commercial_equipment"
        | "commercial_footwear"
        | "commercial_photography_art_and_graphics"
        | "commuter_transport_and_ferries"
        | "computer_network_services"
        | "computer_programming"
        | "computer_repair"
        | "computer_software_stores"
        | "computers_peripherals_and_software"
        | "concrete_work_services"
        | "construction_materials"
        | "consulting_public_relations"
        | "correspondence_schools"
        | "cosmetic_stores"
        | "counseling_services"
        | "country_clubs"
        | "courier_services"
        | "court_costs"
        | "credit_reporting_agencies"
        | "cruise_lines"
        | "dairy_products_stores"
        | "dance_hall_studios_schools"
        | "dating_escort_services"
        | "dentists_orthodontists"
        | "department_stores"
        | "detective_agencies"
        | "digital_goods_applications"
        | "digital_goods_games"
        | "digital_goods_large_volume"
        | "digital_goods_media"
        | "direct_marketing_catalog_merchant"
        | "direct_marketing_combination_catalog_and_retail_merchant"
        | "direct_marketing_inbound_telemarketing"
        | "direct_marketing_insurance_services"
        | "direct_marketing_other"
        | "direct_marketing_outbound_telemarketing"
        | "direct_marketing_subscription"
        | "direct_marketing_travel"
        | "discount_stores"
        | "doctors"
        | "door_to_door_sales"
        | "drapery_window_covering_and_upholstery_stores"
        | "drinking_places"
        | "drug_stores_and_pharmacies"
        | "drugs_drug_proprietaries_and_druggist_sundries"
        | "dry_cleaners"
        | "durable_goods"
        | "duty_free_stores"
        | "eating_places_restaurants"
        | "educational_services"
        | "electric_razor_stores"
        | "electrical_parts_and_equipment"
        | "electrical_services"
        | "electronics_repair_shops"
        | "electronics_stores"
        | "elementary_secondary_schools"
        | "employment_temp_agencies"
        | "equipment_rental"
        | "exterminating_services"
        | "family_clothing_stores"
        | "fast_food_restaurants"
        | "financial_institutions"
        | "fines_government_administrative_entities"
        | "fireplace_fireplace_screens_and_accessories_stores"
        | "floor_covering_stores"
        | "florists"
        | "florists_supplies_nursery_stock_and_flowers"
        | "freezer_and_locker_meat_provisioners"
        | "fuel_dealers_non_automotive"
        | "funeral_services_crematories"
        | "furniture_home_furnishings_and_equipment_stores_except_appliances"
        | "furniture_repair_refinishing"
        | "furriers_and_fur_shops"
        | "general_services"
        | "gift_card_novelty_and_souvenir_shops"
        | "glass_paint_and_wallpaper_stores"
        | "glassware_crystal_stores"
        | "golf_courses_public"
        | "government_services"
        | "grocery_stores_supermarkets"
        | "hardware_equipment_and_supplies"
        | "hardware_stores"
        | "health_and_beauty_spas"
        | "hearing_aids_sales_and_supplies"
        | "heating_plumbing_a_c"
        | "hobby_toy_and_game_shops"
        | "home_supply_warehouse_stores"
        | "hospitals"
        | "hotels_motels_and_resorts"
        | "household_appliance_stores"
        | "industrial_supplies"
        | "information_retrieval_services"
        | "insurance_default"
        | "insurance_underwriting_premiums"
        | "intra_company_purchases"
        | "jewelry_stores_watches_clocks_and_silverware_stores"
        | "landscaping_services"
        | "laundries"
        | "laundry_cleaning_services"
        | "legal_services_attorneys"
        | "luggage_and_leather_goods_stores"
        | "lumber_building_materials_stores"
        | "manual_cash_disburse"
        | "marinas_service_and_supplies"
        | "masonry_stonework_and_plaster"
        | "massage_parlors"
        | "medical_and_dental_labs"
        | "medical_dental_ophthalmic_and_hospital_equipment_and_supplies"
        | "medical_services"
        | "membership_organizations"
        | "mens_and_boys_clothing_and_accessories_stores"
        | "mens_womens_clothing_stores"
        | "metal_service_centers"
        | "miscellaneous"
        | "miscellaneous_apparel_and_accessory_shops"
        | "miscellaneous_auto_dealers"
        | "miscellaneous_business_services"
        | "miscellaneous_food_stores"
        | "miscellaneous_general_merchandise"
        | "miscellaneous_general_services"
        | "miscellaneous_home_furnishing_specialty_stores"
        | "miscellaneous_publishing_and_printing"
        | "miscellaneous_recreation_services"
        | "miscellaneous_repair_shops"
        | "miscellaneous_specialty_retail"
        | "mobile_home_dealers"
        | "motion_picture_theaters"
        | "motor_freight_carriers_and_trucking"
        | "motor_homes_dealers"
        | "motor_vehicle_supplies_and_new_parts"
        | "motorcycle_shops_and_dealers"
        | "motorcycle_shops_dealers"
        | "music_stores_musical_instruments_pianos_and_sheet_music"
        | "news_dealers_and_newsstands"
        | "non_fi_money_orders"
        | "non_fi_stored_value_card_purchase_load"
        | "nondurable_goods"
        | "nurseries_lawn_and_garden_supply_stores"
        | "nursing_personal_care"
        | "office_and_commercial_furniture"
        | "opticians_eyeglasses"
        | "optometrists_ophthalmologist"
        | "orthopedic_goods_prosthetic_devices"
        | "osteopaths"
        | "package_stores_beer_wine_and_liquor"
        | "paints_varnishes_and_supplies"
        | "parking_lots_garages"
        | "passenger_railways"
        | "pawn_shops"
        | "pet_shops_pet_food_and_supplies"
        | "petroleum_and_petroleum_products"
        | "photo_developing"
        | "photographic_photocopy_microfilm_equipment_and_supplies"
        | "photographic_studios"
        | "picture_video_production"
        | "piece_goods_notions_and_other_dry_goods"
        | "plumbing_heating_equipment_and_supplies"
        | "political_organizations"
        | "postal_services_government_only"
        | "precious_stones_and_metals_watches_and_jewelry"
        | "professional_services"
        | "public_warehousing_and_storage"
        | "quick_copy_repro_and_blueprint"
        | "railroads"
        | "real_estate_agents_and_managers_rentals"
        | "record_stores"
        | "recreational_vehicle_rentals"
        | "religious_goods_stores"
        | "religious_organizations"
        | "roofing_siding_sheet_metal"
        | "secretarial_support_services"
        | "security_brokers_dealers"
        | "service_stations"
        | "sewing_needlework_fabric_and_piece_goods_stores"
        | "shoe_repair_hat_cleaning"
        | "shoe_stores"
        | "small_appliance_repair"
        | "snowmobile_dealers"
        | "special_trade_services"
        | "specialty_cleaning"
        | "sporting_goods_stores"
        | "sporting_recreation_camps"
        | "sports_and_riding_apparel_stores"
        | "sports_clubs_fields"
        | "stamp_and_coin_stores"
        | "stationary_office_supplies_printing_and_writing_paper"
        | "stationery_stores_office_and_school_supply_stores"
        | "swimming_pools_sales"
        | "t_ui_travel_germany"
        | "tailors_alterations"
        | "tax_payments_government_agencies"
        | "tax_preparation_services"
        | "taxicabs_limousines"
        | "telecommunication_equipment_and_telephone_sales"
        | "telecommunication_services"
        | "telegraph_services"
        | "tent_and_awning_shops"
        | "testing_laboratories"
        | "theatrical_ticket_agencies"
        | "timeshares"
        | "tire_retreading_and_repair"
        | "tolls_bridge_fees"
        | "tourist_attractions_and_exhibits"
        | "towing_services"
        | "trailer_parks_campgrounds"
        | "transportation_services"
        | "travel_agencies_tour_operators"
        | "truck_stop_iteration"
        | "truck_utility_trailer_rentals"
        | "typesetting_plate_making_and_related_services"
        | "typewriter_stores"
        | "u_s_federal_government_agencies_or_departments"
        | "uniforms_commercial_clothing"
        | "used_merchandise_and_secondhand_stores"
        | "utilities"
        | "variety_stores"
        | "veterinary_services"
        | "video_amusement_game_supplies"
        | "video_game_arcades"
        | "video_tape_rental_stores"
        | "vocational_trade_schools"
        | "watch_jewelry_repair"
        | "welding_repair"
        | "wholesale_clubs"
        | "wig_and_toupee_stores"
        | "wires_money_orders"
        | "womens_accessory_and_specialty_shops"
        | "womens_ready_to_wear_stores"
        | "wrecking_and_salvage_yards"
      )[]
    | null;
  /*
   * Array of strings containing [categories](https://stripe.com/docs/api#issuing_authorization_object-merchant_data-category) of authorizations to decline. All other categories will be allowed. Cannot be set with `allowed_categories`.
   */
  blocked_categories?:
    | (
        | "ac_refrigeration_repair"
        | "accounting_bookkeeping_services"
        | "advertising_services"
        | "agricultural_cooperative"
        | "airlines_air_carriers"
        | "airports_flying_fields"
        | "ambulance_services"
        | "amusement_parks_carnivals"
        | "antique_reproductions"
        | "antique_shops"
        | "aquariums"
        | "architectural_surveying_services"
        | "art_dealers_and_galleries"
        | "artists_supply_and_craft_shops"
        | "auto_and_home_supply_stores"
        | "auto_body_repair_shops"
        | "auto_paint_shops"
        | "auto_service_shops"
        | "automated_cash_disburse"
        | "automated_fuel_dispensers"
        | "automobile_associations"
        | "automotive_parts_and_accessories_stores"
        | "automotive_tire_stores"
        | "bail_and_bond_payments"
        | "bakeries"
        | "bands_orchestras"
        | "barber_and_beauty_shops"
        | "betting_casino_gambling"
        | "bicycle_shops"
        | "billiard_pool_establishments"
        | "boat_dealers"
        | "boat_rentals_and_leases"
        | "book_stores"
        | "books_periodicals_and_newspapers"
        | "bowling_alleys"
        | "bus_lines"
        | "business_secretarial_schools"
        | "buying_shopping_services"
        | "cable_satellite_and_other_pay_television_and_radio"
        | "camera_and_photographic_supply_stores"
        | "candy_nut_and_confectionery_stores"
        | "car_and_truck_dealers_new_used"
        | "car_and_truck_dealers_used_only"
        | "car_rental_agencies"
        | "car_washes"
        | "carpentry_services"
        | "carpet_upholstery_cleaning"
        | "caterers"
        | "charitable_and_social_service_organizations_fundraising"
        | "chemicals_and_allied_products"
        | "child_care_services"
        | "childrens_and_infants_wear_stores"
        | "chiropodists_podiatrists"
        | "chiropractors"
        | "cigar_stores_and_stands"
        | "civic_social_fraternal_associations"
        | "cleaning_and_maintenance"
        | "clothing_rental"
        | "colleges_universities"
        | "commercial_equipment"
        | "commercial_footwear"
        | "commercial_photography_art_and_graphics"
        | "commuter_transport_and_ferries"
        | "computer_network_services"
        | "computer_programming"
        | "computer_repair"
        | "computer_software_stores"
        | "computers_peripherals_and_software"
        | "concrete_work_services"
        | "construction_materials"
        | "consulting_public_relations"
        | "correspondence_schools"
        | "cosmetic_stores"
        | "counseling_services"
        | "country_clubs"
        | "courier_services"
        | "court_costs"
        | "credit_reporting_agencies"
        | "cruise_lines"
        | "dairy_products_stores"
        | "dance_hall_studios_schools"
        | "dating_escort_services"
        | "dentists_orthodontists"
        | "department_stores"
        | "detective_agencies"
        | "digital_goods_applications"
        | "digital_goods_games"
        | "digital_goods_large_volume"
        | "digital_goods_media"
        | "direct_marketing_catalog_merchant"
        | "direct_marketing_combination_catalog_and_retail_merchant"
        | "direct_marketing_inbound_telemarketing"
        | "direct_marketing_insurance_services"
        | "direct_marketing_other"
        | "direct_marketing_outbound_telemarketing"
        | "direct_marketing_subscription"
        | "direct_marketing_travel"
        | "discount_stores"
        | "doctors"
        | "door_to_door_sales"
        | "drapery_window_covering_and_upholstery_stores"
        | "drinking_places"
        | "drug_stores_and_pharmacies"
        | "drugs_drug_proprietaries_and_druggist_sundries"
        | "dry_cleaners"
        | "durable_goods"
        | "duty_free_stores"
        | "eating_places_restaurants"
        | "educational_services"
        | "electric_razor_stores"
        | "electrical_parts_and_equipment"
        | "electrical_services"
        | "electronics_repair_shops"
        | "electronics_stores"
        | "elementary_secondary_schools"
        | "employment_temp_agencies"
        | "equipment_rental"
        | "exterminating_services"
        | "family_clothing_stores"
        | "fast_food_restaurants"
        | "financial_institutions"
        | "fines_government_administrative_entities"
        | "fireplace_fireplace_screens_and_accessories_stores"
        | "floor_covering_stores"
        | "florists"
        | "florists_supplies_nursery_stock_and_flowers"
        | "freezer_and_locker_meat_provisioners"
        | "fuel_dealers_non_automotive"
        | "funeral_services_crematories"
        | "furniture_home_furnishings_and_equipment_stores_except_appliances"
        | "furniture_repair_refinishing"
        | "furriers_and_fur_shops"
        | "general_services"
        | "gift_card_novelty_and_souvenir_shops"
        | "glass_paint_and_wallpaper_stores"
        | "glassware_crystal_stores"
        | "golf_courses_public"
        | "government_services"
        | "grocery_stores_supermarkets"
        | "hardware_equipment_and_supplies"
        | "hardware_stores"
        | "health_and_beauty_spas"
        | "hearing_aids_sales_and_supplies"
        | "heating_plumbing_a_c"
        | "hobby_toy_and_game_shops"
        | "home_supply_warehouse_stores"
        | "hospitals"
        | "hotels_motels_and_resorts"
        | "household_appliance_stores"
        | "industrial_supplies"
        | "information_retrieval_services"
        | "insurance_default"
        | "insurance_underwriting_premiums"
        | "intra_company_purchases"
        | "jewelry_stores_watches_clocks_and_silverware_stores"
        | "landscaping_services"
        | "laundries"
        | "laundry_cleaning_services"
        | "legal_services_attorneys"
        | "luggage_and_leather_goods_stores"
        | "lumber_building_materials_stores"
        | "manual_cash_disburse"
        | "marinas_service_and_supplies"
        | "masonry_stonework_and_plaster"
        | "massage_parlors"
        | "medical_and_dental_labs"
        | "medical_dental_ophthalmic_and_hospital_equipment_and_supplies"
        | "medical_services"
        | "membership_organizations"
        | "mens_and_boys_clothing_and_accessories_stores"
        | "mens_womens_clothing_stores"
        | "metal_service_centers"
        | "miscellaneous"
        | "miscellaneous_apparel_and_accessory_shops"
        | "miscellaneous_auto_dealers"
        | "miscellaneous_business_services"
        | "miscellaneous_food_stores"
        | "miscellaneous_general_merchandise"
        | "miscellaneous_general_services"
        | "miscellaneous_home_furnishing_specialty_stores"
        | "miscellaneous_publishing_and_printing"
        | "miscellaneous_recreation_services"
        | "miscellaneous_repair_shops"
        | "miscellaneous_specialty_retail"
        | "mobile_home_dealers"
        | "motion_picture_theaters"
        | "motor_freight_carriers_and_trucking"
        | "motor_homes_dealers"
        | "motor_vehicle_supplies_and_new_parts"
        | "motorcycle_shops_and_dealers"
        | "motorcycle_shops_dealers"
        | "music_stores_musical_instruments_pianos_and_sheet_music"
        | "news_dealers_and_newsstands"
        | "non_fi_money_orders"
        | "non_fi_stored_value_card_purchase_load"
        | "nondurable_goods"
        | "nurseries_lawn_and_garden_supply_stores"
        | "nursing_personal_care"
        | "office_and_commercial_furniture"
        | "opticians_eyeglasses"
        | "optometrists_ophthalmologist"
        | "orthopedic_goods_prosthetic_devices"
        | "osteopaths"
        | "package_stores_beer_wine_and_liquor"
        | "paints_varnishes_and_supplies"
        | "parking_lots_garages"
        | "passenger_railways"
        | "pawn_shops"
        | "pet_shops_pet_food_and_supplies"
        | "petroleum_and_petroleum_products"
        | "photo_developing"
        | "photographic_photocopy_microfilm_equipment_and_supplies"
        | "photographic_studios"
        | "picture_video_production"
        | "piece_goods_notions_and_other_dry_goods"
        | "plumbing_heating_equipment_and_supplies"
        | "political_organizations"
        | "postal_services_government_only"
        | "precious_stones_and_metals_watches_and_jewelry"
        | "professional_services"
        | "public_warehousing_and_storage"
        | "quick_copy_repro_and_blueprint"
        | "railroads"
        | "real_estate_agents_and_managers_rentals"
        | "record_stores"
        | "recreational_vehicle_rentals"
        | "religious_goods_stores"
        | "religious_organizations"
        | "roofing_siding_sheet_metal"
        | "secretarial_support_services"
        | "security_brokers_dealers"
        | "service_stations"
        | "sewing_needlework_fabric_and_piece_goods_stores"
        | "shoe_repair_hat_cleaning"
        | "shoe_stores"
        | "small_appliance_repair"
        | "snowmobile_dealers"
        | "special_trade_services"
        | "specialty_cleaning"
        | "sporting_goods_stores"
        | "sporting_recreation_camps"
        | "sports_and_riding_apparel_stores"
        | "sports_clubs_fields"
        | "stamp_and_coin_stores"
        | "stationary_office_supplies_printing_and_writing_paper"
        | "stationery_stores_office_and_school_supply_stores"
        | "swimming_pools_sales"
        | "t_ui_travel_germany"
        | "tailors_alterations"
        | "tax_payments_government_agencies"
        | "tax_preparation_services"
        | "taxicabs_limousines"
        | "telecommunication_equipment_and_telephone_sales"
        | "telecommunication_services"
        | "telegraph_services"
        | "tent_and_awning_shops"
        | "testing_laboratories"
        | "theatrical_ticket_agencies"
        | "timeshares"
        | "tire_retreading_and_repair"
        | "tolls_bridge_fees"
        | "tourist_attractions_and_exhibits"
        | "towing_services"
        | "trailer_parks_campgrounds"
        | "transportation_services"
        | "travel_agencies_tour_operators"
        | "truck_stop_iteration"
        | "truck_utility_trailer_rentals"
        | "typesetting_plate_making_and_related_services"
        | "typewriter_stores"
        | "u_s_federal_government_agencies_or_departments"
        | "uniforms_commercial_clothing"
        | "used_merchandise_and_secondhand_stores"
        | "utilities"
        | "variety_stores"
        | "veterinary_services"
        | "video_amusement_game_supplies"
        | "video_game_arcades"
        | "video_tape_rental_stores"
        | "vocational_trade_schools"
        | "watch_jewelry_repair"
        | "welding_repair"
        | "wholesale_clubs"
        | "wig_and_toupee_stores"
        | "wires_money_orders"
        | "womens_accessory_and_specialty_shops"
        | "womens_ready_to_wear_stores"
        | "wrecking_and_salvage_yards"
      )[]
    | null;
  /*
   * Limit spending with amount-based rules that apply across this cardholder's cards.
   */
  spending_limits?: IssuingCardholderSpendingLimit[] | null;
  /*
   * Currency of the amounts within `spending_limits`.
   */
  spending_limits_currency?: string | null;
};

export type IssuingCardholderCompany = {
  /*
   * Whether the company's business ID number was provided.
   */
  tax_id_provided: boolean;
};

export type IssuingCardholderIdDocument = {
  /*
   * The back of a document returned by a [file upload](https://stripe.com/docs/api#create_file) with a `purpose` value of `identity_document`.
   */
  back?: string | File | null;
  /*
   * The front of a document returned by a [file upload](https://stripe.com/docs/api#create_file) with a `purpose` value of `identity_document`.
   */
  front?: string | File | null;
};

export type IssuingCardholderIndividual = {
  /*
   * The date of birth of this cardholder.
   */
  dob?: IssuingCardholderIndividualDob | null;
  /*
   * The first name of this cardholder.
   *
   * @maxLength 5000
   */
  first_name: string;
  /*
   * The last name of this cardholder.
   *
   * @maxLength 5000
   */
  last_name: string;
  /*
   * Government-issued ID document for this cardholder.
   */
  verification?: IssuingCardholderVerification | null;
};

export type IssuingCardholderIndividualDob = {
  /*
   * The day of birth, between 1 and 31.
   */
  day?: number | null;
  /*
   * The month of birth, between 1 and 12.
   */
  month?: number | null;
  /*
   * The four-digit year of birth.
   */
  year?: number | null;
};

export type IssuingCardholderRequirements = {
  /*
   * If `disabled_reason` is present, all cards will decline authorizations with `cardholder_verification_required` reason.
   */
  disabled_reason?: "listed" | "rejected.listed" | "under_review";
  /*
   * Array of fields that need to be collected in order to verify and re-enable the cardholder.
   */
  past_due?:
    | (
        | "company.tax_id"
        | "individual.dob.day"
        | "individual.dob.month"
        | "individual.dob.year"
        | "individual.first_name"
        | "individual.last_name"
        | "individual.verification.document"
      )[]
    | null;
};

export type IssuingCardholderSpendingLimit = {
  /*
   * Maximum amount allowed to spend per interval.
   */
  amount: number;
  /*
   * Array of strings containing [categories](https://stripe.com/docs/api#issuing_authorization_object-merchant_data-category) this limit applies to. Omitting this field will apply the limit to all categories.
   */
  categories?:
    | (
        | "ac_refrigeration_repair"
        | "accounting_bookkeeping_services"
        | "advertising_services"
        | "agricultural_cooperative"
        | "airlines_air_carriers"
        | "airports_flying_fields"
        | "ambulance_services"
        | "amusement_parks_carnivals"
        | "antique_reproductions"
        | "antique_shops"
        | "aquariums"
        | "architectural_surveying_services"
        | "art_dealers_and_galleries"
        | "artists_supply_and_craft_shops"
        | "auto_and_home_supply_stores"
        | "auto_body_repair_shops"
        | "auto_paint_shops"
        | "auto_service_shops"
        | "automated_cash_disburse"
        | "automated_fuel_dispensers"
        | "automobile_associations"
        | "automotive_parts_and_accessories_stores"
        | "automotive_tire_stores"
        | "bail_and_bond_payments"
        | "bakeries"
        | "bands_orchestras"
        | "barber_and_beauty_shops"
        | "betting_casino_gambling"
        | "bicycle_shops"
        | "billiard_pool_establishments"
        | "boat_dealers"
        | "boat_rentals_and_leases"
        | "book_stores"
        | "books_periodicals_and_newspapers"
        | "bowling_alleys"
        | "bus_lines"
        | "business_secretarial_schools"
        | "buying_shopping_services"
        | "cable_satellite_and_other_pay_television_and_radio"
        | "camera_and_photographic_supply_stores"
        | "candy_nut_and_confectionery_stores"
        | "car_and_truck_dealers_new_used"
        | "car_and_truck_dealers_used_only"
        | "car_rental_agencies"
        | "car_washes"
        | "carpentry_services"
        | "carpet_upholstery_cleaning"
        | "caterers"
        | "charitable_and_social_service_organizations_fundraising"
        | "chemicals_and_allied_products"
        | "child_care_services"
        | "childrens_and_infants_wear_stores"
        | "chiropodists_podiatrists"
        | "chiropractors"
        | "cigar_stores_and_stands"
        | "civic_social_fraternal_associations"
        | "cleaning_and_maintenance"
        | "clothing_rental"
        | "colleges_universities"
        | "commercial_equipment"
        | "commercial_footwear"
        | "commercial_photography_art_and_graphics"
        | "commuter_transport_and_ferries"
        | "computer_network_services"
        | "computer_programming"
        | "computer_repair"
        | "computer_software_stores"
        | "computers_peripherals_and_software"
        | "concrete_work_services"
        | "construction_materials"
        | "consulting_public_relations"
        | "correspondence_schools"
        | "cosmetic_stores"
        | "counseling_services"
        | "country_clubs"
        | "courier_services"
        | "court_costs"
        | "credit_reporting_agencies"
        | "cruise_lines"
        | "dairy_products_stores"
        | "dance_hall_studios_schools"
        | "dating_escort_services"
        | "dentists_orthodontists"
        | "department_stores"
        | "detective_agencies"
        | "digital_goods_applications"
        | "digital_goods_games"
        | "digital_goods_large_volume"
        | "digital_goods_media"
        | "direct_marketing_catalog_merchant"
        | "direct_marketing_combination_catalog_and_retail_merchant"
        | "direct_marketing_inbound_telemarketing"
        | "direct_marketing_insurance_services"
        | "direct_marketing_other"
        | "direct_marketing_outbound_telemarketing"
        | "direct_marketing_subscription"
        | "direct_marketing_travel"
        | "discount_stores"
        | "doctors"
        | "door_to_door_sales"
        | "drapery_window_covering_and_upholstery_stores"
        | "drinking_places"
        | "drug_stores_and_pharmacies"
        | "drugs_drug_proprietaries_and_druggist_sundries"
        | "dry_cleaners"
        | "durable_goods"
        | "duty_free_stores"
        | "eating_places_restaurants"
        | "educational_services"
        | "electric_razor_stores"
        | "electrical_parts_and_equipment"
        | "electrical_services"
        | "electronics_repair_shops"
        | "electronics_stores"
        | "elementary_secondary_schools"
        | "employment_temp_agencies"
        | "equipment_rental"
        | "exterminating_services"
        | "family_clothing_stores"
        | "fast_food_restaurants"
        | "financial_institutions"
        | "fines_government_administrative_entities"
        | "fireplace_fireplace_screens_and_accessories_stores"
        | "floor_covering_stores"
        | "florists"
        | "florists_supplies_nursery_stock_and_flowers"
        | "freezer_and_locker_meat_provisioners"
        | "fuel_dealers_non_automotive"
        | "funeral_services_crematories"
        | "furniture_home_furnishings_and_equipment_stores_except_appliances"
        | "furniture_repair_refinishing"
        | "furriers_and_fur_shops"
        | "general_services"
        | "gift_card_novelty_and_souvenir_shops"
        | "glass_paint_and_wallpaper_stores"
        | "glassware_crystal_stores"
        | "golf_courses_public"
        | "government_services"
        | "grocery_stores_supermarkets"
        | "hardware_equipment_and_supplies"
        | "hardware_stores"
        | "health_and_beauty_spas"
        | "hearing_aids_sales_and_supplies"
        | "heating_plumbing_a_c"
        | "hobby_toy_and_game_shops"
        | "home_supply_warehouse_stores"
        | "hospitals"
        | "hotels_motels_and_resorts"
        | "household_appliance_stores"
        | "industrial_supplies"
        | "information_retrieval_services"
        | "insurance_default"
        | "insurance_underwriting_premiums"
        | "intra_company_purchases"
        | "jewelry_stores_watches_clocks_and_silverware_stores"
        | "landscaping_services"
        | "laundries"
        | "laundry_cleaning_services"
        | "legal_services_attorneys"
        | "luggage_and_leather_goods_stores"
        | "lumber_building_materials_stores"
        | "manual_cash_disburse"
        | "marinas_service_and_supplies"
        | "masonry_stonework_and_plaster"
        | "massage_parlors"
        | "medical_and_dental_labs"
        | "medical_dental_ophthalmic_and_hospital_equipment_and_supplies"
        | "medical_services"
        | "membership_organizations"
        | "mens_and_boys_clothing_and_accessories_stores"
        | "mens_womens_clothing_stores"
        | "metal_service_centers"
        | "miscellaneous"
        | "miscellaneous_apparel_and_accessory_shops"
        | "miscellaneous_auto_dealers"
        | "miscellaneous_business_services"
        | "miscellaneous_food_stores"
        | "miscellaneous_general_merchandise"
        | "miscellaneous_general_services"
        | "miscellaneous_home_furnishing_specialty_stores"
        | "miscellaneous_publishing_and_printing"
        | "miscellaneous_recreation_services"
        | "miscellaneous_repair_shops"
        | "miscellaneous_specialty_retail"
        | "mobile_home_dealers"
        | "motion_picture_theaters"
        | "motor_freight_carriers_and_trucking"
        | "motor_homes_dealers"
        | "motor_vehicle_supplies_and_new_parts"
        | "motorcycle_shops_and_dealers"
        | "motorcycle_shops_dealers"
        | "music_stores_musical_instruments_pianos_and_sheet_music"
        | "news_dealers_and_newsstands"
        | "non_fi_money_orders"
        | "non_fi_stored_value_card_purchase_load"
        | "nondurable_goods"
        | "nurseries_lawn_and_garden_supply_stores"
        | "nursing_personal_care"
        | "office_and_commercial_furniture"
        | "opticians_eyeglasses"
        | "optometrists_ophthalmologist"
        | "orthopedic_goods_prosthetic_devices"
        | "osteopaths"
        | "package_stores_beer_wine_and_liquor"
        | "paints_varnishes_and_supplies"
        | "parking_lots_garages"
        | "passenger_railways"
        | "pawn_shops"
        | "pet_shops_pet_food_and_supplies"
        | "petroleum_and_petroleum_products"
        | "photo_developing"
        | "photographic_photocopy_microfilm_equipment_and_supplies"
        | "photographic_studios"
        | "picture_video_production"
        | "piece_goods_notions_and_other_dry_goods"
        | "plumbing_heating_equipment_and_supplies"
        | "political_organizations"
        | "postal_services_government_only"
        | "precious_stones_and_metals_watches_and_jewelry"
        | "professional_services"
        | "public_warehousing_and_storage"
        | "quick_copy_repro_and_blueprint"
        | "railroads"
        | "real_estate_agents_and_managers_rentals"
        | "record_stores"
        | "recreational_vehicle_rentals"
        | "religious_goods_stores"
        | "religious_organizations"
        | "roofing_siding_sheet_metal"
        | "secretarial_support_services"
        | "security_brokers_dealers"
        | "service_stations"
        | "sewing_needlework_fabric_and_piece_goods_stores"
        | "shoe_repair_hat_cleaning"
        | "shoe_stores"
        | "small_appliance_repair"
        | "snowmobile_dealers"
        | "special_trade_services"
        | "specialty_cleaning"
        | "sporting_goods_stores"
        | "sporting_recreation_camps"
        | "sports_and_riding_apparel_stores"
        | "sports_clubs_fields"
        | "stamp_and_coin_stores"
        | "stationary_office_supplies_printing_and_writing_paper"
        | "stationery_stores_office_and_school_supply_stores"
        | "swimming_pools_sales"
        | "t_ui_travel_germany"
        | "tailors_alterations"
        | "tax_payments_government_agencies"
        | "tax_preparation_services"
        | "taxicabs_limousines"
        | "telecommunication_equipment_and_telephone_sales"
        | "telecommunication_services"
        | "telegraph_services"
        | "tent_and_awning_shops"
        | "testing_laboratories"
        | "theatrical_ticket_agencies"
        | "timeshares"
        | "tire_retreading_and_repair"
        | "tolls_bridge_fees"
        | "tourist_attractions_and_exhibits"
        | "towing_services"
        | "trailer_parks_campgrounds"
        | "transportation_services"
        | "travel_agencies_tour_operators"
        | "truck_stop_iteration"
        | "truck_utility_trailer_rentals"
        | "typesetting_plate_making_and_related_services"
        | "typewriter_stores"
        | "u_s_federal_government_agencies_or_departments"
        | "uniforms_commercial_clothing"
        | "used_merchandise_and_secondhand_stores"
        | "utilities"
        | "variety_stores"
        | "veterinary_services"
        | "video_amusement_game_supplies"
        | "video_game_arcades"
        | "video_tape_rental_stores"
        | "vocational_trade_schools"
        | "watch_jewelry_repair"
        | "welding_repair"
        | "wholesale_clubs"
        | "wig_and_toupee_stores"
        | "wires_money_orders"
        | "womens_accessory_and_specialty_shops"
        | "womens_ready_to_wear_stores"
        | "wrecking_and_salvage_yards"
      )[]
    | null;
  /*
   * Interval (or event) to which the amount applies.
   */
  interval:
    | "all_time"
    | "daily"
    | "monthly"
    | "per_authorization"
    | "weekly"
    | "yearly";
};

export type IssuingCardholderVerification = {
  /*
   * An identifying document, either a passport or local ID card.
   */
  document?: IssuingCardholderIdDocument | null;
};

export type IssuingDisputeCanceledEvidence = {
  /*
   * (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Additional documentation supporting the dispute.
   */
  additional_documentation?: string | File | null;
  /*
   * Date when order was canceled.
   *
   * @format unix-time
   */
  canceled_at?: number | null;
  /*
   * Whether the cardholder was provided with a cancellation policy.
   */
  cancellation_policy_provided?: boolean | null;
  /*
   * Reason for canceling the order.
   *
   * @maxLength 5000
   */
  cancellation_reason?: string | null;
  /*
   * Date when the cardholder expected to receive the product.
   *
   * @format unix-time
   */
  expected_at?: number | null;
  /*
   * Explanation of why the cardholder is disputing this transaction.
   *
   * @maxLength 5000
   */
  explanation?: string | null;
  /*
   * Description of the merchandise or service that was purchased.
   *
   * @maxLength 5000
   */
  product_description?: string | null;
  /*
   * Whether the product was a merchandise or service.
   */
  product_type?: "merchandise" | "service";
  /*
   * Result of cardholder's attempt to return the product.
   */
  return_status?: "merchant_rejected" | "successful";
  /*
   * Date when the product was returned or attempted to be returned.
   *
   * @format unix-time
   */
  returned_at?: number | null;
};

export type IssuingDisputeDuplicateEvidence = {
  /*
   * (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Additional documentation supporting the dispute.
   */
  additional_documentation?: string | File | null;
  /*
   * (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Copy of the card statement showing that the product had already been paid for.
   */
  card_statement?: string | File | null;
  /*
   * (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Copy of the receipt showing that the product had been paid for in cash.
   */
  cash_receipt?: string | File | null;
  /*
   * (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Image of the front and back of the check that was used to pay for the product.
   */
  check_image?: string | File | null;
  /*
   * Explanation of why the cardholder is disputing this transaction.
   *
   * @maxLength 5000
   */
  explanation?: string | null;
  /*
   * Transaction (e.g., ipi_...) that the disputed transaction is a duplicate of. Of the two or more transactions that are copies of each other, this is original undisputed one.
   *
   * @maxLength 5000
   */
  original_transaction?: string | null;
};

export type IssuingDisputeEvidence = {
  canceled?: IssuingDisputeCanceledEvidence;
  duplicate?: IssuingDisputeDuplicateEvidence;
  fraudulent?: IssuingDisputeFraudulentEvidence;
  merchandise_not_as_described?: IssuingDisputeMerchandiseNotAsDescribedEvidence;
  not_received?: IssuingDisputeNotReceivedEvidence;
  other?: IssuingDisputeOtherEvidence;
  /*
   * The reason for filing the dispute. Its value will match the field containing the evidence.
   *
   * @x-stripeBypassValidation true
   */
  reason:
    | "canceled"
    | "duplicate"
    | "fraudulent"
    | "merchandise_not_as_described"
    | "not_received"
    | "other"
    | "service_not_as_described";
  service_not_as_described?: IssuingDisputeServiceNotAsDescribedEvidence;
};

export type IssuingDisputeFraudulentEvidence = {
  /*
   * (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Additional documentation supporting the dispute.
   */
  additional_documentation?: string | File | null;
  /*
   * Explanation of why the cardholder is disputing this transaction.
   *
   * @maxLength 5000
   */
  explanation?: string | null;
};

export type IssuingDisputeMerchandiseNotAsDescribedEvidence = {
  /*
   * (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Additional documentation supporting the dispute.
   */
  additional_documentation?: string | File | null;
  /*
   * Explanation of why the cardholder is disputing this transaction.
   *
   * @maxLength 5000
   */
  explanation?: string | null;
  /*
   * Date when the product was received.
   *
   * @format unix-time
   */
  received_at?: number | null;
  /*
   * Description of the cardholder's attempt to return the product.
   *
   * @maxLength 5000
   */
  return_description?: string | null;
  /*
   * Result of cardholder's attempt to return the product.
   */
  return_status?: "merchant_rejected" | "successful";
  /*
   * Date when the product was returned or attempted to be returned.
   *
   * @format unix-time
   */
  returned_at?: number | null;
};

export type IssuingDisputeNotReceivedEvidence = {
  /*
   * (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Additional documentation supporting the dispute.
   */
  additional_documentation?: string | File | null;
  /*
   * Date when the cardholder expected to receive the product.
   *
   * @format unix-time
   */
  expected_at?: number | null;
  /*
   * Explanation of why the cardholder is disputing this transaction.
   *
   * @maxLength 5000
   */
  explanation?: string | null;
  /*
   * Description of the merchandise or service that was purchased.
   *
   * @maxLength 5000
   */
  product_description?: string | null;
  /*
   * Whether the product was a merchandise or service.
   */
  product_type?: "merchandise" | "service";
};

export type IssuingDisputeOtherEvidence = {
  /*
   * (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Additional documentation supporting the dispute.
   */
  additional_documentation?: string | File | null;
  /*
   * Explanation of why the cardholder is disputing this transaction.
   *
   * @maxLength 5000
   */
  explanation?: string | null;
  /*
   * Description of the merchandise or service that was purchased.
   *
   * @maxLength 5000
   */
  product_description?: string | null;
  /*
   * Whether the product was a merchandise or service.
   */
  product_type?: "merchandise" | "service";
};

export type IssuingDisputeServiceNotAsDescribedEvidence = {
  /*
   * (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Additional documentation supporting the dispute.
   */
  additional_documentation?: string | File | null;
  /*
   * Date when order was canceled.
   *
   * @format unix-time
   */
  canceled_at?: number | null;
  /*
   * Reason for canceling the order.
   *
   * @maxLength 5000
   */
  cancellation_reason?: string | null;
  /*
   * Explanation of why the cardholder is disputing this transaction.
   *
   * @maxLength 5000
   */
  explanation?: string | null;
  /*
   * Date when the product was received.
   *
   * @format unix-time
   */
  received_at?: number | null;
};

export type IssuingTransactionAmountDetails = {
  /*
   * The fee charged by the ATM for the cash withdrawal.
   */
  atm_fee?: number | null;
};

export type IssuingTransactionFlightData = {
  /*
   * The time that the flight departed.
   */
  departure_at?: number | null;
  /*
   * The name of the passenger.
   *
   * @maxLength 5000
   */
  passenger_name?: string | null;
  /*
   * Whether the ticket is refundable.
   */
  refundable?: boolean | null;
  /*
   * The legs of the trip.
   */
  segments?: IssuingTransactionFlightDataLeg[] | null;
  /*
   * The travel agency that issued the ticket.
   *
   * @maxLength 5000
   */
  travel_agency?: string | null;
};

export type IssuingTransactionFlightDataLeg = {
  /*
   * The three-letter IATA airport code of the flight's destination.
   *
   * @maxLength 5000
   */
  arrival_airport_code?: string | null;
  /*
   * The airline carrier code.
   *
   * @maxLength 5000
   */
  carrier?: string | null;
  /*
   * The three-letter IATA airport code that the flight departed from.
   *
   * @maxLength 5000
   */
  departure_airport_code?: string | null;
  /*
   * The flight number.
   *
   * @maxLength 5000
   */
  flight_number?: string | null;
  /*
   * The flight's service class.
   *
   * @maxLength 5000
   */
  service_class?: string | null;
  /*
   * Whether a stopover is allowed on this flight.
   */
  stopover_allowed?: boolean | null;
};

export type IssuingTransactionFuelData = {
  /*
   * The type of fuel that was purchased. One of `diesel`, `unleaded_plus`, `unleaded_regular`, `unleaded_super`, or `other`.
   *
   * @maxLength 5000
   */
  type: string;
  /*
   * The units for `volume_decimal`. One of `us_gallon` or `liter`.
   *
   * @maxLength 5000
   */
  unit: string;
  /*
   * The cost in cents per each unit of fuel, represented as a decimal string with at most 12 decimal places.
   *
   * @format decimal
   */
  unit_cost_decimal: string;
  /*
   * The volume of the fuel that was pumped, represented as a decimal string with at most 12 decimal places.
   *
   * @format decimal
   */
  volume_decimal?: string | null;
};

export type IssuingTransactionLodgingData = {
  /*
   * The time of checking into the lodging.
   */
  check_in_at?: number | null;
  /*
   * The number of nights stayed at the lodging.
   */
  nights?: number | null;
};

export type IssuingTransactionPurchaseDetails = {
  /*
   * Information about the flight that was purchased with this transaction.
   */
  flight?: IssuingTransactionFlightData | null;
  /*
   * Information about fuel that was purchased with this transaction.
   */
  fuel?: IssuingTransactionFuelData | null;
  /*
   * Information about lodging that was purchased with this transaction.
   */
  lodging?: IssuingTransactionLodgingData | null;
  /*
   * The line items in the purchase.
   */
  receipt?: IssuingTransactionReceiptData[] | null;
  /*
   * A merchant-specific order number.
   *
   * @maxLength 5000
   */
  reference?: string | null;
};

export type IssuingTransactionReceiptData = {
  /*
   * The description of the item. The maximum length of this field is 26 characters.
   *
   * @maxLength 5000
   */
  description?: string | null;
  /*
   * The quantity of the item.
   */
  quantity?: number | null;
  /*
   * The total for this line item in cents.
   */
  total?: number | null;
  /*
   * The unit cost of the item in cents.
   */
  unit_cost?: number | null;
};

/**
 * A line item.
 *
 * @x-resourceId item
 */
export type Item = {
  /*
   * Total before any discounts or taxes are applied.
   */
  amount_subtotal: number;
  /*
   * Total after discounts and taxes.
   */
  amount_total: number;
  /*
   * Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
   */
  currency: string;
  /*
   * An arbitrary string attached to the object. Often useful for displaying to users. Defaults to product name.
   *
   * @maxLength 5000
   */
  description: string;
  /*
   * The discounts applied to the line item.
   */
  discounts?: LineItemsDiscountAmount[];
  /*
   * Unique identifier for the object.
   *
   * @maxLength 5000
   */
  id: string;
  /*
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: "item";
  /*
   * The price used to generate the line item.
   */
  price?: Price | null;
  /*
   * The quantity of products being purchased.
   */
  quantity?: number | null;
  /*
   * The taxes applied to the line item.
   */
  taxes?: LineItemsTaxAmount[];
};

export type LegalEntityCompany = {
  address?: Address;
  /*
   * The Kana variation of the company's primary address (Japan only).
   */
  address_kana?: LegalEntityJapanAddress | null;
  /*
   * The Kanji variation of the company's primary address (Japan only).
   */
  address_kanji?: LegalEntityJapanAddress | null;
  /*
   * Whether the company's directors have been provided. This Boolean will be `true` if you've manually indicated that all directors are provided via [the `directors_provided` parameter](https://stripe.com/docs/api/accounts/update#update_account-company-directors_provided).
   */
  directors_provided?: boolean;
  /*
   * Whether the company's executives have been provided. This Boolean will be `true` if you've manually indicated that all executives are provided via [the `executives_provided` parameter](https://stripe.com/docs/api/accounts/update#update_account-company-executives_provided), or if Stripe determined that sufficient executives were provided.
   */
  executives_provided?: boolean;
  /*
   * The company's legal name.
   *
   * @maxLength 5000
   */
  name?: string | null;
  /*
   * The Kana variation of the company's legal name (Japan only).
   *
   * @maxLength 5000
   */
  name_kana?: string | null;
  /*
   * The Kanji variation of the company's legal name (Japan only).
   *
   * @maxLength 5000
   */
  name_kanji?: string | null;
  /*
   * Whether the company's owners have been provided. This Boolean will be `true` if you've manually indicated that all owners are provided via [the `owners_provided` parameter](https://stripe.com/docs/api/accounts/update#update_account-company-owners_provided), or if Stripe determined that sufficient owners were provided. Stripe determines ownership requirements using both the number of owners provided and their total percent ownership (calculated by adding the `percent_ownership` of each owner together).
   */
  owners_provided?: boolean;
  /*
   * The company's phone number (used for verification).
   *
   * @maxLength 5000
   */
  phone?: string | null;
  /*
   * The category identifying the legal structure of the company or legal entity. See [Business structure](https://stripe.com/docs/connect/identity-verification#business-structure) for more details.
   *
   * @x-stripeBypassValidation true
   */
  structure?:
    | "free_zone_establishment"
    | "free_zone_llc"
    | "government_instrumentality"
    | "governmental_unit"
    | "incorporated_non_profit"
    | "limited_liability_partnership"
    | "llc"
    | "multi_member_llc"
    | "private_company"
    | "private_corporation"
    | "private_partnership"
    | "public_company"
    | "public_corporation"
    | "public_partnership"
    | "single_member_llc"
    | "sole_establishment"
    | "sole_proprietorship"
    | "tax_exempt_government_instrumentality"
    | "unincorporated_association"
    | "unincorporated_non_profit";
  /*
   * Whether the company's business ID number was provided.
   */
  tax_id_provided?: boolean;
  /*
   * The jurisdiction in which the `tax_id` is registered (Germany-based companies only).
   *
   * @maxLength 5000
   */
  tax_id_registrar?: string;
  /*
   * Whether the company's business VAT number was provided.
   */
  vat_id_provided?: boolean;
  /*
   * Information on the verification state of the company.
   */
  verification?: LegalEntityCompanyVerification | null;
};

export type LegalEntityCompanyVerification = {
  document: LegalEntityCompanyVerificationDocument;
};

export type LegalEntityCompanyVerificationDocument = {
  /*
   * The back of a document returned by a [file upload](https://stripe.com/docs/api#create_file) with a `purpose` value of `additional_verification`.
   */
  back?: string | File | null;
  /*
   * A user-displayable string describing the verification state of this document.
   *
   * @maxLength 5000
   */
  details?: string | null;
  /*
   * One of `document_corrupt`, `document_expired`, `document_failed_copy`, `document_failed_greyscale`, `document_failed_other`, `document_failed_test_mode`, `document_fraudulent`, `document_incomplete`, `document_invalid`, `document_manipulated`, `document_not_readable`, `document_not_uploaded`, `document_type_not_supported`, or `document_too_large`. A machine-readable code specifying the verification state for this document.
   *
   * @maxLength 5000
   */
  details_code?: string | null;
  /*
   * The front of a document returned by a [file upload](https://stripe.com/docs/api#create_file) with a `purpose` value of `additional_verification`.
   */
  front?: string | File | null;
};

export type LegalEntityDob = {
  /*
   * The day of birth, between 1 and 31.
   */
  day?: number | null;
  /*
   * The month of birth, between 1 and 12.
   */
  month?: number | null;
  /*
   * The four-digit year of birth.
   */
  year?: number | null;
};

export type LegalEntityJapanAddress = {
  /*
   * City/Ward.
   *
   * @maxLength 5000
   */
  city?: string | null;
  /*
   * Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).
   *
   * @maxLength 5000
   */
  country?: string | null;
  /*
   * Block/Building number.
   *
   * @maxLength 5000
   */
  line1?: string | null;
  /*
   * Building details.
   *
   * @maxLength 5000
   */
  line2?: string | null;
  /*
   * ZIP or postal code.
   *
   * @maxLength 5000
   */
  postal_code?: string | null;
  /*
   * Prefecture.
   *
   * @maxLength 5000
   */
  state?: string | null;
  /*
   * Town/cho-me.
   *
   * @maxLength 5000
   */
  town?: string | null;
};

export type LegalEntityPersonVerification = {
  /*
   * A document showing address, either a passport, local ID card, or utility bill from a well-known utility company.
   */
  additional_document?: LegalEntityPersonVerificationDocument | null;
  /*
   * A user-displayable string describing the verification state for the person. For example, this may say "Provided identity information could not be verified".
   *
   * @maxLength 5000
   */
  details?: string | null;
  /*
   * One of `document_address_mismatch`, `document_dob_mismatch`, `document_duplicate_type`, `document_id_number_mismatch`, `document_name_mismatch`, `document_nationality_mismatch`, `failed_keyed_identity`, or `failed_other`. A machine-readable code specifying the verification state for the person.
   *
   * @maxLength 5000
   */
  details_code?: string | null;
  document?: LegalEntityPersonVerificationDocument;
  /*
   * The state of verification for the person. Possible values are `unverified`, `pending`, or `verified`.
   *
   * @maxLength 5000
   */
  status: string;
};

export type LegalEntityPersonVerificationDocument = {
  /*
   * The back of an ID returned by a [file upload](https://stripe.com/docs/api#create_file) with a `purpose` value of `identity_document`.
   */
  back?: string | File | null;
  /*
   * A user-displayable string describing the verification state of this document. For example, if a document is uploaded and the picture is too fuzzy, this may say "Identity document is too unclear to read".
   *
   * @maxLength 5000
   */
  details?: string | null;
  /*
   * One of `document_corrupt`, `document_country_not_supported`, `document_expired`, `document_failed_copy`, `document_failed_other`, `document_failed_test_mode`, `document_fraudulent`, `document_failed_greyscale`, `document_incomplete`, `document_invalid`, `document_manipulated`, `document_missing_back`, `document_missing_front`, `document_not_readable`, `document_not_uploaded`, `document_photo_mismatch`, `document_too_large`, or `document_type_not_supported`. A machine-readable code specifying the verification state for this document.
   *
   * @maxLength 5000
   */
  details_code?: string | null;
  /*
   * The front of an ID returned by a [file upload](https://stripe.com/docs/api#create_file) with a `purpose` value of `identity_document`.
   */
  front?: string | File | null;
};

/**
 * @x-resourceId line_item
 */
export type LineItem = {
  /*
   * The amount, in %s.
   */
  amount: number;
  /*
   * Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
   */
  currency: string;
  /*
   * An arbitrary string attached to the object. Often useful for displaying to users.
   *
   * @maxLength 5000
   */
  description?: string | null;
  /*
   * The amount of discount calculated per discount for this line item.
   */
  discount_amounts?: DiscountsResourceDiscountAmount[] | null;
  /*
   * If true, discounts will apply to this line item. Always false for prorations.
   */
  discountable: boolean;
  /*
   * The discounts applied to the invoice line item. Line item discounts are applied before invoice discounts. Use `expand[]=discounts` to expand each discount.
   */
  discounts?: (string | Discount)[] | null;
  /*
   * Unique identifier for the object.
   *
   * @maxLength 5000
   */
  id: string;
  /*
   * The ID of the [invoice item](https://stripe.com/docs/api/invoiceitems) associated with this line item if any.
   *
   * @maxLength 5000
   */
  invoice_item?: string;
  /*
   * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
   */
  livemode: boolean;
  /*
   * Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Note that for line items with `type=subscription` this will reflect the metadata of the subscription that caused the line item to be created.
   */
  metadata: {
    [key: string]: string;
  };
  /*
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: "line_item";
  period: InvoiceLineItemPeriod;
  /*
   * The price of the line item.
   */
  price?: Price | null;
  /*
   * Whether this is a proration.
   */
  proration: boolean;
  /*
   * The quantity of the subscription, if the line item is a subscription or a proration.
   */
  quantity?: number | null;
  /*
   * The subscription that the invoice item pertains to, if any.
   *
   * @maxLength 5000
   */
  subscription?: string | null;
  /*
   * The subscription item that generated this invoice item. Left empty if the line item is not an explicit result of a subscription.
   *
   * @maxLength 5000
   */
  subscription_item?: string;
  /*
   * The amount of tax calculated per tax rate for this line item
   */
  tax_amounts?: InvoiceTaxAmount[];
  /*
   * The tax rates which apply to the line item.
   */
  tax_rates?: TaxRate[];
  /*
   * A string identifying the type of the source of this line item, either an `invoiceitem` or a `subscription`.
   */
  type: "invoiceitem" | "subscription";
};

export type LineItemsDiscountAmount = {
  /*
   * The amount discounted.
   */
  amount: number;
  discount: Discount;
};

export type LineItemsTaxAmount = {
  /*
   * Amount of tax applied for this rate.
   */
  amount: number;
  rate: TaxRate;
};

/**
 * @x-resourceId login_link
 */
export type LoginLink = {
  /*
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   *
   * @format unix-time
   */
  created: number;
  /*
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: "login_link";
  /*
   * The URL for the login link.
   *
   * @maxLength 5000
   */
  url: string;
};

/**
 * A Mandate is a record of the permission a customer has given you to debit their payment method.
 *
 * @x-resourceId mandate
 */
export type Mandate = {
  customer_acceptance: CustomerAcceptance;
  /*
   * Unique identifier for the object.
   *
   * @maxLength 5000
   */
  id: string;
  /*
   * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
   */
  livemode: boolean;
  multi_use?: MandateMultiUse;
  /*
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: "mandate";
  /*
   * ID of the payment method associated with this mandate.
   */
  payment_method: string | PaymentMethod;
  payment_method_details: MandatePaymentMethodDetails;
  single_use?: MandateSingleUse;
  /*
   * The status of the mandate, which indicates whether it can be used to initiate a payment.
   */
  status: "active" | "inactive" | "pending";
  /*
   * The type of the mandate.
   */
  type: "multi_use" | "single_use";
};

export type MandateAcssDebit = {
  /*
   * Description of the interval. Only required if the 'payment_schedule' parameter is 'interval' or 'combined'.
   *
   * @maxLength 5000
   */
  interval_description?: string | null;
  /*
   * Payment schedule for the mandate.
   */
  payment_schedule: "combined" | "interval" | "sporadic";
  /*
   * Transaction type of the mandate.
   */
  transaction_type: "business" | "personal";
};

export type MandateAuBecsDebit = {
  /*
   * The URL of the mandate. This URL generally contains sensitive information about the customer and should be shared with them exclusively.
   *
   * @maxLength 5000
   */
  url: string;
};

export type MandateBacsDebit = {
  /*
   * The status of the mandate on the Bacs network. Can be one of `pending`, `revoked`, `refused`, or `accepted`.
   */
  network_status: "accepted" | "pending" | "refused" | "revoked";
  /*
   * The unique reference identifying the mandate on the Bacs network.
   *
   * @maxLength 5000
   */
  reference: string;
  /*
   * The URL that will contain the mandate that the customer has signed.
   *
   * @maxLength 5000
   */
  url: string;
};

export type MandateMultiUse = {};

export type MandatePaymentMethodDetails = {
  acss_debit?: MandateAcssDebit;
  au_becs_debit?: MandateAuBecsDebit;
  bacs_debit?: MandateBacsDebit;
  card?: CardMandatePaymentMethodDetails;
  sepa_debit?: MandateSepaDebit;
  /*
   * The type of the payment method associated with this mandate. An additional hash is included on `payment_method_details` with a name matching this value. It contains mandate information specific to the payment method.
   *
   * @maxLength 5000
   */
  type: string;
};

export type MandateSepaDebit = {
  /*
   * The unique reference of the mandate.
   *
   * @maxLength 5000
   */
  reference: string;
  /*
   * The URL of the mandate. This URL generally contains sensitive information about the customer and should be shared with them exclusively.
   *
   * @maxLength 5000
   */
  url: string;
};

export type MandateSingleUse = {
  /*
   * On a single use mandate, the amount of the payment.
   */
  amount: number;
  /*
   * On a single use mandate, the currency of the payment.
   */
  currency: string;
};

export type Networks = {
  /*
   * All available networks for the card.
   */
  available: string[];
  /*
   * The preferred network for the card.
   *
   * @maxLength 5000
   */
  preferred?: string | null;
};

export type NotificationEventData = {
  /*
   * Object containing the API resource relevant to the event. For example, an `invoice.created` event will have a full [invoice object](https://stripe.com/docs/api#invoice_object) as the value of the object key.
   */
  object: Record<string, any>;
  /*
   * Object containing the names of the attributes that have changed, and their previous values (sent along only with *.updated events).
   */
  previous_attributes?: Record<string, any>;
};

export type NotificationEventRequest = {
  /*
   * ID of the API request that caused the event. If null, the event was automatic (e.g., Stripe's automatic subscription handling). Request logs are available in the [dashboard](https://dashboard.stripe.com/logs), but currently not in the API.
   *
   * @maxLength 5000
   */
  id?: string | null;
  /*
   * The idempotency key transmitted during the request, if any. *Note: This property is populated only for events on or after May 23, 2017*.
   *
   * @maxLength 5000
   */
  idempotency_key?: string | null;
};

export type OfflineAcceptance = {};

export type OnlineAcceptance = {
  /*
   * The IP address from which the Mandate was accepted by the customer.
   *
   * @maxLength 5000
   */
  ip_address?: string | null;
  /*
   * The user agent of the browser from which the Mandate was accepted by the customer.
   *
   * @maxLength 5000
   */
  user_agent?: string | null;
};

/**
 * Order objects are created to handle end customers' purchases of previously
 * defined [products](https://stripe.com/docs/api#products). You can create, retrieve, and pay individual orders, as well
 * as list all orders. Orders are identified by a unique, random ID.
 *
 * Related guide: [Tax, Shipping, and Inventory](https://stripe.com/docs/orders).
 *
 * @x-resourceId order
 */
export type Order = {
  /*
   * A positive integer in the smallest currency unit (that is, 100 cents for $1.00, or 1 for ¥1, Japanese Yen being a zero-decimal currency) representing the total amount for the order.
   */
  amount: number;
  /*
   * The total amount that was returned to the customer.
   */
  amount_returned?: number | null;
  /*
   * ID of the Connect Application that created the order.
   *
   * @maxLength 5000
   */
  application?: string | null;
  /*
   * A fee in cents that will be applied to the order and transferred to the application owner’s Stripe account. The request must be made with an OAuth key or the Stripe-Account header in order to take an application fee. For more information, see the application fees documentation.
   */
  application_fee?: number | null;
  /*
   * The ID of the payment used to pay for the order. Present if the order status is `paid`, `fulfilled`, or `refunded`.
   */
  charge?: string | Charge | null;
  /*
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   *
   * @format unix-time
   */
  created: number;
  /*
   * Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
   */
  currency: string;
  /*
   * The customer used for the order.
   */
  customer?: string | Customer | DeletedCustomer | null;
  /*
   * The email address of the customer placing the order.
   *
   * @maxLength 5000
   */
  email?: string | null;
  /*
   * External coupon code to load for this order.
   *
   * @maxLength 5000
   */
  external_coupon_code?: string;
  /*
   * Unique identifier for the object.
   *
   * @maxLength 5000
   */
  id: string;
  /*
   * List of items constituting the order. An order can have up to 25 items.
   */
  items: OrderItem[];
  /*
   * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
   */
  livemode: boolean;
  /*
   * Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
   */
  metadata?: {
    [key: string]: string;
  } | null;
  /*
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: "order";
  /*
   * A list of returns that have taken place for this order.
   */
  returns?: {
    /*
     * Details about each object.
     */
    data: OrderReturn[];
    /*
     * True if this list has another page of items after this one that can be fetched.
     */
    has_more: boolean;
    /*
     * String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
     */
    object: "list";
    /*
     * The URL where this list can be accessed.
     *
     * @maxLength 5000
     */
    url: string;
  } | null;
  /*
   * The shipping method that is currently selected for this order, if any. If present, it is equal to one of the `id`s of shipping methods in the `shipping_methods` array. At order creation time, if there are multiple shipping methods, Stripe will automatically selected the first method.
   *
   * @maxLength 5000
   */
  selected_shipping_method?: string | null;
  /*
   * The shipping address for the order. Present if the order is for goods to be shipped.
   */
  shipping?: Shipping | null;
  /*
   * A list of supported shipping methods for this order. The desired shipping method can be specified either by updating the order, or when paying it.
   */
  shipping_methods?: ShippingMethod[] | null;
  /*
   * Current order status. One of `created`, `paid`, `canceled`, `fulfilled`, or `returned`. More details in the [Orders Guide](https://stripe.com/docs/orders/guide#understanding-order-statuses).
   *
   * @maxLength 5000
   */
  status: string;
  /*
   * The timestamps at which the order status was updated.
   */
  status_transitions?: StatusTransitions | null;
  /*
   * Time at which the object was last updated. Measured in seconds since the Unix epoch.
   *
   * @format unix-time
   */
  updated?: number | null;
  /*
   * The user's order ID if it is different from the Stripe order ID.
   *
   * @maxLength 5000
   */
  upstream_id?: string;
};

/**
 * A representation of the constituent items of any given order. Can be used to
 * represent [SKUs](https://stripe.com/docs/api#skus), shipping costs, or taxes owed on the order.
 *
 * Related guide: [Orders](https://stripe.com/docs/orders/guide).
 */
export type OrderItem = {
  /*
   * A positive integer in the smallest currency unit (that is, 100 cents for $1.00, or 1 for ¥1, Japanese Yen being a zero-decimal currency) representing the total amount for the line item.
   */
  amount: number;
  /*
   * Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
   */
  currency: string;
  /*
   * Description of the line item, meant to be displayable to the user (e.g., `"Express shipping"`).
   *
   * @maxLength 5000
   */
  description: string;
  /*
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: "order_item";
  /*
   * The ID of the associated object for this line item. Expandable if not null (e.g., expandable to a SKU).
   */
  parent?: string | Sku | null;
  /*
   * A positive integer representing the number of instances of `parent` that are included in this order item. Applicable/present only if `type` is `sku`.
   */
  quantity?: number | null;
  /*
   * The type of line item. One of `sku`, `tax`, `shipping`, or `discount`.
   *
   * @maxLength 5000
   */
  type: string;
};

/**
 * A return represents the full or partial return of a number of [order items](https://stripe.com/docs/api#order_items).
 * Returns always belong to an order, and may optionally contain a refund.
 *
 * Related guide: [Handling Returns](https://stripe.com/docs/orders/guide#handling-returns).
 *
 * @x-resourceId order_return
 */
export type OrderReturn = {
  /*
   * A positive integer in the smallest currency unit (that is, 100 cents for $1.00, or 1 for ¥1, Japanese Yen being a zero-decimal currency) representing the total amount for the returned line item.
   */
  amount: number;
  /*
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   *
   * @format unix-time
   */
  created: number;
  /*
   * Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
   */
  currency: string;
  /*
   * Unique identifier for the object.
   *
   * @maxLength 5000
   */
  id: string;
  /*
   * The items included in this order return.
   */
  items: OrderItem[];
  /*
   * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
   */
  livemode: boolean;
  /*
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: "order_return";
  /*
   * The order that this return includes items from.
   */
  order?: string | Order | null;
  /*
   * The ID of the refund issued for this return.
   */
  refund?: string | Refund | null;
};

export type PackageDimensions = {
  /*
   * Height, in inches.
   */
  height: number;
  /*
   * Length, in inches.
   */
  length: number;
  /*
   * Weight, in ounces.
   */
  weight: number;
  /*
   * Width, in inches.
   */
  width: number;
};

export type PaymentFlowsPrivatePaymentMethodsAlipay = {};

export type PaymentFlowsPrivatePaymentMethodsAlipayDetails = {
  /*
   * Uniquely identifies this particular Alipay account. You can use this attribute to check whether two Alipay accounts are the same.
   *
   * @maxLength 5000
   */
  fingerprint?: string | null;
  /*
   * Transaction ID of this particular Alipay transaction.
   *
   * @maxLength 5000
   */
  transaction_id?: string | null;
};

/**
 * A PaymentIntent guides you through the process of collecting a payment from your customer.
 * We recommend that you create exactly one PaymentIntent for each order or
 * customer session in your system. You can reference the PaymentIntent later to
 * see the history of payment attempts for a particular session.
 *
 * A PaymentIntent transitions through
 * [multiple statuses](https://stripe.com/docs/payments/intents#intent-statuses)
 * throughout its lifetime as it interfaces with Stripe.js to perform
 * authentication flows and ultimately creates at most one successful charge.
 *
 * Related guide: [Payment Intents API](https://stripe.com/docs/payments/payment-intents).
 *
 * @x-resourceId payment_intent
 */
export type PaymentIntent = {
  /*
   * Amount intended to be collected by this PaymentIntent. A positive integer representing how much to charge in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal) (e.g., 100 cents to charge $1.00 or 100 to charge ¥100, a zero-decimal currency). The minimum amount is $0.50 US or [equivalent in charge currency](https://stripe.com/docs/currencies#minimum-and-maximum-charge-amounts). The amount value supports up to eight digits (e.g., a value of 99999999 for a USD charge of $999,999.99).
   */
  amount: number;
  /*
   * Amount that can be captured from this PaymentIntent.
   */
  amount_capturable?: number;
  /*
   * Amount that was collected by this PaymentIntent.
   */
  amount_received?: number;
  /*
   * ID of the Connect application that created the PaymentIntent.
   */
  application?: string | Application | null;
  /*
   * The amount of the application fee (if any) that will be requested to be applied to the payment and transferred to the application owner's Stripe account. The amount of the application fee collected will be capped at the total payment amount. For more information, see the PaymentIntents [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts).
   */
  application_fee_amount?: number | null;
  /*
   * Populated when `status` is `canceled`, this is the time at which the PaymentIntent was canceled. Measured in seconds since the Unix epoch.
   *
   * @format unix-time
   */
  canceled_at?: number | null;
  /*
   * Reason for cancellation of this PaymentIntent, either user-provided (`duplicate`, `fraudulent`, `requested_by_customer`, or `abandoned`) or generated by Stripe internally (`failed_invoice`, `void_invoice`, or `automatic`).
   */
  cancellation_reason?:
    | "abandoned"
    | "automatic"
    | "duplicate"
    | "failed_invoice"
    | "fraudulent"
    | "requested_by_customer"
    | "void_invoice";
  /*
   * Controls when the funds will be captured from the customer's account.
   */
  capture_method: "automatic" | "manual";
  /*
   * Charges that were created by this PaymentIntent, if any.
   */
  charges?: {
    /*
     * This list only contains the latest charge, even if there were previously multiple unsuccessful charges. To view all previous charges for a PaymentIntent, you can filter the charges list using the `payment_intent` [parameter](https://stripe.com/docs/api/charges/list#list_charges-payment_intent).
     */
    data: Charge[];
    /*
     * True if this list has another page of items after this one that can be fetched.
     */
    has_more: boolean;
    /*
     * String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
     */
    object: "list";
    /*
     * The URL where this list can be accessed.
     *
     * @maxLength 5000
     */
    url: string;
  };
  /*
   * The client secret of this PaymentIntent. Used for client-side retrieval using a publishable key.
   *
   * The client secret can be used to complete a payment from your frontend. It should not be stored, logged, embedded in URLs, or exposed to anyone other than the customer. Make sure that you have TLS enabled on any page that includes the client secret.
   *
   * Refer to our docs to [accept a payment](https://stripe.com/docs/payments/accept-a-payment?integration=elements) and learn about how `client_secret` should be handled.
   *
   * @maxLength 5000
   */
  client_secret?: string | null;
  confirmation_method: "automatic" | "manual";
  /*
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   *
   * @format unix-time
   */
  created: number;
  /*
   * Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
   */
  currency: string;
  /*
   * ID of the Customer this PaymentIntent belongs to, if one exists.
   *
   * Payment methods attached to other Customers cannot be used with this PaymentIntent.
   *
   * If present in combination with [setup_future_usage](https://stripe.com/docs/api#payment_intent_object-setup_future_usage), this PaymentIntent's payment method will be attached to the Customer after the PaymentIntent has been confirmed and any required actions from the user are complete.
   */
  customer?: string | Customer | DeletedCustomer | null;
  /*
   * An arbitrary string attached to the object. Often useful for displaying to users.
   *
   * @maxLength 5000
   */
  description?: string | null;
  /*
   * Unique identifier for the object.
   *
   * @maxLength 5000
   */
  id: string;
  /*
   * ID of the invoice that created this PaymentIntent, if it exists.
   */
  invoice?: string | Invoice | null;
  /*
   * The payment error encountered in the previous PaymentIntent confirmation. It will be cleared if the PaymentIntent is later updated for any reason.
   */
  last_payment_error?: ApiErrors | null;
  /*
   * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
   */
  livemode: boolean;
  /*
   * Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. For more information, see the [documentation](https://stripe.com/docs/payments/payment-intents/creating-payment-intents#storing-information-in-metadata).
   */
  metadata?: {
    [key: string]: string;
  };
  /*
   * If present, this property tells you what actions you need to take in order for your customer to fulfill a payment using the provided source.
   */
  next_action?: PaymentIntentNextAction | null;
  /*
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: "payment_intent";
  /*
   * The account (if any) for which the funds of the PaymentIntent are intended. See the PaymentIntents [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts) for details.
   */
  on_behalf_of?: string | Account | null;
  /*
   * ID of the payment method used in this PaymentIntent.
   */
  payment_method?: string | PaymentMethod | null;
  /*
   * Payment-method-specific configuration for this PaymentIntent.
   */
  payment_method_options?: PaymentIntentPaymentMethodOptions | null;
  /*
   * The list of payment method types (e.g. card) that this PaymentIntent is allowed to use.
   */
  payment_method_types: string[];
  /*
   * Email address that the receipt for the resulting payment will be sent to. If `receipt_email` is specified for a payment in live mode, a receipt will be sent regardless of your [email settings](https://dashboard.stripe.com/account/emails).
   *
   * @maxLength 5000
   */
  receipt_email?: string | null;
  /*
   * ID of the review associated with this PaymentIntent, if any.
   */
  review?: string | Review | null;
  /*
   * Indicates that you intend to make future payments with this PaymentIntent's payment method.
   *
   * Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
   *
   * When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
   */
  setup_future_usage?: "off_session" | "on_session";
  /*
   * Shipping information for this PaymentIntent.
   */
  shipping?: Shipping | null;
  /*
   * For non-card charges, you can use this value as the complete description that appears on your customers’ statements. Must contain at least one letter, maximum 22 characters.
   *
   * @maxLength 5000
   */
  statement_descriptor?: string | null;
  /*
   * Provides information about a card payment that customers see on their statements. Concatenated with the prefix (shortened descriptor) or statement descriptor that’s set on the account to form the complete statement descriptor. Maximum 22 characters for the concatenated descriptor.
   *
   * @maxLength 5000
   */
  statement_descriptor_suffix?: string | null;
  /*
   * Status of this PaymentIntent, one of `requires_payment_method`, `requires_confirmation`, `requires_action`, `processing`, `requires_capture`, `canceled`, or `succeeded`. Read more about each PaymentIntent [status](https://stripe.com/docs/payments/intents#intent-statuses).
   */
  status:
    | "canceled"
    | "processing"
    | "requires_action"
    | "requires_capture"
    | "requires_confirmation"
    | "requires_payment_method"
    | "succeeded";
  /*
   * The data with which to automatically create a Transfer when the payment is finalized. See the PaymentIntents [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts) for details.
   */
  transfer_data?: TransferData | null;
  /*
   * A string that identifies the resulting payment as part of a group. See the PaymentIntents [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts) for details.
   *
   * @maxLength 5000
   */
  transfer_group?: string | null;
};

export type PaymentIntentNextAction = {
  alipay_handle_redirect?: PaymentIntentNextActionAlipayHandleRedirect;
  boleto_display_details?: PaymentIntentNextActionBoleto;
  oxxo_display_details?: PaymentIntentNextActionDisplayOxxoDetails;
  redirect_to_url?: PaymentIntentNextActionRedirectToUrl;
  /*
   * Type of the next action to perform, one of `redirect_to_url`, `use_stripe_sdk`, `alipay_handle_redirect`, or `oxxo_display_details`.
   *
   * @maxLength 5000
   */
  type: string;
  /*
   * When confirming a PaymentIntent with Stripe.js, Stripe.js depends on the contents of this dictionary to invoke authentication flows. The shape of the contents is subject to change and is only intended to be used by Stripe.js.
   */
  use_stripe_sdk?: Record<string, any>;
  verify_with_microdeposits?: PaymentIntentNextActionVerifyWithMicrodeposits;
  wechat_pay_display_qr_code?: PaymentIntentNextActionWechatPayDisplayQrCode;
  wechat_pay_redirect_to_android_app?: PaymentIntentNextActionWechatPayRedirectToAndroidApp;
  wechat_pay_redirect_to_ios_app?: PaymentIntentNextActionWechatPayRedirectToIosApp;
};

export type PaymentIntentNextActionAlipayHandleRedirect = {
  /*
   * The native data to be used with Alipay SDK you must redirect your customer to in order to authenticate the payment in an Android App.
   *
   * @maxLength 5000
   */
  native_data?: string | null;
  /*
   * The native URL you must redirect your customer to in order to authenticate the payment in an iOS App.
   *
   * @maxLength 5000
   */
  native_url?: string | null;
  /*
   * If the customer does not exit their browser while authenticating, they will be redirected to this specified URL after completion.
   *
   * @maxLength 5000
   */
  return_url?: string | null;
  /*
   * The URL you must redirect your customer to in order to authenticate the payment.
   *
   * @maxLength 5000
   */
  url?: string | null;
};

export type PaymentIntentNextActionBoleto = {
  /*
   * The timestamp after which the boleto expires.
   *
   * @format unix-time
   */
  expires_at?: number | null;
  /*
   * The URL to the hosted boleto voucher page, which allows customers to view the boleto voucher.
   *
   * @maxLength 5000
   */
  hosted_voucher_url?: string | null;
  /*
   * The boleto number.
   *
   * @maxLength 5000
   */
  number?: string | null;
  /*
   * The URL to the downloadable boleto voucher PDF.
   *
   * @maxLength 5000
   */
  pdf?: string | null;
};

export type PaymentIntentNextActionDisplayOxxoDetails = {
  /*
   * The timestamp after which the OXXO voucher expires.
   *
   * @format unix-time
   */
  expires_after?: number | null;
  /*
   * The URL for the hosted OXXO voucher page, which allows customers to view and print an OXXO voucher.
   *
   * @maxLength 5000
   */
  hosted_voucher_url?: string | null;
  /*
   * OXXO reference number.
   *
   * @maxLength 5000
   */
  number?: string | null;
};

export type PaymentIntentNextActionRedirectToUrl = {
  /*
   * If the customer does not exit their browser while authenticating, they will be redirected to this specified URL after completion.
   *
   * @maxLength 5000
   */
  return_url?: string | null;
  /*
   * The URL you must redirect your customer to in order to authenticate the payment.
   *
   * @maxLength 5000
   */
  url?: string | null;
};

export type PaymentIntentNextActionVerifyWithMicrodeposits = {
  /*
   * The timestamp when the microdeposits are expected to land.
   *
   * @format unix-time
   */
  arrival_date: number;
  /*
   * The URL for the hosted verification page, which allows customers to verify their bank account.
   *
   * @maxLength 5000
   */
  hosted_verification_url: string;
};

export type PaymentIntentNextActionWechatPayDisplayQrCode = {
  /*
   * The data being used to generate QR code
   *
   * @maxLength 5000
   */
  data: string;
  /*
   * The base64 image data for a pre-generated QR code
   *
   * @maxLength 5000
   */
  image_data_url: string;
};

export type PaymentIntentNextActionWechatPayRedirectToAndroidApp = {
  /*
   * app_id is the APP ID registered on WeChat open platform
   *
   * @maxLength 5000
   */
  app_id: string;
  /*
   * nonce_str is a random string
   *
   * @maxLength 5000
   */
  nonce_str: string;
  /*
   * package is static value
   *
   * @maxLength 5000
   */
  package: string;
  /*
   * an unique merchant ID assigned by Wechat Pay
   *
   * @maxLength 5000
   */
  partner_id: string;
  /*
   * an unique trading ID assigned by Wechat Pay
   *
   * @maxLength 5000
   */
  prepay_id: string;
  /*
   * A signature
   *
   * @maxLength 5000
   */
  sign: string;
  /*
   * Specifies the current time in epoch format
   *
   * @maxLength 5000
   */
  timestamp: string;
};

export type PaymentIntentNextActionWechatPayRedirectToIosApp = {
  /*
   * An universal link that redirect to Wechat Pay APP
   *
   * @maxLength 5000
   */
  native_url: string;
};

export type PaymentIntentPaymentMethodOptions = {
  acss_debit?: PaymentIntentPaymentMethodOptionsAcssDebit;
  afterpay_clearpay?: PaymentMethodOptionsAfterpayClearpay;
  alipay?: PaymentMethodOptionsAlipay;
  bancontact?: PaymentMethodOptionsBancontact;
  boleto?: PaymentMethodOptionsBoleto;
  card?: PaymentIntentPaymentMethodOptionsCard;
  card_present?: PaymentMethodOptionsCardPresent;
  ideal?: PaymentMethodOptionsIdeal;
  oxxo?: PaymentMethodOptionsOxxo;
  p24?: PaymentMethodOptionsP24;
  sepa_debit?: PaymentIntentPaymentMethodOptionsSepaDebit;
  sofort?: PaymentMethodOptionsSofort;
  wechat_pay?: PaymentMethodOptionsWechatPay;
};

export type PaymentIntentPaymentMethodOptionsAcssDebit = {
  mandate_options?: PaymentIntentPaymentMethodOptionsMandateOptionsAcssDebit;
  /*
   * Bank account verification method.
   *
   * @x-stripeBypassValidation true
   */
  verification_method?: "automatic" | "instant" | "microdeposits";
};

export type PaymentIntentPaymentMethodOptionsCard = {
  /*
   * Installment details for this payment (Mexico only).
   *
   * For more information, see the [installments integration guide](https://stripe.com/docs/payments/installments).
   */
  installments?: PaymentMethodOptionsCardInstallments | null;
  /*
   * Selected network to process this payment intent on. Depends on the available networks of the card attached to the payment intent. Can be only set confirm-time.
   */
  network?:
    | "amex"
    | "cartes_bancaires"
    | "diners"
    | "discover"
    | "interac"
    | "jcb"
    | "mastercard"
    | "unionpay"
    | "unknown"
    | "visa";
  /*
   * We strongly recommend that you rely on our SCA Engine to automatically prompt your customers for authentication based on risk level and [other requirements](https://stripe.com/docs/strong-customer-authentication). However, if you wish to request 3D Secure based on logic from your own fraud engine, provide this option. Permitted values include: `automatic` or `any`. If not provided, defaults to `automatic`. Read our guide on [manually requesting 3D Secure](https://stripe.com/docs/payments/3d-secure#manual-three-ds) for more information on how this configuration interacts with Radar and our SCA Engine.
   */
  request_three_d_secure?: "any" | "automatic" | "challenge_only";
};

export type PaymentIntentPaymentMethodOptionsMandateOptionsAcssDebit = {
  /*
   * A URL for custom mandate text
   *
   * @maxLength 5000
   */
  custom_mandate_url?: string;
  /*
   * Description of the interval. Only required if the 'payment_schedule' parameter is 'interval' or 'combined'.
   *
   * @maxLength 5000
   */
  interval_description?: string | null;
  /*
   * Payment schedule for the mandate.
   */
  payment_schedule?: "combined" | "interval" | "sporadic";
  /*
   * Transaction type of the mandate.
   */
  transaction_type?: "business" | "personal";
};

export type PaymentIntentPaymentMethodOptionsMandateOptionsSepaDebit = {};

export type PaymentIntentPaymentMethodOptionsSepaDebit = {
  mandate_options?: PaymentIntentPaymentMethodOptionsMandateOptionsSepaDebit;
};

/**
 * PaymentMethod objects represent your customer's payment instruments.
 * They can be used with [PaymentIntents](https://stripe.com/docs/payments/payment-intents) to collect payments or saved to
 * Customer objects to store instrument details for future payments.
 *
 * Related guides: [Payment Methods](https://stripe.com/docs/payments/payment-methods) and [More Payment Scenarios](https://stripe.com/docs/payments/more-payment-scenarios).
 *
 * @x-resourceId payment_method
 */
export type PaymentMethod = {
  acss_debit?: PaymentMethodAcssDebit;
  afterpay_clearpay?: PaymentMethodAfterpayClearpay;
  alipay?: PaymentFlowsPrivatePaymentMethodsAlipay;
  au_becs_debit?: PaymentMethodAuBecsDebit;
  bacs_debit?: PaymentMethodBacsDebit;
  bancontact?: PaymentMethodBancontact;
  billing_details: BillingDetails;
  boleto?: PaymentMethodBoleto;
  card?: PaymentMethodCard;
  card_present?: PaymentMethodCardPresent;
  /*
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   *
   * @format unix-time
   */
  created: number;
  /*
   * The ID of the Customer to which this PaymentMethod is saved. This will not be set when the PaymentMethod has not been saved to a Customer.
   */
  customer?: string | Customer | null;
  eps?: PaymentMethodEps;
  fpx?: PaymentMethodFpx;
  giropay?: PaymentMethodGiropay;
  grabpay?: PaymentMethodGrabpay;
  /*
   * Unique identifier for the object.
   *
   * @maxLength 5000
   */
  id: string;
  ideal?: PaymentMethodIdeal;
  interac_present?: PaymentMethodInteracPresent;
  /*
   * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
   */
  livemode: boolean;
  /*
   * Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
   */
  metadata?: {
    [key: string]: string;
  } | null;
  /*
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: "payment_method";
  oxxo?: PaymentMethodOxxo;
  p24?: PaymentMethodP24;
  sepa_debit?: PaymentMethodSepaDebit;
  sofort?: PaymentMethodSofort;
  /*
   * The type of the PaymentMethod. An additional hash is included on the PaymentMethod with a name matching this value. It contains additional information specific to the PaymentMethod type.
   *
   * @x-stripeBypassValidation true
   */
  type:
    | "acss_debit"
    | "afterpay_clearpay"
    | "alipay"
    | "au_becs_debit"
    | "bacs_debit"
    | "bancontact"
    | "boleto"
    | "card"
    | "card_present"
    | "eps"
    | "fpx"
    | "giropay"
    | "grabpay"
    | "ideal"
    | "interac_present"
    | "oxxo"
    | "p24"
    | "sepa_debit"
    | "sofort"
    | "wechat_pay";
  wechat_pay?: PaymentMethodWechatPay;
};

export type PaymentMethodAcssDebit = {
  /*
   * Name of the bank associated with the bank account.
   *
   * @maxLength 5000
   */
  bank_name?: string | null;
  /*
   * Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same.
   *
   * @maxLength 5000
   */
  fingerprint?: string | null;
  /*
   * Institution number of the bank account.
   *
   * @maxLength 5000
   */
  institution_number?: string | null;
  /*
   * Last four digits of the bank account number.
   *
   * @maxLength 5000
   */
  last4?: string | null;
  /*
   * Transit number of the bank account.
   *
   * @maxLength 5000
   */
  transit_number?: string | null;
};

export type PaymentMethodAfterpayClearpay = {};

export type PaymentMethodAuBecsDebit = {
  /*
   * Six-digit number identifying bank and branch associated with this bank account.
   *
   * @maxLength 5000
   */
  bsb_number?: string | null;
  /*
   * Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same.
   *
   * @maxLength 5000
   */
  fingerprint?: string | null;
  /*
   * Last four digits of the bank account number.
   *
   * @maxLength 5000
   */
  last4?: string | null;
};

export type PaymentMethodBacsDebit = {
  /*
   * Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same.
   *
   * @maxLength 5000
   */
  fingerprint?: string | null;
  /*
   * Last four digits of the bank account number.
   *
   * @maxLength 5000
   */
  last4?: string | null;
  /*
   * Sort code of the bank account. (e.g., `10-20-30`)
   *
   * @maxLength 5000
   */
  sort_code?: string | null;
};

export type PaymentMethodBancontact = {};

export type PaymentMethodBoleto = {
  /*
   * Uniquely identifies the customer tax id (CNPJ or CPF)
   *
   * @maxLength 5000
   */
  tax_id: string;
};

export type PaymentMethodCard = {
  /*
   * Card brand. Can be `amex`, `diners`, `discover`, `jcb`, `mastercard`, `unionpay`, `visa`, or `unknown`.
   *
   * @maxLength 5000
   */
  brand: string;
  /*
   * Checks on Card address and CVC if provided.
   */
  checks?: PaymentMethodCardChecks | null;
  /*
   * Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you've collected.
   *
   * @maxLength 5000
   */
  country?: string | null;
  /*
   * Two-digit number representing the card's expiration month.
   */
  exp_month: number;
  /*
   * Four-digit number representing the card's expiration year.
   */
  exp_year: number;
  /*
   * Uniquely identifies this particular card number. You can use this attribute to check whether two customers who’ve signed up with you are using the same card number, for example. For payment methods that tokenize card information (Apple Pay, Google Pay), the tokenized number might be provided instead of the underlying card number.
   *
   * *Starting May 1, 2021, card fingerprint in India for Connect will change to allow two fingerprints for the same card --- one for India and one for the rest of the world.*
   *
   * @maxLength 5000
   */
  fingerprint?: string | null;
  /*
   * Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`.
   *
   * @maxLength 5000
   */
  funding: string;
  /*
   * Details of the original PaymentMethod that created this object.
   */
  generated_from?: PaymentMethodCardGeneratedCard | null;
  /*
   * The last four digits of the card.
   *
   * @maxLength 5000
   */
  last4: string;
  /*
   * Contains information about card networks that can be used to process the payment.
   */
  networks?: Networks | null;
  /*
   * Contains details on how this Card maybe be used for 3D Secure authentication.
   */
  three_d_secure_usage?: ThreeDSecureUsage | null;
  /*
   * If this Card is part of a card wallet, this contains the details of the card wallet.
   */
  wallet?: PaymentMethodCardWallet | null;
};

export type PaymentMethodCardChecks = {
  /*
   * If a address line1 was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`.
   *
   * @maxLength 5000
   */
  address_line1_check?: string | null;
  /*
   * If a address postal code was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`.
   *
   * @maxLength 5000
   */
  address_postal_code_check?: string | null;
  /*
   * If a CVC was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`.
   *
   * @maxLength 5000
   */
  cvc_check?: string | null;
};

export type PaymentMethodCardGeneratedCard = {
  /*
   * The charge that created this object.
   *
   * @maxLength 5000
   */
  charge?: string | null;
  /*
   * Transaction-specific details of the payment method used in the payment.
   */
  payment_method_details?: CardGeneratedFromPaymentMethodDetails | null;
  /*
   * The ID of the SetupAttempt that generated this PaymentMethod, if any.
   */
  setup_attempt?: string | SetupAttempt | null;
};

export type PaymentMethodCardPresent = {};

export type PaymentMethodCardWallet = {
  amex_express_checkout?: PaymentMethodCardWalletAmexExpressCheckout;
  apple_pay?: PaymentMethodCardWalletApplePay;
  /*
   * (For tokenized numbers only.) The last four digits of the device account number.
   *
   * @maxLength 5000
   */
  dynamic_last4?: string | null;
  google_pay?: PaymentMethodCardWalletGooglePay;
  masterpass?: PaymentMethodCardWalletMasterpass;
  samsung_pay?: PaymentMethodCardWalletSamsungPay;
  /*
   * The type of the card wallet, one of `amex_express_checkout`, `apple_pay`, `google_pay`, `masterpass`, `samsung_pay`, or `visa_checkout`. An additional hash is included on the Wallet subhash with a name matching this value. It contains additional information specific to the card wallet type.
   */
  type:
    | "amex_express_checkout"
    | "apple_pay"
    | "google_pay"
    | "masterpass"
    | "samsung_pay"
    | "visa_checkout";
  visa_checkout?: PaymentMethodCardWalletVisaCheckout;
};

export type PaymentMethodCardWalletAmexExpressCheckout = {};

export type PaymentMethodCardWalletApplePay = {};

export type PaymentMethodCardWalletGooglePay = {};

export type PaymentMethodCardWalletMasterpass = {
  /*
   * Owner's verified billing address. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated.
   */
  billing_address?: Address | null;
  /*
   * Owner's verified email. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated.
   *
   * @maxLength 5000
   */
  email?: string | null;
  /*
   * Owner's verified full name. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated.
   *
   * @maxLength 5000
   */
  name?: string | null;
  /*
   * Owner's verified shipping address. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated.
   */
  shipping_address?: Address | null;
};

export type PaymentMethodCardWalletSamsungPay = {};

export type PaymentMethodCardWalletVisaCheckout = {
  /*
   * Owner's verified billing address. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated.
   */
  billing_address?: Address | null;
  /*
   * Owner's verified email. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated.
   *
   * @maxLength 5000
   */
  email?: string | null;
  /*
   * Owner's verified full name. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated.
   *
   * @maxLength 5000
   */
  name?: string | null;
  /*
   * Owner's verified shipping address. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated.
   */
  shipping_address?: Address | null;
};

export type PaymentMethodDetails = {
  ach_credit_transfer?: PaymentMethodDetailsAchCreditTransfer;
  ach_debit?: PaymentMethodDetailsAchDebit;
  acss_debit?: PaymentMethodDetailsAcssDebit;
  afterpay_clearpay?: PaymentMethodDetailsAfterpayClearpay;
  alipay?: PaymentFlowsPrivatePaymentMethodsAlipayDetails;
  au_becs_debit?: PaymentMethodDetailsAuBecsDebit;
  bacs_debit?: PaymentMethodDetailsBacsDebit;
  bancontact?: PaymentMethodDetailsBancontact;
  boleto?: PaymentMethodDetailsBoleto;
  card?: PaymentMethodDetailsCard;
  card_present?: PaymentMethodDetailsCardPresent;
  eps?: PaymentMethodDetailsEps;
  fpx?: PaymentMethodDetailsFpx;
  giropay?: PaymentMethodDetailsGiropay;
  grabpay?: PaymentMethodDetailsGrabpay;
  ideal?: PaymentMethodDetailsIdeal;
  interac_present?: PaymentMethodDetailsInteracPresent;
  klarna?: PaymentMethodDetailsKlarna;
  multibanco?: PaymentMethodDetailsMultibanco;
  oxxo?: PaymentMethodDetailsOxxo;
  p24?: PaymentMethodDetailsP24;
  sepa_debit?: PaymentMethodDetailsSepaDebit;
  sofort?: PaymentMethodDetailsSofort;
  stripe_account?: PaymentMethodDetailsStripeAccount;
  /*
   * The type of transaction-specific details of the payment method used in the payment, one of `ach_credit_transfer`, `ach_debit`, `acss_debit`, `alipay`, `au_becs_debit`, `bancontact`, `card`, `card_present`, `eps`, `giropay`, `ideal`, `klarna`, `multibanco`, `p24`, `sepa_debit`, `sofort`, `stripe_account`, or `wechat`.
   * An additional hash is included on `payment_method_details` with a name matching this value.
   * It contains information specific to the payment method.
   *
   * @maxLength 5000
   */
  type: string;
  wechat?: PaymentMethodDetailsWechat;
  wechat_pay?: PaymentMethodDetailsWechatPay;
};

export type PaymentMethodDetailsAchCreditTransfer = {
  /*
   * Account number to transfer funds to.
   *
   * @maxLength 5000
   */
  account_number?: string | null;
  /*
   * Name of the bank associated with the routing number.
   *
   * @maxLength 5000
   */
  bank_name?: string | null;
  /*
   * Routing transit number for the bank account to transfer funds to.
   *
   * @maxLength 5000
   */
  routing_number?: string | null;
  /*
   * SWIFT code of the bank associated with the routing number.
   *
   * @maxLength 5000
   */
  swift_code?: string | null;
};

export type PaymentMethodDetailsAchDebit = {
  /*
   * Type of entity that holds the account. This can be either `individual` or `company`.
   */
  account_holder_type?: "company" | "individual";
  /*
   * Name of the bank associated with the bank account.
   *
   * @maxLength 5000
   */
  bank_name?: string | null;
  /*
   * Two-letter ISO code representing the country the bank account is located in.
   *
   * @maxLength 5000
   */
  country?: string | null;
  /*
   * Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same.
   *
   * @maxLength 5000
   */
  fingerprint?: string | null;
  /*
   * Last four digits of the bank account number.
   *
   * @maxLength 5000
   */
  last4?: string | null;
  /*
   * Routing transit number of the bank account.
   *
   * @maxLength 5000
   */
  routing_number?: string | null;
};

export type PaymentMethodDetailsAcssDebit = {
  /*
   * Name of the bank associated with the bank account.
   *
   * @maxLength 5000
   */
  bank_name?: string | null;
  /*
   * Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same.
   *
   * @maxLength 5000
   */
  fingerprint?: string | null;
  /*
   * Institution number of the bank account
   *
   * @maxLength 5000
   */
  institution_number?: string | null;
  /*
   * Last four digits of the bank account number.
   *
   * @maxLength 5000
   */
  last4?: string | null;
  /*
   * ID of the mandate used to make this payment.
   *
   * @maxLength 5000
   */
  mandate?: string;
  /*
   * Transit number of the bank account.
   *
   * @maxLength 5000
   */
  transit_number?: string | null;
};

export type PaymentMethodDetailsAfterpayClearpay = {
  /*
   * Order identifier shown to the merchant in Afterpay’s online portal.
   *
   * @maxLength 5000
   */
  reference?: string | null;
};

export type PaymentMethodDetailsAuBecsDebit = {
  /*
   * Bank-State-Branch number of the bank account.
   *
   * @maxLength 5000
   */
  bsb_number?: string | null;
  /*
   * Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same.
   *
   * @maxLength 5000
   */
  fingerprint?: string | null;
  /*
   * Last four digits of the bank account number.
   *
   * @maxLength 5000
   */
  last4?: string | null;
  /*
   * ID of the mandate used to make this payment.
   *
   * @maxLength 5000
   */
  mandate?: string;
};

export type PaymentMethodDetailsBacsDebit = {
  /*
   * Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same.
   *
   * @maxLength 5000
   */
  fingerprint?: string | null;
  /*
   * Last four digits of the bank account number.
   *
   * @maxLength 5000
   */
  last4?: string | null;
  /*
   * ID of the mandate used to make this payment.
   *
   * @maxLength 5000
   */
  mandate?: string | null;
  /*
   * Sort code of the bank account. (e.g., `10-20-30`)
   *
   * @maxLength 5000
   */
  sort_code?: string | null;
};

export type PaymentMethodDetailsBancontact = {
  /*
   * Bank code of bank associated with the bank account.
   *
   * @maxLength 5000
   */
  bank_code?: string | null;
  /*
   * Name of the bank associated with the bank account.
   *
   * @maxLength 5000
   */
  bank_name?: string | null;
  /*
   * Bank Identifier Code of the bank associated with the bank account.
   *
   * @maxLength 5000
   */
  bic?: string | null;
  /*
   * The ID of the SEPA Direct Debit PaymentMethod which was generated by this Charge.
   */
  generated_sepa_debit?: string | PaymentMethod | null;
  /*
   * The mandate for the SEPA Direct Debit PaymentMethod which was generated by this Charge.
   */
  generated_sepa_debit_mandate?: string | Mandate | null;
  /*
   * Last four characters of the IBAN.
   *
   * @maxLength 5000
   */
  iban_last4?: string | null;
  /*
   * Preferred language of the Bancontact authorization page that the customer is redirected to.
   * Can be one of `en`, `de`, `fr`, or `nl`
   */
  preferred_language?: "de" | "en" | "fr" | "nl";
  /*
   * Owner's verified full name. Values are verified or provided by Bancontact directly
   * (if supported) at the time of authorization or settlement. They cannot be set or mutated.
   *
   * @maxLength 5000
   */
  verified_name?: string | null;
};

export type PaymentMethodDetailsBoleto = {
  /*
   * Uniquely identifies this customer tax_id (CNPJ or CPF)
   *
   * @maxLength 5000
   */
  tax_id: string;
};

export type PaymentMethodDetailsCard = {
  /*
   * Card brand. Can be `amex`, `diners`, `discover`, `jcb`, `mastercard`, `unionpay`, `visa`, or `unknown`.
   *
   * @maxLength 5000
   */
  brand?: string | null;
  /*
   * Check results by Card networks on Card address and CVC at time of payment.
   */
  checks?: PaymentMethodDetailsCardChecks | null;
  /*
   * Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you've collected.
   *
   * @maxLength 5000
   */
  country?: string | null;
  /*
   * Two-digit number representing the card's expiration month.
   */
  exp_month: number;
  /*
   * Four-digit number representing the card's expiration year.
   */
  exp_year: number;
  /*
   * Uniquely identifies this particular card number. You can use this attribute to check whether two customers who’ve signed up with you are using the same card number, for example. For payment methods that tokenize card information (Apple Pay, Google Pay), the tokenized number might be provided instead of the underlying card number.
   *
   * *Starting May 1, 2021, card fingerprint in India for Connect will change to allow two fingerprints for the same card --- one for India and one for the rest of the world.*
   *
   * @maxLength 5000
   */
  fingerprint?: string | null;
  /*
   * Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`.
   *
   * @maxLength 5000
   */
  funding?: string | null;
  /*
   * Installment details for this payment (Mexico only).
   *
   * For more information, see the [installments integration guide](https://stripe.com/docs/payments/installments).
   */
  installments?: PaymentMethodDetailsCardInstallments | null;
  /*
   * The last four digits of the card.
   *
   * @maxLength 5000
   */
  last4?: string | null;
  /*
   * Identifies which network this charge was processed on. Can be `amex`, `cartes_bancaires`, `diners`, `discover`, `interac`, `jcb`, `mastercard`, `unionpay`, `visa`, or `unknown`.
   *
   * @maxLength 5000
   */
  network?: string | null;
  /*
   * Populated if this transaction used 3D Secure authentication.
   */
  three_d_secure?: ThreeDSecureDetails | null;
  /*
   * If this Card is part of a card wallet, this contains the details of the card wallet.
   */
  wallet?: PaymentMethodDetailsCardWallet | null;
};

export type PaymentMethodDetailsCardChecks = {
  /*
   * If a address line1 was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`.
   *
   * @maxLength 5000
   */
  address_line1_check?: string | null;
  /*
   * If a address postal code was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`.
   *
   * @maxLength 5000
   */
  address_postal_code_check?: string | null;
  /*
   * If a CVC was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`.
   *
   * @maxLength 5000
   */
  cvc_check?: string | null;
};

export type PaymentMethodDetailsCardInstallments = {
  /*
   * Installment plan selected for the payment.
   */
  plan?: PaymentMethodDetailsCardInstallmentsPlan | null;
};

export type PaymentMethodDetailsCardInstallmentsPlan = {
  /*
   * For `fixed_count` installment plans, this is the number of installment payments your customer will make to their credit card.
   */
  count?: number | null;
  /*
   * For `fixed_count` installment plans, this is the interval between installment payments your customer will make to their credit card.
   * One of `month`.
   */
  interval?: "month";
  /*
   * Type of installment plan, one of `fixed_count`.
   */
  type: "fixed_count";
};

export type PaymentMethodDetailsCardPresent = {
  /*
   * Card brand. Can be `amex`, `diners`, `discover`, `jcb`, `mastercard`, `unionpay`, `visa`, or `unknown`.
   *
   * @maxLength 5000
   */
  brand?: string | null;
  /*
   * The cardholder name as read from the card, in [ISO 7813](https://en.wikipedia.org/wiki/ISO/IEC_7813) format. May include alphanumeric characters, special characters and first/last name separator (`/`).
   *
   * @maxLength 5000
   */
  cardholder_name?: string | null;
  /*
   * Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you've collected.
   *
   * @maxLength 5000
   */
  country?: string | null;
  /*
   * Authorization response cryptogram.
   *
   * @maxLength 5000
   */
  emv_auth_data?: string | null;
  /*
   * Two-digit number representing the card's expiration month.
   */
  exp_month: number;
  /*
   * Four-digit number representing the card's expiration year.
   */
  exp_year: number;
  /*
   * Uniquely identifies this particular card number. You can use this attribute to check whether two customers who’ve signed up with you are using the same card number, for example. For payment methods that tokenize card information (Apple Pay, Google Pay), the tokenized number might be provided instead of the underlying card number.
   *
   * *Starting May 1, 2021, card fingerprint in India for Connect will change to allow two fingerprints for the same card --- one for India and one for the rest of the world.*
   *
   * @maxLength 5000
   */
  fingerprint?: string | null;
  /*
   * Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`.
   *
   * @maxLength 5000
   */
  funding?: string | null;
  /*
   * ID of a card PaymentMethod generated from the card_present PaymentMethod that may be attached to a Customer for future transactions. Only present if it was possible to generate a card PaymentMethod.
   *
   * @maxLength 5000
   */
  generated_card?: string | null;
  /*
   * The last four digits of the card.
   *
   * @maxLength 5000
   */
  last4?: string | null;
  /*
   * Identifies which network this charge was processed on. Can be `amex`, `cartes_bancaires`, `diners`, `discover`, `interac`, `jcb`, `mastercard`, `unionpay`, `visa`, or `unknown`.
   *
   * @maxLength 5000
   */
  network?: string | null;
  /*
   * How card details were read in this transaction.
   */
  read_method?:
    | "contact_emv"
    | "contactless_emv"
    | "contactless_magstripe_mode"
    | "magnetic_stripe_fallback"
    | "magnetic_stripe_track2";
  /*
   * A collection of fields required to be displayed on receipts. Only required for EMV transactions.
   */
  receipt?: PaymentMethodDetailsCardPresentReceipt | null;
};

export type PaymentMethodDetailsCardPresentReceipt = {
  /*
   * The type of account being debited or credited
   *
   * @x-stripeBypassValidation true
   */
  account_type?: "checking" | "credit" | "prepaid" | "unknown";
  /*
   * EMV tag 9F26, cryptogram generated by the integrated circuit chip.
   *
   * @maxLength 5000
   */
  application_cryptogram?: string | null;
  /*
   * Mnenomic of the Application Identifier.
   *
   * @maxLength 5000
   */
  application_preferred_name?: string | null;
  /*
   * Identifier for this transaction.
   *
   * @maxLength 5000
   */
  authorization_code?: string | null;
  /*
   * EMV tag 8A. A code returned by the card issuer.
   *
   * @maxLength 5000
   */
  authorization_response_code?: string | null;
  /*
   * How the cardholder verified ownership of the card.
   *
   * @maxLength 5000
   */
  cardholder_verification_method?: string | null;
  /*
   * EMV tag 84. Similar to the application identifier stored on the integrated circuit chip.
   *
   * @maxLength 5000
   */
  dedicated_file_name?: string | null;
  /*
   * The outcome of a series of EMV functions performed by the card reader.
   *
   * @maxLength 5000
   */
  terminal_verification_results?: string | null;
  /*
   * An indication of various EMV functions performed during the transaction.
   *
   * @maxLength 5000
   */
  transaction_status_information?: string | null;
};

export type PaymentMethodDetailsCardWallet = {
  amex_express_checkout?: PaymentMethodDetailsCardWalletAmexExpressCheckout;
  apple_pay?: PaymentMethodDetailsCardWalletApplePay;
  /*
   * (For tokenized numbers only.) The last four digits of the device account number.
   *
   * @maxLength 5000
   */
  dynamic_last4?: string | null;
  google_pay?: PaymentMethodDetailsCardWalletGooglePay;
  masterpass?: PaymentMethodDetailsCardWalletMasterpass;
  samsung_pay?: PaymentMethodDetailsCardWalletSamsungPay;
  /*
   * The type of the card wallet, one of `amex_express_checkout`, `apple_pay`, `google_pay`, `masterpass`, `samsung_pay`, or `visa_checkout`. An additional hash is included on the Wallet subhash with a name matching this value. It contains additional information specific to the card wallet type.
   */
  type:
    | "amex_express_checkout"
    | "apple_pay"
    | "google_pay"
    | "masterpass"
    | "samsung_pay"
    | "visa_checkout";
  visa_checkout?: PaymentMethodDetailsCardWalletVisaCheckout;
};

export type PaymentMethodDetailsCardWalletAmexExpressCheckout = {};

export type PaymentMethodDetailsCardWalletApplePay = {};

export type PaymentMethodDetailsCardWalletGooglePay = {};

export type PaymentMethodDetailsCardWalletMasterpass = {
  /*
   * Owner's verified billing address. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated.
   */
  billing_address?: Address | null;
  /*
   * Owner's verified email. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated.
   *
   * @maxLength 5000
   */
  email?: string | null;
  /*
   * Owner's verified full name. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated.
   *
   * @maxLength 5000
   */
  name?: string | null;
  /*
   * Owner's verified shipping address. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated.
   */
  shipping_address?: Address | null;
};

export type PaymentMethodDetailsCardWalletSamsungPay = {};

export type PaymentMethodDetailsCardWalletVisaCheckout = {
  /*
   * Owner's verified billing address. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated.
   */
  billing_address?: Address | null;
  /*
   * Owner's verified email. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated.
   *
   * @maxLength 5000
   */
  email?: string | null;
  /*
   * Owner's verified full name. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated.
   *
   * @maxLength 5000
   */
  name?: string | null;
  /*
   * Owner's verified shipping address. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated.
   */
  shipping_address?: Address | null;
};

export type PaymentMethodDetailsEps = {
  /*
   * The customer's bank. Should be one of `arzte_und_apotheker_bank`, `austrian_anadi_bank_ag`, `bank_austria`, `bankhaus_carl_spangler`, `bankhaus_schelhammer_und_schattera_ag`, `bawag_psk_ag`, `bks_bank_ag`, `brull_kallmus_bank_ag`, `btv_vier_lander_bank`, `capital_bank_grawe_gruppe_ag`, `dolomitenbank`, `easybank_ag`, `erste_bank_und_sparkassen`, `hypo_alpeadriabank_international_ag`, `hypo_noe_lb_fur_niederosterreich_u_wien`, `hypo_oberosterreich_salzburg_steiermark`, `hypo_tirol_bank_ag`, `hypo_vorarlberg_bank_ag`, `hypo_bank_burgenland_aktiengesellschaft`, `marchfelder_bank`, `oberbank_ag`, `raiffeisen_bankengruppe_osterreich`, `schoellerbank_ag`, `sparda_bank_wien`, `volksbank_gruppe`, `volkskreditbank_ag`, or `vr_bank_braunau`.
   */
  bank?:
    | "arzte_und_apotheker_bank"
    | "austrian_anadi_bank_ag"
    | "bank_austria"
    | "bankhaus_carl_spangler"
    | "bankhaus_schelhammer_und_schattera_ag"
    | "bawag_psk_ag"
    | "bks_bank_ag"
    | "brull_kallmus_bank_ag"
    | "btv_vier_lander_bank"
    | "capital_bank_grawe_gruppe_ag"
    | "dolomitenbank"
    | "easybank_ag"
    | "erste_bank_und_sparkassen"
    | "hypo_alpeadriabank_international_ag"
    | "hypo_bank_burgenland_aktiengesellschaft"
    | "hypo_noe_lb_fur_niederosterreich_u_wien"
    | "hypo_oberosterreich_salzburg_steiermark"
    | "hypo_tirol_bank_ag"
    | "hypo_vorarlberg_bank_ag"
    | "marchfelder_bank"
    | "oberbank_ag"
    | "raiffeisen_bankengruppe_osterreich"
    | "schoellerbank_ag"
    | "sparda_bank_wien"
    | "volksbank_gruppe"
    | "volkskreditbank_ag"
    | "vr_bank_braunau";
  /*
   * Owner's verified full name. Values are verified or provided by EPS directly
   * (if supported) at the time of authorization or settlement. They cannot be set or mutated.
   * EPS rarely provides this information so the attribute is usually empty.
   *
   * @maxLength 5000
   */
  verified_name?: string | null;
};

export type PaymentMethodDetailsFpx = {
  /*
   * The customer's bank. Can be one of `affin_bank`, `alliance_bank`, `ambank`, `bank_islam`, `bank_muamalat`, `bank_rakyat`, `bsn`, `cimb`, `hong_leong_bank`, `hsbc`, `kfh`, `maybank2u`, `ocbc`, `public_bank`, `rhb`, `standard_chartered`, `uob`, `deutsche_bank`, `maybank2e`, or `pb_enterprise`.
   */
  bank:
    | "affin_bank"
    | "alliance_bank"
    | "ambank"
    | "bank_islam"
    | "bank_muamalat"
    | "bank_rakyat"
    | "bsn"
    | "cimb"
    | "deutsche_bank"
    | "hong_leong_bank"
    | "hsbc"
    | "kfh"
    | "maybank2e"
    | "maybank2u"
    | "ocbc"
    | "pb_enterprise"
    | "public_bank"
    | "rhb"
    | "standard_chartered"
    | "uob";
  /*
   * Unique transaction id generated by FPX for every request from the merchant
   *
   * @maxLength 5000
   */
  transaction_id?: string | null;
};

export type PaymentMethodDetailsGiropay = {
  /*
   * Bank code of bank associated with the bank account.
   *
   * @maxLength 5000
   */
  bank_code?: string | null;
  /*
   * Name of the bank associated with the bank account.
   *
   * @maxLength 5000
   */
  bank_name?: string | null;
  /*
   * Bank Identifier Code of the bank associated with the bank account.
   *
   * @maxLength 5000
   */
  bic?: string | null;
  /*
   * Owner's verified full name. Values are verified or provided by Giropay directly
   * (if supported) at the time of authorization or settlement. They cannot be set or mutated.
   * Giropay rarely provides this information so the attribute is usually empty.
   *
   * @maxLength 5000
   */
  verified_name?: string | null;
};

export type PaymentMethodDetailsGrabpay = {
  /*
   * Unique transaction id generated by GrabPay
   *
   * @maxLength 5000
   */
  transaction_id?: string | null;
};

export type PaymentMethodDetailsIdeal = {
  /*
   * The customer's bank. Can be one of `abn_amro`, `asn_bank`, `bunq`, `handelsbanken`, `ing`, `knab`, `moneyou`, `rabobank`, `regiobank`, `revolut`, `sns_bank`, `triodos_bank`, or `van_lanschot`.
   */
  bank?:
    | "abn_amro"
    | "asn_bank"
    | "bunq"
    | "handelsbanken"
    | "ing"
    | "knab"
    | "moneyou"
    | "rabobank"
    | "regiobank"
    | "revolut"
    | "sns_bank"
    | "triodos_bank"
    | "van_lanschot";
  /*
   * The Bank Identifier Code of the customer's bank.
   */
  bic?:
    | "ABNANL2A"
    | "ASNBNL21"
    | "BUNQNL2A"
    | "FVLBNL22"
    | "HANDNL2A"
    | "INGBNL2A"
    | "KNABNL2H"
    | "MOYONL21"
    | "RABONL2U"
    | "RBRBNL21"
    | "REVOLT21"
    | "SNSBNL2A"
    | "TRIONL2U";
  /*
   * The ID of the SEPA Direct Debit PaymentMethod which was generated by this Charge.
   */
  generated_sepa_debit?: string | PaymentMethod | null;
  /*
   * The mandate for the SEPA Direct Debit PaymentMethod which was generated by this Charge.
   */
  generated_sepa_debit_mandate?: string | Mandate | null;
  /*
   * Last four characters of the IBAN.
   *
   * @maxLength 5000
   */
  iban_last4?: string | null;
  /*
   * Owner's verified full name. Values are verified or provided by iDEAL directly
   * (if supported) at the time of authorization or settlement. They cannot be set or mutated.
   *
   * @maxLength 5000
   */
  verified_name?: string | null;
};

export type PaymentMethodDetailsInteracPresent = {
  /*
   * Card brand. Can be `interac`, `mastercard` or `visa`.
   *
   * @maxLength 5000
   */
  brand?: string | null;
  /*
   * The cardholder name as read from the card, in [ISO 7813](https://en.wikipedia.org/wiki/ISO/IEC_7813) format. May include alphanumeric characters, special characters and first/last name separator (`/`).
   *
   * @maxLength 5000
   */
  cardholder_name?: string | null;
  /*
   * Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you've collected.
   *
   * @maxLength 5000
   */
  country?: string | null;
  /*
   * Authorization response cryptogram.
   *
   * @maxLength 5000
   */
  emv_auth_data?: string | null;
  /*
   * Two-digit number representing the card's expiration month.
   */
  exp_month: number;
  /*
   * Four-digit number representing the card's expiration year.
   */
  exp_year: number;
  /*
   * Uniquely identifies this particular card number. You can use this attribute to check whether two customers who’ve signed up with you are using the same card number, for example. For payment methods that tokenize card information (Apple Pay, Google Pay), the tokenized number might be provided instead of the underlying card number.
   *
   * *Starting May 1, 2021, card fingerprint in India for Connect will change to allow two fingerprints for the same card --- one for India and one for the rest of the world.*
   *
   * @maxLength 5000
   */
  fingerprint?: string | null;
  /*
   * Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`.
   *
   * @maxLength 5000
   */
  funding?: string | null;
  /*
   * ID of a card PaymentMethod generated from the card_present PaymentMethod that may be attached to a Customer for future transactions. Only present if it was possible to generate a card PaymentMethod.
   *
   * @maxLength 5000
   */
  generated_card?: string | null;
  /*
   * The last four digits of the card.
   *
   * @maxLength 5000
   */
  last4?: string | null;
  /*
   * Identifies which network this charge was processed on. Can be `amex`, `cartes_bancaires`, `diners`, `discover`, `interac`, `jcb`, `mastercard`, `unionpay`, `visa`, or `unknown`.
   *
   * @maxLength 5000
   */
  network?: string | null;
  /*
   * EMV tag 5F2D. Preferred languages specified by the integrated circuit chip.
   */
  preferred_locales?: string[] | null;
  /*
   * How card details were read in this transaction.
   */
  read_method?:
    | "contact_emv"
    | "contactless_emv"
    | "contactless_magstripe_mode"
    | "magnetic_stripe_fallback"
    | "magnetic_stripe_track2";
  /*
   * A collection of fields required to be displayed on receipts. Only required for EMV transactions.
   */
  receipt?: PaymentMethodDetailsInteracPresentReceipt | null;
};

export type PaymentMethodDetailsInteracPresentReceipt = {
  /*
   * The type of account being debited or credited
   *
   * @x-stripeBypassValidation true
   */
  account_type?: "checking" | "savings" | "unknown";
  /*
   * EMV tag 9F26, cryptogram generated by the integrated circuit chip.
   *
   * @maxLength 5000
   */
  application_cryptogram?: string | null;
  /*
   * Mnenomic of the Application Identifier.
   *
   * @maxLength 5000
   */
  application_preferred_name?: string | null;
  /*
   * Identifier for this transaction.
   *
   * @maxLength 5000
   */
  authorization_code?: string | null;
  /*
   * EMV tag 8A. A code returned by the card issuer.
   *
   * @maxLength 5000
   */
  authorization_response_code?: string | null;
  /*
   * How the cardholder verified ownership of the card.
   *
   * @maxLength 5000
   */
  cardholder_verification_method?: string | null;
  /*
   * EMV tag 84. Similar to the application identifier stored on the integrated circuit chip.
   *
   * @maxLength 5000
   */
  dedicated_file_name?: string | null;
  /*
   * The outcome of a series of EMV functions performed by the card reader.
   *
   * @maxLength 5000
   */
  terminal_verification_results?: string | null;
  /*
   * An indication of various EMV functions performed during the transaction.
   *
   * @maxLength 5000
   */
  transaction_status_information?: string | null;
};

export type PaymentMethodDetailsKlarna = {};

export type PaymentMethodDetailsMultibanco = {
  /*
   * Entity number associated with this Multibanco payment.
   *
   * @maxLength 5000
   */
  entity?: string | null;
  /*
   * Reference number associated with this Multibanco payment.
   *
   * @maxLength 5000
   */
  reference?: string | null;
};

export type PaymentMethodDetailsOxxo = {
  /*
   * OXXO reference number
   *
   * @maxLength 5000
   */
  number?: string | null;
};

export type PaymentMethodDetailsP24 = {
  /*
   * The customer's bank. Can be one of `ing`, `citi_handlowy`, `tmobile_usbugi_bankowe`, `plus_bank`, `etransfer_pocztowy24`, `banki_spbdzielcze`, `bank_nowy_bfg_sa`, `getin_bank`, `blik`, `noble_pay`, `ideabank`, `envelobank`, `santander_przelew24`, `nest_przelew`, `mbank_mtransfer`, `inteligo`, `pbac_z_ipko`, `bnp_paribas`, `credit_agricole`, `toyota_bank`, `bank_pekao_sa`, `volkswagen_bank`, `bank_millennium`, `alior_bank`, or `boz`.
   */
  bank?:
    | "alior_bank"
    | "bank_millennium"
    | "bank_nowy_bfg_sa"
    | "bank_pekao_sa"
    | "banki_spbdzielcze"
    | "blik"
    | "bnp_paribas"
    | "boz"
    | "citi_handlowy"
    | "credit_agricole"
    | "envelobank"
    | "etransfer_pocztowy24"
    | "getin_bank"
    | "ideabank"
    | "ing"
    | "inteligo"
    | "mbank_mtransfer"
    | "nest_przelew"
    | "noble_pay"
    | "pbac_z_ipko"
    | "plus_bank"
    | "santander_przelew24"
    | "tmobile_usbugi_bankowe"
    | "toyota_bank"
    | "volkswagen_bank";
  /*
   * Unique reference for this Przelewy24 payment.
   *
   * @maxLength 5000
   */
  reference?: string | null;
  /*
   * Owner's verified full name. Values are verified or provided by Przelewy24 directly
   * (if supported) at the time of authorization or settlement. They cannot be set or mutated.
   * Przelewy24 rarely provides this information so the attribute is usually empty.
   *
   * @maxLength 5000
   */
  verified_name?: string | null;
};

export type PaymentMethodDetailsSepaDebit = {
  /*
   * Bank code of bank associated with the bank account.
   *
   * @maxLength 5000
   */
  bank_code?: string | null;
  /*
   * Branch code of bank associated with the bank account.
   *
   * @maxLength 5000
   */
  branch_code?: string | null;
  /*
   * Two-letter ISO code representing the country the bank account is located in.
   *
   * @maxLength 5000
   */
  country?: string | null;
  /*
   * Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same.
   *
   * @maxLength 5000
   */
  fingerprint?: string | null;
  /*
   * Last four characters of the IBAN.
   *
   * @maxLength 5000
   */
  last4?: string | null;
  /*
   * ID of the mandate used to make this payment.
   *
   * @maxLength 5000
   */
  mandate?: string | null;
};

export type PaymentMethodDetailsSofort = {
  /*
   * Bank code of bank associated with the bank account.
   *
   * @maxLength 5000
   */
  bank_code?: string | null;
  /*
   * Name of the bank associated with the bank account.
   *
   * @maxLength 5000
   */
  bank_name?: string | null;
  /*
   * Bank Identifier Code of the bank associated with the bank account.
   *
   * @maxLength 5000
   */
  bic?: string | null;
  /*
   * Two-letter ISO code representing the country the bank account is located in.
   *
   * @maxLength 5000
   */
  country?: string | null;
  /*
   * The ID of the SEPA Direct Debit PaymentMethod which was generated by this Charge.
   */
  generated_sepa_debit?: string | PaymentMethod | null;
  /*
   * The mandate for the SEPA Direct Debit PaymentMethod which was generated by this Charge.
   */
  generated_sepa_debit_mandate?: string | Mandate | null;
  /*
   * Last four characters of the IBAN.
   *
   * @maxLength 5000
   */
  iban_last4?: string | null;
  /*
   * Preferred language of the SOFORT authorization page that the customer is redirected to.
   * Can be one of `de`, `en`, `es`, `fr`, `it`, `nl`, or `pl`
   */
  preferred_language?: "de" | "en" | "es" | "fr" | "it" | "nl" | "pl";
  /*
   * Owner's verified full name. Values are verified or provided by SOFORT directly
   * (if supported) at the time of authorization or settlement. They cannot be set or mutated.
   *
   * @maxLength 5000
   */
  verified_name?: string | null;
};

export type PaymentMethodDetailsStripeAccount = {};

export type PaymentMethodDetailsWechat = {};

export type PaymentMethodDetailsWechatPay = {
  /*
   * Uniquely identifies this particular WeChat Pay account. You can use this attribute to check whether two WeChat accounts are the same.
   *
   * @maxLength 5000
   */
  fingerprint?: string | null;
  /*
   * Transaction ID of this particular WeChat Pay transaction.
   *
   * @maxLength 5000
   */
  transaction_id?: string | null;
};

export type PaymentMethodEps = {
  /*
   * The customer's bank. Should be one of `arzte_und_apotheker_bank`, `austrian_anadi_bank_ag`, `bank_austria`, `bankhaus_carl_spangler`, `bankhaus_schelhammer_und_schattera_ag`, `bawag_psk_ag`, `bks_bank_ag`, `brull_kallmus_bank_ag`, `btv_vier_lander_bank`, `capital_bank_grawe_gruppe_ag`, `dolomitenbank`, `easybank_ag`, `erste_bank_und_sparkassen`, `hypo_alpeadriabank_international_ag`, `hypo_noe_lb_fur_niederosterreich_u_wien`, `hypo_oberosterreich_salzburg_steiermark`, `hypo_tirol_bank_ag`, `hypo_vorarlberg_bank_ag`, `hypo_bank_burgenland_aktiengesellschaft`, `marchfelder_bank`, `oberbank_ag`, `raiffeisen_bankengruppe_osterreich`, `schoellerbank_ag`, `sparda_bank_wien`, `volksbank_gruppe`, `volkskreditbank_ag`, or `vr_bank_braunau`.
   */
  bank?:
    | "arzte_und_apotheker_bank"
    | "austrian_anadi_bank_ag"
    | "bank_austria"
    | "bankhaus_carl_spangler"
    | "bankhaus_schelhammer_und_schattera_ag"
    | "bawag_psk_ag"
    | "bks_bank_ag"
    | "brull_kallmus_bank_ag"
    | "btv_vier_lander_bank"
    | "capital_bank_grawe_gruppe_ag"
    | "dolomitenbank"
    | "easybank_ag"
    | "erste_bank_und_sparkassen"
    | "hypo_alpeadriabank_international_ag"
    | "hypo_bank_burgenland_aktiengesellschaft"
    | "hypo_noe_lb_fur_niederosterreich_u_wien"
    | "hypo_oberosterreich_salzburg_steiermark"
    | "hypo_tirol_bank_ag"
    | "hypo_vorarlberg_bank_ag"
    | "marchfelder_bank"
    | "oberbank_ag"
    | "raiffeisen_bankengruppe_osterreich"
    | "schoellerbank_ag"
    | "sparda_bank_wien"
    | "volksbank_gruppe"
    | "volkskreditbank_ag"
    | "vr_bank_braunau";
};

export type PaymentMethodFpx = {
  /*
   * The customer's bank, if provided. Can be one of `affin_bank`, `alliance_bank`, `ambank`, `bank_islam`, `bank_muamalat`, `bank_rakyat`, `bsn`, `cimb`, `hong_leong_bank`, `hsbc`, `kfh`, `maybank2u`, `ocbc`, `public_bank`, `rhb`, `standard_chartered`, `uob`, `deutsche_bank`, `maybank2e`, or `pb_enterprise`.
   */
  bank:
    | "affin_bank"
    | "alliance_bank"
    | "ambank"
    | "bank_islam"
    | "bank_muamalat"
    | "bank_rakyat"
    | "bsn"
    | "cimb"
    | "deutsche_bank"
    | "hong_leong_bank"
    | "hsbc"
    | "kfh"
    | "maybank2e"
    | "maybank2u"
    | "ocbc"
    | "pb_enterprise"
    | "public_bank"
    | "rhb"
    | "standard_chartered"
    | "uob";
};

export type PaymentMethodGiropay = {};

export type PaymentMethodGrabpay = {};

export type PaymentMethodIdeal = {
  /*
   * The customer's bank, if provided. Can be one of `abn_amro`, `asn_bank`, `bunq`, `handelsbanken`, `ing`, `knab`, `moneyou`, `rabobank`, `regiobank`, `revolut`, `sns_bank`, `triodos_bank`, or `van_lanschot`.
   */
  bank?:
    | "abn_amro"
    | "asn_bank"
    | "bunq"
    | "handelsbanken"
    | "ing"
    | "knab"
    | "moneyou"
    | "rabobank"
    | "regiobank"
    | "revolut"
    | "sns_bank"
    | "triodos_bank"
    | "van_lanschot";
  /*
   * The Bank Identifier Code of the customer's bank, if the bank was provided.
   */
  bic?:
    | "ABNANL2A"
    | "ASNBNL21"
    | "BUNQNL2A"
    | "FVLBNL22"
    | "HANDNL2A"
    | "INGBNL2A"
    | "KNABNL2H"
    | "MOYONL21"
    | "RABONL2U"
    | "RBRBNL21"
    | "REVOLT21"
    | "SNSBNL2A"
    | "TRIONL2U";
};

export type PaymentMethodInteracPresent = {};

export type PaymentMethodOptionsAfterpayClearpay = {
  /*
   * Order identifier shown to the merchant in Afterpay’s online portal. We recommend using a value that helps you answer any questions a customer might have about
   * the payment. The identifier is limited to 128 characters and may contain only letters, digits, underscores, backslashes and dashes.
   *
   * @maxLength 5000
   */
  reference?: string | null;
};

export type PaymentMethodOptionsAlipay = {};

export type PaymentMethodOptionsBancontact = {
  /*
   * Preferred language of the Bancontact authorization page that the customer is redirected to.
   */
  preferred_language: "de" | "en" | "fr" | "nl";
};

export type PaymentMethodOptionsBoleto = {
  /*
   * The number of calendar days before a Boleto voucher expires. For example, if you create a Boleto voucher on Monday and you set expires_after_days to 2, the Boleto voucher will expire on Wednesday at 23:59 America/Sao_Paulo time.
   */
  expires_after_days: number;
};

export type PaymentMethodOptionsCardInstallments = {
  /*
   * Installment plans that may be selected for this PaymentIntent.
   */
  available_plans?: PaymentMethodDetailsCardInstallmentsPlan[] | null;
  /*
   * Whether Installments are enabled for this PaymentIntent.
   */
  enabled: boolean;
  /*
   * Installment plan selected for this PaymentIntent.
   */
  plan?: PaymentMethodDetailsCardInstallmentsPlan | null;
};

export type PaymentMethodOptionsCardPresent = {};

export type PaymentMethodOptionsIdeal = {};

export type PaymentMethodOptionsOxxo = {
  /*
   * The number of calendar days before an OXXO invoice expires. For example, if you create an OXXO invoice on Monday and you set expires_after_days to 2, the OXXO invoice will expire on Wednesday at 23:59 America/Mexico_City time.
   */
  expires_after_days: number;
};

export type PaymentMethodOptionsP24 = {};

export type PaymentMethodOptionsSofort = {
  /*
   * Preferred language of the SOFORT authorization page that the customer is redirected to.
   */
  preferred_language?: "de" | "en" | "es" | "fr" | "it" | "nl" | "pl";
};

export type PaymentMethodOptionsWechatPay = {
  /*
   * The app ID registered with WeChat Pay. Only required when client is ios or android.
   *
   * @maxLength 5000
   */
  app_id?: string | null;
  /*
   * The client type that the end customer will pay from
   *
   * @x-stripeBypassValidation true
   */
  client?: "android" | "ios" | "web";
};

export type PaymentMethodOxxo = {};

export type PaymentMethodP24 = {
  /*
   * The customer's bank, if provided.
   */
  bank?:
    | "alior_bank"
    | "bank_millennium"
    | "bank_nowy_bfg_sa"
    | "bank_pekao_sa"
    | "banki_spbdzielcze"
    | "blik"
    | "bnp_paribas"
    | "boz"
    | "citi_handlowy"
    | "credit_agricole"
    | "envelobank"
    | "etransfer_pocztowy24"
    | "getin_bank"
    | "ideabank"
    | "ing"
    | "inteligo"
    | "mbank_mtransfer"
    | "nest_przelew"
    | "noble_pay"
    | "pbac_z_ipko"
    | "plus_bank"
    | "santander_przelew24"
    | "tmobile_usbugi_bankowe"
    | "toyota_bank"
    | "volkswagen_bank";
};

export type PaymentMethodSepaDebit = {
  /*
   * Bank code of bank associated with the bank account.
   *
   * @maxLength 5000
   */
  bank_code?: string | null;
  /*
   * Branch code of bank associated with the bank account.
   *
   * @maxLength 5000
   */
  branch_code?: string | null;
  /*
   * Two-letter ISO code representing the country the bank account is located in.
   *
   * @maxLength 5000
   */
  country?: string | null;
  /*
   * Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same.
   *
   * @maxLength 5000
   */
  fingerprint?: string | null;
  /*
   * Information about the object that generated this PaymentMethod.
   */
  generated_from?: SepaDebitGeneratedFrom | null;
  /*
   * Last four characters of the IBAN.
   *
   * @maxLength 5000
   */
  last4?: string | null;
};

export type PaymentMethodSofort = {
  /*
   * Two-letter ISO code representing the country the bank account is located in.
   *
   * @maxLength 5000
   */
  country?: string | null;
};

export type PaymentMethodWechatPay = {};

export type PaymentPagesCheckoutSessionAutomaticTax = {
  /*
   * Indicates whether automatic tax is enabled for the session
   */
  enabled: boolean;
  /*
   * The status of the most recent automated tax calculation for this session.
   */
  status?: "complete" | "failed" | "requires_location_inputs";
};

export type PaymentPagesCheckoutSessionCustomerDetails = {
  /*
   * The customer’s email at time of checkout.
   *
   * @maxLength 5000
   */
  email?: string | null;
  /*
   * The customer’s tax exempt status at time of checkout.
   */
  tax_exempt?: "exempt" | "none" | "reverse";
  /*
   * The customer’s tax IDs at time of checkout.
   */
  tax_ids?: PaymentPagesCheckoutSessionTaxId[] | null;
};

export type PaymentPagesCheckoutSessionTaxId = {
  /*
   * The type of the tax ID, one of `eu_vat`, `br_cnpj`, `br_cpf`, `gb_vat`, `nz_gst`, `au_abn`, `au_arn`, `in_gst`, `no_vat`, `za_vat`, `ch_vat`, `mx_rfc`, `sg_uen`, `ru_inn`, `ru_kpp`, `ca_bn`, `hk_br`, `es_cif`, `tw_vat`, `th_vat`, `jp_cn`, `jp_rn`, `li_uid`, `my_itn`, `us_ein`, `kr_brn`, `ca_qst`, `ca_gst_hst`, `ca_pst_bc`, `ca_pst_mb`, `ca_pst_sk`, `my_sst`, `sg_gst`, `ae_trn`, `cl_tin`, `sa_vat`, `id_npwp`, `my_frp`, `il_vat`, or `unknown`
   */
  type:
    | "ae_trn"
    | "au_abn"
    | "au_arn"
    | "br_cnpj"
    | "br_cpf"
    | "ca_bn"
    | "ca_gst_hst"
    | "ca_pst_bc"
    | "ca_pst_mb"
    | "ca_pst_sk"
    | "ca_qst"
    | "ch_vat"
    | "cl_tin"
    | "es_cif"
    | "eu_vat"
    | "gb_vat"
    | "hk_br"
    | "id_npwp"
    | "il_vat"
    | "in_gst"
    | "jp_cn"
    | "jp_rn"
    | "kr_brn"
    | "li_uid"
    | "mx_rfc"
    | "my_frp"
    | "my_itn"
    | "my_sst"
    | "no_vat"
    | "nz_gst"
    | "ru_inn"
    | "ru_kpp"
    | "sa_vat"
    | "sg_gst"
    | "sg_uen"
    | "th_vat"
    | "tw_vat"
    | "unknown"
    | "us_ein"
    | "za_vat";
  /*
   * The value of the tax ID.
   *
   * @maxLength 5000
   */
  value?: string | null;
};

export type PaymentPagesCheckoutSessionTaxIdCollection = {
  /*
   * Indicates whether tax ID collection is enabled for the session
   */
  enabled: boolean;
};

export type PaymentPagesCheckoutSessionTotalDetails = {
  /*
   * This is the sum of all the line item discounts.
   */
  amount_discount: number;
  /*
   * This is the sum of all the line item shipping amounts.
   */
  amount_shipping?: number | null;
  /*
   * This is the sum of all the line item tax amounts.
   */
  amount_tax: number;
  breakdown?: PaymentPagesCheckoutSessionTotalDetailsResourceBreakdown;
};

export type PaymentPagesCheckoutSessionTotalDetailsResourceBreakdown = {
  /*
   * The aggregated line item discounts.
   */
  discounts: LineItemsDiscountAmount[];
  /*
   * The aggregated line item tax amounts by rate.
   */
  taxes: LineItemsTaxAmount[];
};

export type PaymentPagesPaymentPageResourcesShippingAddressCollection = {
  /*
   * An array of two-letter ISO country codes representing which countries Checkout should provide as options for
   * shipping locations. Unsupported country codes: `AS, CX, CC, CU, HM, IR, KP, MH, FM, NF, MP, PW, SD, SY, UM, VI`.
   */
  allowed_countries: (
    | "AC"
    | "AD"
    | "AE"
    | "AF"
    | "AG"
    | "AI"
    | "AL"
    | "AM"
    | "AO"
    | "AQ"
    | "AR"
    | "AT"
    | "AU"
    | "AW"
    | "AX"
    | "AZ"
    | "BA"
    | "BB"
    | "BD"
    | "BE"
    | "BF"
    | "BG"
    | "BH"
    | "BI"
    | "BJ"
    | "BL"
    | "BM"
    | "BN"
    | "BO"
    | "BQ"
    | "BR"
    | "BS"
    | "BT"
    | "BV"
    | "BW"
    | "BY"
    | "BZ"
    | "CA"
    | "CD"
    | "CF"
    | "CG"
    | "CH"
    | "CI"
    | "CK"
    | "CL"
    | "CM"
    | "CN"
    | "CO"
    | "CR"
    | "CV"
    | "CW"
    | "CY"
    | "CZ"
    | "DE"
    | "DJ"
    | "DK"
    | "DM"
    | "DO"
    | "DZ"
    | "EC"
    | "EE"
    | "EG"
    | "EH"
    | "ER"
    | "ES"
    | "ET"
    | "FI"
    | "FJ"
    | "FK"
    | "FO"
    | "FR"
    | "GA"
    | "GB"
    | "GD"
    | "GE"
    | "GF"
    | "GG"
    | "GH"
    | "GI"
    | "GL"
    | "GM"
    | "GN"
    | "GP"
    | "GQ"
    | "GR"
    | "GS"
    | "GT"
    | "GU"
    | "GW"
    | "GY"
    | "HK"
    | "HN"
    | "HR"
    | "HT"
    | "HU"
    | "ID"
    | "IE"
    | "IL"
    | "IM"
    | "IN"
    | "IO"
    | "IQ"
    | "IS"
    | "IT"
    | "JE"
    | "JM"
    | "JO"
    | "JP"
    | "KE"
    | "KG"
    | "KH"
    | "KI"
    | "KM"
    | "KN"
    | "KR"
    | "KW"
    | "KY"
    | "KZ"
    | "LA"
    | "LB"
    | "LC"
    | "LI"
    | "LK"
    | "LR"
    | "LS"
    | "LT"
    | "LU"
    | "LV"
    | "LY"
    | "MA"
    | "MC"
    | "MD"
    | "ME"
    | "MF"
    | "MG"
    | "MK"
    | "ML"
    | "MM"
    | "MN"
    | "MO"
    | "MQ"
    | "MR"
    | "MS"
    | "MT"
    | "MU"
    | "MV"
    | "MW"
    | "MX"
    | "MY"
    | "MZ"
    | "NA"
    | "NC"
    | "NE"
    | "NG"
    | "NI"
    | "NL"
    | "NO"
    | "NP"
    | "NR"
    | "NU"
    | "NZ"
    | "OM"
    | "PA"
    | "PE"
    | "PF"
    | "PG"
    | "PH"
    | "PK"
    | "PL"
    | "PM"
    | "PN"
    | "PR"
    | "PS"
    | "PT"
    | "PY"
    | "QA"
    | "RE"
    | "RO"
    | "RS"
    | "RU"
    | "RW"
    | "SA"
    | "SB"
    | "SC"
    | "SE"
    | "SG"
    | "SH"
    | "SI"
    | "SJ"
    | "SK"
    | "SL"
    | "SM"
    | "SN"
    | "SO"
    | "SR"
    | "SS"
    | "ST"
    | "SV"
    | "SX"
    | "SZ"
    | "TA"
    | "TC"
    | "TD"
    | "TF"
    | "TG"
    | "TH"
    | "TJ"
    | "TK"
    | "TL"
    | "TM"
    | "TN"
    | "TO"
    | "TR"
    | "TT"
    | "TV"
    | "TW"
    | "TZ"
    | "UA"
    | "UG"
    | "US"
    | "UY"
    | "UZ"
    | "VA"
    | "VC"
    | "VE"
    | "VG"
    | "VN"
    | "VU"
    | "WF"
    | "WS"
    | "XK"
    | "YE"
    | "YT"
    | "ZA"
    | "ZM"
    | "ZW"
    | "ZZ"
  )[];
};

/**
 * @x-resourceId payment_source
 */
export type PaymentSource =
  | Account
  | AlipayAccount
  | BankAccount
  | BitcoinReceiver
  | Card
  | Source;

/**
 * A `Payout` object is created when you receive funds from Stripe, or when you
 * initiate a payout to either a bank account or debit card of a [connected
 * Stripe account](/docs/connect/bank-debit-card-payouts). You can retrieve individual payouts,
 * as well as list all payouts. Payouts are made on [varying
 * schedules](/docs/connect/manage-payout-schedule), depending on your country and
 * industry.
 *
 * Related guide: [Receiving Payouts](https://stripe.com/docs/payouts).
 *
 * @x-resourceId payout
 */
export type Payout = {
  /*
   * Amount (in %s) to be transferred to your bank account or debit card.
   */
  amount: number;
  /*
   * Date the payout is expected to arrive in the bank. This factors in delays like weekends or bank holidays.
   *
   * @format unix-time
   */
  arrival_date: number;
  /*
   * Returns `true` if the payout was created by an [automated payout schedule](https://stripe.com/docs/payouts#payout-schedule), and `false` if it was [requested manually](https://stripe.com/docs/payouts#manual-payouts).
   */
  automatic: boolean;
  /*
   * ID of the balance transaction that describes the impact of this payout on your account balance.
   */
  balance_transaction?: string | BalanceTransaction | null;
  /*
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   *
   * @format unix-time
   */
  created: number;
  /*
   * Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
   */
  currency: string;
  /*
   * An arbitrary string attached to the object. Often useful for displaying to users.
   *
   * @maxLength 5000
   */
  description?: string | null;
  /*
   * ID of the bank account or card the payout was sent to.
   */
  destination?:
    | string
    | BankAccount
    | Card
    | DeletedBankAccount
    | DeletedCard
    | null;
  /*
   * If the payout failed or was canceled, this will be the ID of the balance transaction that reversed the initial balance transaction, and puts the funds from the failed payout back in your balance.
   */
  failure_balance_transaction?: string | BalanceTransaction | null;
  /*
   * Error code explaining reason for payout failure if available. See [Types of payout failures](https://stripe.com/docs/api#payout_failures) for a list of failure codes.
   *
   * @maxLength 5000
   */
  failure_code?: string | null;
  /*
   * Message to user further explaining reason for payout failure if available.
   *
   * @maxLength 5000
   */
  failure_message?: string | null;
  /*
   * Unique identifier for the object.
   *
   * @maxLength 5000
   */
  id: string;
  /*
   * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
   */
  livemode: boolean;
  /*
   * Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
   */
  metadata?: {
    [key: string]: string;
  } | null;
  /*
   * The method used to send this payout, which can be `standard` or `instant`. `instant` is only supported for payouts to debit cards. (See [Instant payouts for marketplaces](https://stripe.com/blog/instant-payouts-for-marketplaces) for more information.)
   *
   * @maxLength 5000
   */
  method: string;
  /*
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: "payout";
  /*
   * If the payout reverses another, this is the ID of the original payout.
   */
  original_payout?: string | Payout | null;
  /*
   * If the payout was reversed, this is the ID of the payout that reverses this payout.
   */
  reversed_by?: string | Payout | null;
  /*
   * The source balance this payout came from. One of `card`, `fpx`, or `bank_account`.
   *
   * @maxLength 5000
   */
  source_type: string;
  /*
   * Extra information about a payout to be displayed on the user's bank statement.
   *
   * @maxLength 5000
   */
  statement_descriptor?: string | null;
  /*
   * Current status of the payout: `paid`, `pending`, `in_transit`, `canceled` or `failed`. A payout is `pending` until it is submitted to the bank, when it becomes `in_transit`. The status then changes to `paid` if the transaction goes through, or to `failed` or `canceled` (within 5 business days). Some failed payouts may initially show as `paid` but then change to `failed`.
   *
   * @maxLength 5000
   */
  status: string;
  /*
   * Can be `bank_account` or `card`.
   */
  type: "bank_account" | "card";
};

export type Period = {
  /*
   * The end date of this usage period. All usage up to and including this point in time is included.
   *
   * @format unix-time
   */
  end?: number | null;
  /*
   * The start date of this usage period. All usage after this point in time is included.
   *
   * @format unix-time
   */
  start?: number | null;
};

/**
 * This is an object representing a person associated with a Stripe account.
 *
 * A platform cannot access a Standard or Express account's persons after the account starts onboarding, such as after generating an account link for the account.
 * See the [Standard onboarding](https://stripe.com/docs/connect/standard-accounts) or [Express onboarding documentation](https://stripe.com/docs/connect/express-accounts) for information about platform pre-filling and account onboarding steps.
 *
 * Related guide: [Handling Identity Verification with the API](https://stripe.com/docs/connect/identity-verification-api#person-information).
 *
 * @x-resourceId person
 */
export type Person = {
  /*
   * The account the person is associated with.
   *
   * @maxLength 5000
   */
  account: string;
  address?: Address;
  address_kana?: LegalEntityJapanAddress | null;
  address_kanji?: LegalEntityJapanAddress | null;
  /*
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   *
   * @format unix-time
   */
  created: number;
  dob?: LegalEntityDob;
  /*
   * The person's email address.
   *
   * @maxLength 5000
   */
  email?: string | null;
  /*
   * The person's first name.
   *
   * @maxLength 5000
   */
  first_name?: string | null;
  /*
   * The Kana variation of the person's first name (Japan only).
   *
   * @maxLength 5000
   */
  first_name_kana?: string | null;
  /*
   * The Kanji variation of the person's first name (Japan only).
   *
   * @maxLength 5000
   */
  first_name_kanji?: string | null;
  /*
   * The person's gender (International regulations require either "male" or "female").
   */
  gender?: string | null;
  /*
   * Unique identifier for the object.
   *
   * @maxLength 5000
   */
  id: string;
  /*
   * Whether the person's `id_number` was provided.
   */
  id_number_provided?: boolean;
  /*
   * The person's last name.
   *
   * @maxLength 5000
   */
  last_name?: string | null;
  /*
   * The Kana variation of the person's last name (Japan only).
   *
   * @maxLength 5000
   */
  last_name_kana?: string | null;
  /*
   * The Kanji variation of the person's last name (Japan only).
   *
   * @maxLength 5000
   */
  last_name_kanji?: string | null;
  /*
   * The person's maiden name.
   *
   * @maxLength 5000
   */
  maiden_name?: string | null;
  /*
   * Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
   */
  metadata?: {
    [key: string]: string;
  };
  /*
   * The country where the person is a national.
   *
   * @maxLength 5000
   */
  nationality?: string | null;
  /*
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: "person";
  /*
   * The person's phone number.
   *
   * @maxLength 5000
   */
  phone?: string | null;
  /*
   * Indicates if the person or any of their representatives, family members, or other closely related persons, declares that they hold or have held an important public job or function, in any jurisdiction.
   */
  political_exposure?: "existing" | "none";
  relationship?: PersonRelationship;
  requirements?: PersonRequirements | null;
  /*
   * Whether the last four digits of the person's Social Security number have been provided (U.S. only).
   */
  ssn_last_4_provided?: boolean;
  verification?: LegalEntityPersonVerification;
};

export type PersonRelationship = {
  /*
   * Whether the person is a director of the account's legal entity. Currently only required for accounts in the EU. Directors are typically members of the governing board of the company, or responsible for ensuring the company meets its regulatory obligations.
   */
  director?: boolean | null;
  /*
   * Whether the person has significant responsibility to control, manage, or direct the organization.
   */
  executive?: boolean | null;
  /*
   * Whether the person is an owner of the account’s legal entity.
   */
  owner?: boolean | null;
  /*
   * The percent owned by the person of the account's legal entity.
   */
  percent_ownership?: number | null;
  /*
   * Whether the person is authorized as the primary representative of the account. This is the person nominated by the business to provide information about themselves, and general information about the account. There can only be one representative at any given time. At the time the account is created, this person should be set to the person responsible for opening the account.
   */
  representative?: boolean | null;
  /*
   * The person's title (e.g., CEO, Support Engineer).
   *
   * @maxLength 5000
   */
  title?: string | null;
};

export type PersonRequirements = {
  /*
   * Fields that need to be collected to keep the person's account enabled. If not collected by the account's `current_deadline`, these fields appear in `past_due` as well, and the account is disabled.
   */
  currently_due: string[];
  /*
   * Fields that are `currently_due` and need to be collected again because validation or verification failed.
   */
  errors: AccountRequirementsError[];
  /*
   * Fields that need to be collected assuming all volume thresholds are reached. As they become required, they appear in `currently_due` as well, and the account's `current_deadline` becomes set.
   */
  eventually_due: string[];
  /*
   * Fields that weren't collected by the account's `current_deadline`. These fields need to be collected to enable the person's account.
   */
  past_due: string[];
  /*
   * Fields that may become required depending on the results of verification or review. Will be an empty array unless an asynchronous verification is pending. If verification fails, these fields move to `eventually_due`, `currently_due`, or `past_due`.
   */
  pending_verification: string[];
};

/**
 * You can now model subscriptions more flexibly using the [Prices API](https://stripe.com/docs/api#prices). It replaces the Plans API and is backwards compatible to simplify your migration.
 *
 * Plans define the base price, currency, and billing cycle for recurring purchases of products.
 * [Products](https://stripe.com/docs/api#products) help you track inventory or provisioning, and plans help you track pricing. Different physical goods or levels of service should be represented by products, and pricing options should be represented by plans. This approach lets you change prices without having to change your provisioning scheme.
 *
 * For example, you might have a single "gold" product that has plans for $10/month, $100/year, €9/month, and €90/year.
 *
 * Related guides: [Set up a subscription](https://stripe.com/docs/billing/subscriptions/set-up-subscription) and more about [products and prices](https://stripe.com/docs/billing/prices-guide).
 *
 * @x-resourceId plan
 */
export type Plan = {
  /*
   * Whether the plan can be used for new purchases.
   */
  active: boolean;
  /*
   * Specifies a usage aggregation strategy for plans of `usage_type=metered`. Allowed values are `sum` for summing up all usage during a period, `last_during_period` for using the last usage record reported within a period, `last_ever` for using the last usage record ever (across period bounds) or `max` which uses the usage record with the maximum reported usage during a period. Defaults to `sum`.
   */
  aggregate_usage?: "last_during_period" | "last_ever" | "max" | "sum";
  /*
   * The unit amount in %s to be charged, represented as a whole integer if possible. Only set if `billing_scheme=per_unit`.
   */
  amount?: number | null;
  /*
   * The unit amount in %s to be charged, represented as a decimal string with at most 12 decimal places. Only set if `billing_scheme=per_unit`.
   *
   * @format decimal
   */
  amount_decimal?: string | null;
  /*
   * Describes how to compute the price per period. Either `per_unit` or `tiered`. `per_unit` indicates that the fixed amount (specified in `amount`) will be charged per unit in `quantity` (for plans with `usage_type=licensed`), or per unit of total usage (for plans with `usage_type=metered`). `tiered` indicates that the unit pricing will be computed using a tiering strategy as defined using the `tiers` and `tiers_mode` attributes.
   */
  billing_scheme: "per_unit" | "tiered";
  /*
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   *
   * @format unix-time
   */
  created: number;
  /*
   * Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
   */
  currency: string;
  /*
   * Unique identifier for the object.
   *
   * @maxLength 5000
   */
  id: string;
  /*
   * The frequency at which a subscription is billed. One of `day`, `week`, `month` or `year`.
   */
  interval: "day" | "month" | "week" | "year";
  /*
   * The number of intervals (specified in the `interval` attribute) between subscription billings. For example, `interval=month` and `interval_count=3` bills every 3 months.
   */
  interval_count: number;
  /*
   * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
   */
  livemode: boolean;
  /*
   * Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
   */
  metadata?: {
    [key: string]: string;
  } | null;
  /*
   * A brief description of the plan, hidden from customers.
   *
   * @maxLength 5000
   */
  nickname?: string | null;
  /*
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: "plan";
  /*
   * The product whose pricing this plan determines.
   */
  product?: string | Product | DeletedProduct | null;
  /*
   * Each element represents a pricing tier. This parameter requires `billing_scheme` to be set to `tiered`. See also the documentation for `billing_scheme`.
   */
  tiers?: PlanTier[];
  /*
   * Defines if the tiering price should be `graduated` or `volume` based. In `volume`-based tiering, the maximum quantity within a period determines the per unit price. In `graduated` tiering, pricing can change as the quantity grows.
   */
  tiers_mode?: "graduated" | "volume";
  /*
   * Apply a transformation to the reported usage or set quantity before computing the amount billed. Cannot be combined with `tiers`.
   */
  transform_usage?: TransformUsage | null;
  /*
   * Default number of trial days when subscribing a customer to this plan using [`trial_from_plan=true`](https://stripe.com/docs/api#create_subscription-trial_from_plan).
   */
  trial_period_days?: number | null;
  /*
   * Configures how the quantity per period should be determined. Can be either `metered` or `licensed`. `licensed` automatically bills the `quantity` set when adding it to a subscription. `metered` aggregates the total usage based on usage records. Defaults to `licensed`.
   */
  usage_type: "licensed" | "metered";
};

export type PlanTier = {
  /*
   * Price for the entire tier.
   */
  flat_amount?: number | null;
  /*
   * Same as `flat_amount`, but contains a decimal value with at most 12 decimal places.
   *
   * @format decimal
   */
  flat_amount_decimal?: string | null;
  /*
   * Per unit price for units relevant to the tier.
   */
  unit_amount?: number | null;
  /*
   * Same as `unit_amount`, but contains a decimal value with at most 12 decimal places.
   *
   * @format decimal
   */
  unit_amount_decimal?: string | null;
  /*
   * Up to and including to this quantity will be contained in the tier.
   */
  up_to?: number | null;
};

export type PlatformTaxFee = {
  /*
   * The Connected account that incurred this charge.
   *
   * @maxLength 5000
   */
  account: string;
  /*
   * Unique identifier for the object.
   *
   * @maxLength 5000
   */
  id: string;
  /*
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: "platform_tax_fee";
  /*
   * The payment object that caused this tax to be inflicted.
   *
   * @maxLength 5000
   */
  source_transaction: string;
  /*
   * The type of tax (VAT).
   *
   * @maxLength 5000
   */
  type: string;
};

export type PortalBusinessProfile = {
  /*
   * The messaging shown to customers in the portal.
   *
   * @maxLength 5000
   */
  headline?: string | null;
  /*
   * A link to the business’s publicly available privacy policy.
   *
   * @maxLength 5000
   */
  privacy_policy_url: string;
  /*
   * A link to the business’s publicly available terms of service.
   *
   * @maxLength 5000
   */
  terms_of_service_url: string;
};

export type PortalCustomerUpdate = {
  /*
   * The types of customer updates that are supported. When empty, customers are not updateable.
   */
  allowed_updates: ("address" | "email" | "phone" | "shipping" | "tax_id")[];
  /*
   * Whether the feature is enabled.
   */
  enabled: boolean;
};

export type PortalFeatures = {
  customer_update: PortalCustomerUpdate;
  invoice_history: PortalInvoiceList;
  payment_method_update: PortalPaymentMethodUpdate;
  subscription_cancel: PortalSubscriptionCancel;
  subscription_pause: PortalSubscriptionPause;
  subscription_update: PortalSubscriptionUpdate;
};

export type PortalInvoiceList = {
  /*
   * Whether the feature is enabled.
   */
  enabled: boolean;
};

export type PortalPaymentMethodUpdate = {
  /*
   * Whether the feature is enabled.
   */
  enabled: boolean;
};

export type PortalSubscriptionCancel = {
  /*
   * Whether the feature is enabled.
   */
  enabled: boolean;
  /*
   * Whether to cancel subscriptions immediately or at the end of the billing period.
   */
  mode: "at_period_end" | "immediately";
  /*
   * Whether to create prorations when canceling subscriptions. Possible values are `none` and `create_prorations`.
   */
  proration_behavior: "always_invoice" | "create_prorations" | "none";
};

export type PortalSubscriptionPause = {
  /*
   * Whether the feature is enabled.
   */
  enabled: boolean;
};

export type PortalSubscriptionUpdate = {
  /*
   * The types of subscription updates that are supported for items listed in the `products` attribute. When empty, subscriptions are not updateable.
   */
  default_allowed_updates: ("price" | "promotion_code" | "quantity")[];
  /*
   * Whether the feature is enabled.
   */
  enabled: boolean;
  /*
   * The list of products that support subscription updates.
   */
  products?: PortalSubscriptionUpdateProduct[] | null;
  /*
   * Determines how to handle prorations resulting from subscription updates. Valid values are `none`, `create_prorations`, and `always_invoice`.
   */
  proration_behavior: "always_invoice" | "create_prorations" | "none";
};

export type PortalSubscriptionUpdateProduct = {
  /*
   * The list of price IDs which, when subscribed to, a subscription can be updated.
   */
  prices: string[];
  /*
   * The product ID.
   *
   * @maxLength 5000
   */
  product: string;
};

/**
 * Prices define the unit cost, currency, and (optional) billing cycle for both recurring and one-time purchases of products.
 * [Products](https://stripe.com/docs/api#products) help you track inventory or provisioning, and prices help you track payment terms. Different physical goods or levels of service should be represented by products, and pricing options should be represented by prices. This approach lets you change prices without having to change your provisioning scheme.
 *
 * For example, you might have a single "gold" product that has prices for $10/month, $100/year, and €9 once.
 *
 * Related guides: [Set up a subscription](https://stripe.com/docs/billing/subscriptions/set-up-subscription), [create an invoice](https://stripe.com/docs/billing/invoices/create), and more about [products and prices](https://stripe.com/docs/billing/prices-guide).
 *
 * @x-resourceId price
 */
export type Price = {
  /*
   * Whether the price can be used for new purchases.
   */
  active: boolean;
  /*
   * Describes how to compute the price per period. Either `per_unit` or `tiered`. `per_unit` indicates that the fixed amount (specified in `unit_amount` or `unit_amount_decimal`) will be charged per unit in `quantity` (for prices with `usage_type=licensed`), or per unit of total usage (for prices with `usage_type=metered`). `tiered` indicates that the unit pricing will be computed using a tiering strategy as defined using the `tiers` and `tiers_mode` attributes.
   */
  billing_scheme: "per_unit" | "tiered";
  /*
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   *
   * @format unix-time
   */
  created: number;
  /*
   * Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
   */
  currency: string;
  /*
   * Unique identifier for the object.
   *
   * @maxLength 5000
   */
  id: string;
  /*
   * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
   */
  livemode: boolean;
  /*
   * A lookup key used to retrieve prices dynamically from a static string.
   *
   * @maxLength 5000
   */
  lookup_key?: string | null;
  /*
   * Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
   */
  metadata: {
    [key: string]: string;
  };
  /*
   * A brief description of the price, hidden from customers.
   *
   * @maxLength 5000
   */
  nickname?: string | null;
  /*
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: "price";
  /*
   * The ID of the product this price is associated with.
   */
  product: string | Product | DeletedProduct;
  /*
   * The recurring components of a price such as `interval` and `usage_type`.
   */
  recurring?: Recurring | null;
  /*
   * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of `inclusive`, `exclusive`, or `unspecified`. Once specified as either `inclusive` or `exclusive`, it cannot be changed.
   */
  tax_behavior?: "exclusive" | "inclusive" | "unspecified";
  /*
   * Each element represents a pricing tier. This parameter requires `billing_scheme` to be set to `tiered`. See also the documentation for `billing_scheme`.
   */
  tiers?: PriceTier[];
  /*
   * Defines if the tiering price should be `graduated` or `volume` based. In `volume`-based tiering, the maximum quantity within a period determines the per unit price. In `graduated` tiering, pricing can change as the quantity grows.
   */
  tiers_mode?: "graduated" | "volume";
  /*
   * Apply a transformation to the reported usage or set quantity before computing the amount billed. Cannot be combined with `tiers`.
   */
  transform_quantity?: TransformQuantity | null;
  /*
   * One of `one_time` or `recurring` depending on whether the price is for a one-time purchase or a recurring (subscription) purchase.
   */
  type: "one_time" | "recurring";
  /*
   * The unit amount in %s to be charged, represented as a whole integer if possible. Only set if `billing_scheme=per_unit`.
   */
  unit_amount?: number | null;
  /*
   * The unit amount in %s to be charged, represented as a decimal string with at most 12 decimal places. Only set if `billing_scheme=per_unit`.
   *
   * @format decimal
   */
  unit_amount_decimal?: string | null;
};

export type PriceTier = {
  /*
   * Price for the entire tier.
   */
  flat_amount?: number | null;
  /*
   * Same as `flat_amount`, but contains a decimal value with at most 12 decimal places.
   *
   * @format decimal
   */
  flat_amount_decimal?: string | null;
  /*
   * Per unit price for units relevant to the tier.
   */
  unit_amount?: number | null;
  /*
   * Same as `unit_amount`, but contains a decimal value with at most 12 decimal places.
   *
   * @format decimal
   */
  unit_amount_decimal?: string | null;
  /*
   * Up to and including to this quantity will be contained in the tier.
   */
  up_to?: number | null;
};

/**
 * Products describe the specific goods or services you offer to your customers.
 * For example, you might offer a Standard and Premium version of your goods or service; each version would be a separate Product.
 * They can be used in conjunction with [Prices](https://stripe.com/docs/api#prices) to configure pricing in Checkout and Subscriptions.
 *
 * Related guides: [Set up a subscription](https://stripe.com/docs/billing/subscriptions/set-up-subscription) or accept [one-time payments with Checkout](https://stripe.com/docs/payments/checkout/client#create-products) and more about [Products and Prices](https://stripe.com/docs/billing/prices-guide)
 *
 * @x-resourceId product
 */
export type Product = {
  /*
   * Whether the product is currently available for purchase.
   */
  active: boolean;
  /*
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   *
   * @format unix-time
   */
  created: number;
  /*
   * The product's description, meant to be displayable to the customer. Use this field to optionally store a long form explanation of the product being sold for your own rendering purposes.
   *
   * @maxLength 5000
   */
  description?: string | null;
  /*
   * Unique identifier for the object.
   *
   * @maxLength 5000
   */
  id: string;
  /*
   * A list of up to 8 URLs of images for this product, meant to be displayable to the customer.
   */
  images: string[];
  /*
   * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
   */
  livemode: boolean;
  /*
   * Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
   */
  metadata: {
    [key: string]: string;
  };
  /*
   * The product's name, meant to be displayable to the customer. Whenever this product is sold via a subscription, name will show up on associated invoice line item descriptions.
   *
   * @maxLength 5000
   */
  name: string;
  /*
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: "product";
  /*
   * The dimensions of this product for shipping purposes.
   */
  package_dimensions?: PackageDimensions | null;
  /*
   * Whether this product is shipped (i.e., physical goods).
   */
  shippable?: boolean | null;
  /*
   * Extra information about a product which will appear on your customer's credit card statement. In the case that multiple products are billed at once, the first statement descriptor will be used.
   *
   * @maxLength 5000
   */
  statement_descriptor?: string | null;
  /*
   * A [tax code](https://stripe.com/docs/tax/tax-codes) ID.
   */
  tax_code?: string | TaxCode | null;
  /*
   * A label that represents units of this product in Stripe and on customers’ receipts and invoices. When set, this will be included in associated invoice line item descriptions.
   *
   * @maxLength 5000
   */
  unit_label?: string | null;
  /*
   * Time at which the object was last updated. Measured in seconds since the Unix epoch.
   *
   * @format unix-time
   */
  updated: number;
  /*
   * A URL of a publicly-accessible webpage for this product.
   *
   * @maxLength 2048
   */
  url?: string | null;
};

/**
 * A Promotion Code represents a customer-redeemable code for a coupon. It can be used to
 * create multiple codes for a single coupon.
 *
 * @x-resourceId promotion_code
 */
export type PromotionCode = {
  /*
   * Whether the promotion code is currently active. A promotion code is only active if the coupon is also valid.
   */
  active: boolean;
  /*
   * The customer-facing code. Regardless of case, this code must be unique across all active promotion codes for each customer.
   *
   * @maxLength 5000
   */
  code: string;
  coupon: Coupon;
  /*
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   *
   * @format unix-time
   */
  created: number;
  /*
   * The customer that this promotion code can be used by.
   */
  customer?: string | Customer | DeletedCustomer | null;
  /*
   * Date at which the promotion code can no longer be redeemed.
   *
   * @format unix-time
   */
  expires_at?: number | null;
  /*
   * Unique identifier for the object.
   *
   * @maxLength 5000
   */
  id: string;
  /*
   * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
   */
  livemode: boolean;
  /*
   * Maximum number of times this promotion code can be redeemed.
   */
  max_redemptions?: number | null;
  /*
   * Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
   */
  metadata?: {
    [key: string]: string;
  } | null;
  /*
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: "promotion_code";
  restrictions: PromotionCodesResourceRestrictions;
  /*
   * Number of times this promotion code has been used.
   */
  times_redeemed: number;
};

export type PromotionCodesResourceRestrictions = {
  /*
   * A Boolean indicating if the Promotion Code should only be redeemed for Customers without any successful payments or invoices
   */
  first_time_transaction: boolean;
  /*
   * Minimum amount required to redeem this Promotion Code into a Coupon (e.g., a purchase must be $100 or more to work).
   */
  minimum_amount?: number | null;
  /*
   * Three-letter [ISO code](https://stripe.com/docs/currencies) for minimum_amount
   *
   * @maxLength 5000
   */
  minimum_amount_currency?: string | null;
};

/**
 * A Quote is a way to model prices that you'd like to provide to a customer.
 * Once accepted, it will automatically create an invoice, subscription or subscription schedule.
 *
 * @x-resourceId quote
 */
export type Quote = {
  /*
   * Total before any discounts or taxes are applied.
   */
  amount_subtotal: number;
  /*
   * Total after discounts and taxes are applied.
   */
  amount_total: number;
  /*
   * The amount of the application fee (if any) that will be requested to be applied to the payment and transferred to the application owner's Stripe account. Only applicable if there are no line items with recurring prices on the quote.
   */
  application_fee_amount?: number | null;
  /*
   * A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice subtotal that will be transferred to the application owner's Stripe account. Only applicable if there are line items with recurring prices on the quote.
   */
  application_fee_percent?: number | null;
  automatic_tax: QuotesResourceAutomaticTax;
  /*
   * Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay invoices at the end of the subscription cycle or on finalization using the default payment method attached to the subscription or customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions. Defaults to `charge_automatically`.
   */
  collection_method: "charge_automatically" | "send_invoice";
  computed: QuotesResourceComputed;
  /*
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   *
   * @format unix-time
   */
  created: number;
  /*
   * Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
   *
   * @maxLength 5000
   */
  currency?: string | null;
  /*
   * The customer which this quote belongs to. A customer is required before finalizing the quote. Once specified, it cannot be changed.
   */
  customer?: string | Customer | DeletedCustomer | null;
  /*
   * The tax rates applied to this quote.
   */
  default_tax_rates?: (string | TaxRate)[];
  /*
   * A description that will be displayed on the quote PDF.
   *
   * @maxLength 5000
   */
  description?: string | null;
  /*
   * The discounts applied to this quote.
   */
  discounts: (string | Discount)[];
  /*
   * The date on which the quote will be canceled if in `open` or `draft` status. Measured in seconds since the Unix epoch.
   *
   * @format unix-time
   */
  expires_at: number;
  /*
   * A footer that will be displayed on the quote PDF.
   *
   * @maxLength 5000
   */
  footer?: string | null;
  /*
   * Details of the quote that was cloned. See the [cloning documentation](https://stripe.com/docs/quotes/clone) for more details.
   */
  from_quote?: QuotesResourceFromQuote | null;
  /*
   * A header that will be displayed on the quote PDF.
   *
   * @maxLength 5000
   */
  header?: string | null;
  /*
   * Unique identifier for the object.
   *
   * @maxLength 5000
   */
  id: string;
  /*
   * The invoice that was created from this quote.
   */
  invoice?: string | Invoice | DeletedInvoice | null;
  /*
   * All invoices will be billed using the specified settings.
   */
  invoice_settings?: InvoiceSettingQuoteSetting | null;
  /*
   * A list of items the customer is being quoted for.
   */
  line_items?: {
    /*
     * Details about each object.
     */
    data: Item[];
    /*
     * True if this list has another page of items after this one that can be fetched.
     */
    has_more: boolean;
    /*
     * String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
     */
    object: "list";
    /*
     * The URL where this list can be accessed.
     *
     * @maxLength 5000
     */
    url: string;
  };
  /*
   * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
   */
  livemode: boolean;
  /*
   * Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
   */
  metadata: {
    [key: string]: string;
  };
  /*
   * A unique number that identifies this particular quote. This number is assigned once the quote is [finalized](https://stripe.com/docs/quotes/overview#finalize).
   *
   * @maxLength 5000
   */
  number?: string | null;
  /*
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: "quote";
  /*
   * The account on behalf of which to charge. See the [Connect documentation](https://support.stripe.com/questions/sending-invoices-on-behalf-of-connected-accounts) for details.
   */
  on_behalf_of?: string | Account | null;
  /*
   * The status of the quote.
   */
  status: "accepted" | "canceled" | "draft" | "open";
  status_transitions: QuotesResourceStatusTransitions;
  /*
   * The subscription that was created or updated from this quote.
   */
  subscription?: string | Subscription | null;
  subscription_data: QuotesResourceSubscriptionData;
  /*
   * The subscription schedule that was created or updated from this quote.
   */
  subscription_schedule?: string | SubscriptionSchedule | null;
  total_details: QuotesResourceTotalDetails;
  /*
   * The account (if any) the payments will be attributed to for tax reporting, and where funds from each payment will be transferred to for each of the invoices.
   */
  transfer_data?: QuotesResourceTransferData | null;
};

export type QuotesResourceAutomaticTax = {
  /*
   * Automatically calculate taxes
   */
  enabled: boolean;
  /*
   * The status of the most recent automated tax calculation for this quote.
   */
  status?: "complete" | "failed" | "requires_location_inputs";
};

export type QuotesResourceComputed = {
  /*
   * The definitive totals and line items the customer will be charged on a recurring basis. Takes into account the line items with recurring prices and discounts with `duration=forever` coupons only. Defaults to `null` if no inputted line items with recurring prices.
   */
  recurring?: QuotesResourceRecurring | null;
  upfront: QuotesResourceUpfront;
};

export type QuotesResourceFromQuote = {
  /*
   * Whether this quote is a revision of a different quote.
   */
  is_revision: boolean;
  /*
   * The quote that was cloned.
   */
  quote: string | Quote;
};

export type QuotesResourceRecurring = {
  /*
   * Total before any discounts or taxes are applied.
   */
  amount_subtotal: number;
  /*
   * Total after discounts and taxes are applied.
   */
  amount_total: number;
  /*
   * The frequency at which a subscription is billed. One of `day`, `week`, `month` or `year`.
   */
  interval: "day" | "month" | "week" | "year";
  /*
   * The number of intervals (specified in the `interval` attribute) between subscription billings. For example, `interval=month` and `interval_count=3` bills every 3 months.
   */
  interval_count: number;
  total_details: QuotesResourceTotalDetails;
};

export type QuotesResourceStatusTransitions = {
  /*
   * The time that the quote was accepted. Measured in seconds since Unix epoch.
   *
   * @format unix-time
   */
  accepted_at?: number | null;
  /*
   * The time that the quote was canceled. Measured in seconds since Unix epoch.
   *
   * @format unix-time
   */
  canceled_at?: number | null;
  /*
   * The time that the quote was finalized. Measured in seconds since Unix epoch.
   *
   * @format unix-time
   */
  finalized_at?: number | null;
};

export type QuotesResourceSubscriptionData = {
  /*
   * When creating a new subscription, the date of which the subscription schedule will start after the quote is accepted. This date is ignored if it is in the past when the quote is accepted. Measured in seconds since the Unix epoch.
   *
   * @format unix-time
   */
  effective_date?: number | null;
  /*
   * Integer representing the number of trial period days before the customer is charged for the first time.
   */
  trial_period_days?: number | null;
};

export type QuotesResourceTotalDetails = {
  /*
   * This is the sum of all the line item discounts.
   */
  amount_discount: number;
  /*
   * This is the sum of all the line item shipping amounts.
   */
  amount_shipping?: number | null;
  /*
   * This is the sum of all the line item tax amounts.
   */
  amount_tax: number;
  breakdown?: QuotesResourceTotalDetailsResourceBreakdown;
};

export type QuotesResourceTotalDetailsResourceBreakdown = {
  /*
   * The aggregated line item discounts.
   */
  discounts: LineItemsDiscountAmount[];
  /*
   * The aggregated line item tax amounts by rate.
   */
  taxes: LineItemsTaxAmount[];
};

export type QuotesResourceTransferData = {
  /*
   * The amount in %s that will be transferred to the destination account when the invoice is paid. By default, the entire amount is transferred to the destination.
   */
  amount?: number | null;
  /*
   * A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice subtotal that will be transferred to the destination account. By default, the entire amount will be transferred to the destination.
   */
  amount_percent?: number | null;
  /*
   * The account where funds from the payment will be transferred to upon payment success.
   */
  destination: string | Account;
};

export type QuotesResourceUpfront = {
  /*
   * Total before any discounts or taxes are applied.
   */
  amount_subtotal: number;
  /*
   * Total after discounts and taxes are applied.
   */
  amount_total: number;
  /*
   * The line items that will appear on the next invoice after this quote is accepted. This does not include pending invoice items that exist on the customer but may still be included in the next invoice.
   */
  line_items?: {
    /*
     * Details about each object.
     */
    data: Item[];
    /*
     * True if this list has another page of items after this one that can be fetched.
     */
    has_more: boolean;
    /*
     * String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
     */
    object: "list";
    /*
     * The URL where this list can be accessed.
     *
     * @maxLength 5000
     */
    url: string;
  };
  total_details: QuotesResourceTotalDetails;
};

/**
 * An early fraud warning indicates that the card issuer has notified us that a
 * charge may be fraudulent.
 *
 * Related guide: [Early Fraud Warnings](https://stripe.com/docs/disputes/measuring#early-fraud-warnings).
 *
 * @x-resourceId radar.early_fraud_warning
 */
export type RadarEarlyFraudWarning = {
  /*
   * An EFW is actionable if it has not received a dispute and has not been fully refunded. You may wish to proactively refund a charge that receives an EFW, in order to avoid receiving a dispute later.
   */
  actionable: boolean;
  /*
   * ID of the charge this early fraud warning is for, optionally expanded.
   */
  charge: string | Charge;
  /*
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   *
   * @format unix-time
   */
  created: number;
  /*
   * The type of fraud labelled by the issuer. One of `card_never_received`, `fraudulent_card_application`, `made_with_counterfeit_card`, `made_with_lost_card`, `made_with_stolen_card`, `misc`, `unauthorized_use_of_card`.
   *
   * @maxLength 5000
   */
  fraud_type: string;
  /*
   * Unique identifier for the object.
   *
   * @maxLength 5000
   */
  id: string;
  /*
   * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
   */
  livemode: boolean;
  /*
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: "radar.early_fraud_warning";
  /*
   * ID of the Payment Intent this early fraud warning is for, optionally expanded.
   */
  payment_intent?: string | PaymentIntent;
};

/**
 * Value lists allow you to group values together which can then be referenced in rules.
 *
 * Related guide: [Default Stripe Lists](https://stripe.com/docs/radar/lists#managing-list-items).
 *
 * @x-resourceId radar.value_list
 */
export type RadarValueList = {
  /*
   * The name of the value list for use in rules.
   *
   * @maxLength 5000
   */
  alias: string;
  /*
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   *
   * @format unix-time
   */
  created: number;
  /*
   * The name or email address of the user who created this value list.
   *
   * @maxLength 5000
   */
  created_by: string;
  /*
   * Unique identifier for the object.
   *
   * @maxLength 5000
   */
  id: string;
  /*
   * The type of items in the value list. One of `card_fingerprint`, `card_bin`, `email`, `ip_address`, `country`, `string`, or `case_sensitive_string`.
   */
  item_type:
    | "card_bin"
    | "card_fingerprint"
    | "case_sensitive_string"
    | "country"
    | "email"
    | "ip_address"
    | "string";
  /*
   * List of items contained within this value list.
   */
  list_items: {
    /*
     * Details about each object.
     */
    data: RadarValueListItem[];
    /*
     * True if this list has another page of items after this one that can be fetched.
     */
    has_more: boolean;
    /*
     * String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
     */
    object: "list";
    /*
     * The URL where this list can be accessed.
     *
     * @maxLength 5000
     */
    url: string;
  };
  /*
   * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
   */
  livemode: boolean;
  /*
   * Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
   */
  metadata: {
    [key: string]: string;
  };
  /*
   * The name of the value list.
   *
   * @maxLength 5000
   */
  name: string;
  /*
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: "radar.value_list";
};

/**
 * Value list items allow you to add specific values to a given Radar value list, which can then be used in rules.
 *
 * Related guide: [Managing List Items](https://stripe.com/docs/radar/lists#managing-list-items).
 *
 * @x-resourceId radar.value_list_item
 */
export type RadarValueListItem = {
  /*
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   *
   * @format unix-time
   */
  created: number;
  /*
   * The name or email address of the user who added this item to the value list.
   *
   * @maxLength 5000
   */
  created_by: string;
  /*
   * Unique identifier for the object.
   *
   * @maxLength 5000
   */
  id: string;
  /*
   * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
   */
  livemode: boolean;
  /*
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: "radar.value_list_item";
  /*
   * The value of the item.
   *
   * @maxLength 5000
   */
  value: string;
  /*
   * The identifier of the value list this item belongs to.
   *
   * @maxLength 5000
   */
  value_list: string;
};

export type RadarReviewResourceLocation = {
  /*
   * The city where the payment originated.
   *
   * @maxLength 5000
   */
  city?: string | null;
  /*
   * Two-letter ISO code representing the country where the payment originated.
   *
   * @maxLength 5000
   */
  country?: string | null;
  /*
   * The geographic latitude where the payment originated.
   */
  latitude?: number | null;
  /*
   * The geographic longitude where the payment originated.
   */
  longitude?: number | null;
  /*
   * The state/county/province/region where the payment originated.
   *
   * @maxLength 5000
   */
  region?: string | null;
};

export type RadarReviewResourceSession = {
  /*
   * The browser used in this browser session (e.g., `Chrome`).
   *
   * @maxLength 5000
   */
  browser?: string | null;
  /*
   * Information about the device used for the browser session (e.g., `Samsung SM-G930T`).
   *
   * @maxLength 5000
   */
  device?: string | null;
  /*
   * The platform for the browser session (e.g., `Macintosh`).
   *
   * @maxLength 5000
   */
  platform?: string | null;
  /*
   * The version for the browser session (e.g., `61.0.3163.100`).
   *
   * @maxLength 5000
   */
  version?: string | null;
};

/**
 * With `Recipient` objects, you can transfer money from your Stripe account to a
 * third-party bank account or debit card. The API allows you to create, delete,
 * and update your recipients. You can retrieve individual recipients as well as
 * a list of all your recipients.
 *
 * **`Recipient` objects have been deprecated in favor of
 * [Connect](https://stripe.com/docs/connect), specifically Connect's much more powerful
 * [Account objects](https://stripe.com/docs/api#account). Stripe accounts that don't already use
 * recipients can no longer begin doing so. Please use `Account` objects
 * instead.**
 *
 * @x-resourceId recipient
 */
export type Recipient = {
  /*
   * Hash describing the current account on the recipient, if there is one.
   */
  active_account?: BankAccount | null;
  cards?: {
    data: Card[];
    /*
     * True if this list has another page of items after this one that can be fetched.
     */
    has_more: boolean;
    /*
     * String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
     */
    object: "list";
    /*
     * The URL where this list can be accessed.
     *
     * @maxLength 5000
     */
    url: string;
  } | null;
  /*
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   *
   * @format unix-time
   */
  created: number;
  /*
   * The default card to use for creating transfers to this recipient.
   */
  default_card?: string | Card | null;
  /*
   * An arbitrary string attached to the object. Often useful for displaying to users.
   *
   * @maxLength 5000
   */
  description?: string | null;
  /*
   * @maxLength 5000
   */
  email?: string | null;
  /*
   * Unique identifier for the object.
   *
   * @maxLength 5000
   */
  id: string;
  /*
   * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
   */
  livemode: boolean;
  /*
   * Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
   */
  metadata: {
    [key: string]: string;
  };
  /*
   * The ID of the [Custom account](https://stripe.com/docs/connect/custom-accounts) this recipient was migrated to. If set, the recipient can no longer be updated, nor can transfers be made to it: use the Custom account instead.
   */
  migrated_to?: string | Account | null;
  /*
   * Full, legal name of the recipient.
   *
   * @maxLength 5000
   */
  name?: string | null;
  /*
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: "recipient";
  rolled_back_from?: string | Account;
  /*
   * Type of the recipient, one of `individual` or `corporation`.
   *
   * @maxLength 5000
   */
  type: string;
};

export type Recurring = {
  /*
   * Specifies a usage aggregation strategy for prices of `usage_type=metered`. Allowed values are `sum` for summing up all usage during a period, `last_during_period` for using the last usage record reported within a period, `last_ever` for using the last usage record ever (across period bounds) or `max` which uses the usage record with the maximum reported usage during a period. Defaults to `sum`.
   */
  aggregate_usage?: "last_during_period" | "last_ever" | "max" | "sum";
  /*
   * The frequency at which a subscription is billed. One of `day`, `week`, `month` or `year`.
   */
  interval: "day" | "month" | "week" | "year";
  /*
   * The number of intervals (specified in the `interval` attribute) between subscription billings. For example, `interval=month` and `interval_count=3` bills every 3 months.
   */
  interval_count: number;
  /*
   * Configures how the quantity per period should be determined. Can be either `metered` or `licensed`. `licensed` automatically bills the `quantity` set when adding it to a subscription. `metered` aggregates the total usage based on usage records. Defaults to `licensed`.
   */
  usage_type: "licensed" | "metered";
};

/**
 * `Refund` objects allow you to refund a charge that has previously been created
 * but not yet refunded. Funds will be refunded to the credit or debit card that
 * was originally charged.
 *
 * Related guide: [Refunds](https://stripe.com/docs/refunds).
 *
 * @x-resourceId refund
 */
export type Refund = {
  /*
   * Amount, in %s.
   */
  amount: number;
  /*
   * Balance transaction that describes the impact on your account balance.
   */
  balance_transaction?: string | BalanceTransaction | null;
  /*
   * ID of the charge that was refunded.
   */
  charge?: string | Charge | null;
  /*
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   *
   * @format unix-time
   */
  created: number;
  /*
   * Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
   */
  currency: string;
  /*
   * An arbitrary string attached to the object. Often useful for displaying to users. (Available on non-card refunds only)
   *
   * @maxLength 5000
   */
  description?: string;
  /*
   * If the refund failed, this balance transaction describes the adjustment made on your account balance that reverses the initial balance transaction.
   */
  failure_balance_transaction?: string | BalanceTransaction;
  /*
   * If the refund failed, the reason for refund failure if known. Possible values are `lost_or_stolen_card`, `expired_or_canceled_card`, or `unknown`.
   *
   * @maxLength 5000
   */
  failure_reason?: string;
  /*
   * Unique identifier for the object.
   *
   * @maxLength 5000
   */
  id: string;
  /*
   * Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
   */
  metadata?: {
    [key: string]: string;
  } | null;
  /*
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: "refund";
  /*
   * ID of the PaymentIntent that was refunded.
   */
  payment_intent?: string | PaymentIntent | null;
  /*
   * Reason for the refund, either user-provided (`duplicate`, `fraudulent`, or `requested_by_customer`) or generated by Stripe internally (`expired_uncaptured_charge`).
   *
   * @maxLength 5000
   */
  reason?: string | null;
  /*
   * This is the transaction number that appears on email receipts sent for this refund.
   *
   * @maxLength 5000
   */
  receipt_number?: string | null;
  /*
   * The transfer reversal that is associated with the refund. Only present if the charge came from another Stripe account. See the Connect documentation for details.
   */
  source_transfer_reversal?: string | TransferReversal | null;
  /*
   * Status of the refund. For credit card refunds, this can be `pending`, `succeeded`, or `failed`. For other types of refunds, it can be `pending`, `succeeded`, `failed`, or `canceled`. Refer to our [refunds](https://stripe.com/docs/refunds#failed-refunds) documentation for more details.
   *
   * @maxLength 5000
   */
  status?: string | null;
  /*
   * If the accompanying transfer was reversed, the transfer reversal object. Only applicable if the charge was created using the destination parameter.
   */
  transfer_reversal?: string | TransferReversal | null;
};

/**
 * The Report Run object represents an instance of a report type generated with
 * specific run parameters. Once the object is created, Stripe begins processing the report.
 * When the report has finished running, it will give you a reference to a file
 * where you can retrieve your results. For an overview, see
 * [API Access to Reports](https://stripe.com/docs/reporting/statements/api).
 *
 * Note that certain report types can only be run based on your live-mode data (not test-mode
 * data), and will error when queried without a [live-mode API key](https://stripe.com/docs/keys#test-live-modes).
 *
 * @x-resourceId reporting.report_run
 */
export type ReportingReportRun = {
  /*
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   *
   * @format unix-time
   */
  created: number;
  /*
   * If something should go wrong during the run, a message about the failure (populated when
   *  `status=failed`).
   *
   * @maxLength 5000
   */
  error?: string | null;
  /*
   * Unique identifier for the object.
   *
   * @maxLength 5000
   */
  id: string;
  /*
   * `true` if the report is run on live mode data and `false` if it is run on test mode data.
   */
  livemode: boolean;
  /*
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: "reporting.report_run";
  parameters: FinancialReportingFinanceReportRunRunParameters;
  /*
   * The ID of the [report type](https://stripe.com/docs/reports/report-types) to run, such as `"balance.summary.1"`.
   *
   * @maxLength 5000
   */
  report_type: string;
  /*
   * The file object representing the result of the report run (populated when
   *  `status=succeeded`).
   */
  result?: File | null;
  /*
   * Status of this report run. This will be `pending` when the run is initially created.
   *  When the run finishes, this will be set to `succeeded` and the `result` field will be populated.
   *  Rarely, we may encounter an error, at which point this will be set to `failed` and the `error` field will be populated.
   *
   * @maxLength 5000
   */
  status: string;
  /*
   * Timestamp at which this run successfully finished (populated when
   *  `status=succeeded`). Measured in seconds since the Unix epoch.
   *
   * @format unix-time
   */
  succeeded_at?: number | null;
};

/**
 * The Report Type resource corresponds to a particular type of report, such as
 * the "Activity summary" or "Itemized payouts" reports. These objects are
 * identified by an ID belonging to a set of enumerated values. See
 * [API Access to Reports documentation](https://stripe.com/docs/reporting/statements/api)
 * for those Report Type IDs, along with required and optional parameters.
 *
 * Note that certain report types can only be run based on your live-mode data (not test-mode
 * data), and will error when queried without a [live-mode API key](https://stripe.com/docs/keys#test-live-modes).
 *
 * @x-resourceId reporting.report_type
 */
export type ReportingReportType = {
  /*
   * Most recent time for which this Report Type is available. Measured in seconds since the Unix epoch.
   *
   * @format unix-time
   */
  data_available_end: number;
  /*
   * Earliest time for which this Report Type is available. Measured in seconds since the Unix epoch.
   *
   * @format unix-time
   */
  data_available_start: number;
  /*
   * List of column names that are included by default when this Report Type gets run. (If the Report Type doesn't support the `columns` parameter, this will be null.)
   */
  default_columns?: string[] | null;
  /*
   * The [ID of the Report Type](https://stripe.com/docs/reporting/statements/api#available-report-types), such as `balance.summary.1`.
   *
   * @maxLength 5000
   */
  id: string;
  /*
   * Human-readable name of the Report Type
   *
   * @maxLength 5000
   */
  name: string;
  /*
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: "reporting.report_type";
  /*
   * When this Report Type was latest updated. Measured in seconds since the Unix epoch.
   *
   * @format unix-time
   */
  updated: number;
  /*
   * Version of the Report Type. Different versions report with the same ID will have the same purpose, but may take different run parameters or have different result schemas.
   */
  version: number;
};

export type ReserveTransaction = {
  amount: number;
  /*
   * Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
   */
  currency: string;
  /*
   * An arbitrary string attached to the object. Often useful for displaying to users.
   *
   * @maxLength 5000
   */
  description?: string | null;
  /*
   * Unique identifier for the object.
   *
   * @maxLength 5000
   */
  id: string;
  /*
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: "reserve_transaction";
};

/**
 * Reviews can be used to supplement automated fraud detection with human expertise.
 *
 * Learn more about [Radar](/radar) and reviewing payments
 * [here](https://stripe.com/docs/radar/reviews).
 *
 * @x-resourceId review
 */
export type Review = {
  /*
   * The ZIP or postal code of the card used, if applicable.
   *
   * @maxLength 5000
   */
  billing_zip?: string | null;
  /*
   * The charge associated with this review.
   */
  charge?: string | Charge | null;
  /*
   * The reason the review was closed, or null if it has not yet been closed. One of `approved`, `refunded`, `refunded_as_fraud`, `disputed`, or `redacted`.
   */
  closed_reason?:
    | "approved"
    | "disputed"
    | "redacted"
    | "refunded"
    | "refunded_as_fraud";
  /*
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   *
   * @format unix-time
   */
  created: number;
  /*
   * Unique identifier for the object.
   *
   * @maxLength 5000
   */
  id: string;
  /*
   * The IP address where the payment originated.
   *
   * @maxLength 5000
   */
  ip_address?: string | null;
  /*
   * Information related to the location of the payment. Note that this information is an approximation and attempts to locate the nearest population center - it should not be used to determine a specific address.
   */
  ip_address_location?: RadarReviewResourceLocation | null;
  /*
   * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
   */
  livemode: boolean;
  /*
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: "review";
  /*
   * If `true`, the review needs action.
   */
  open: boolean;
  /*
   * The reason the review was opened. One of `rule` or `manual`.
   */
  opened_reason: "manual" | "rule";
  /*
   * The PaymentIntent ID associated with this review, if one exists.
   */
  payment_intent?: string | PaymentIntent;
  /*
   * The reason the review is currently open or closed. One of `rule`, `manual`, `approved`, `refunded`, `refunded_as_fraud`, `disputed`, or `redacted`.
   *
   * @maxLength 5000
   */
  reason: string;
  /*
   * Information related to the browsing session of the user who initiated the payment.
   */
  session?: RadarReviewResourceSession | null;
};

export type Rule = {
  /*
   * The action taken on the payment.
   *
   * @maxLength 5000
   */
  action: string;
  /*
   * Unique identifier for the object.
   *
   * @maxLength 5000
   */
  id: string;
  /*
   * The predicate to evaluate the payment against.
   *
   * @maxLength 5000
   */
  predicate: string;
};

/**
 * If you have [scheduled a Sigma query](https://stripe.com/docs/sigma/scheduled-queries), you'll
 * receive a `sigma.scheduled_query_run.created` webhook each time the query
 * runs. The webhook contains a `ScheduledQueryRun` object, which you can use to
 * retrieve the query results.
 *
 * @x-resourceId scheduled_query_run
 */
export type ScheduledQueryRun = {
  /*
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   *
   * @format unix-time
   */
  created: number;
  /*
   * When the query was run, Sigma contained a snapshot of your Stripe data at this time.
   *
   * @format unix-time
   */
  data_load_time: number;
  error?: SigmaScheduledQueryRunError;
  /*
   * The file object representing the results of the query.
   */
  file?: File | null;
  /*
   * Unique identifier for the object.
   *
   * @maxLength 5000
   */
  id: string;
  /*
   * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
   */
  livemode: boolean;
  /*
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: "scheduled_query_run";
  /*
   * Time at which the result expires and is no longer available for download.
   *
   * @format unix-time
   */
  result_available_until: number;
  /*
   * SQL for the query.
   *
   * @maxLength 100000
   */
  sql: string;
  /*
   * The query's execution status, which will be `completed` for successful runs, and `canceled`, `failed`, or `timed_out` otherwise.
   *
   * @maxLength 5000
   */
  status: string;
  /*
   * Title of the query.
   *
   * @maxLength 5000
   */
  title: string;
};

export type SchedulesPhaseAutomaticTax = {
  /*
   * Whether Stripe automatically computes tax on invoices created during this phase.
   */
  enabled: boolean;
};

export type SepaDebitGeneratedFrom = {
  /*
   * The ID of the Charge that generated this PaymentMethod, if any.
   */
  charge?: string | Charge | null;
  /*
   * The ID of the SetupAttempt that generated this PaymentMethod, if any.
   */
  setup_attempt?: string | SetupAttempt | null;
};

/**
 * A SetupAttempt describes one attempted confirmation of a SetupIntent,
 * whether that confirmation was successful or unsuccessful. You can use
 * SetupAttempts to inspect details of a specific attempt at setting up a
 * payment method using a SetupIntent.
 *
 * @x-resourceId setup_attempt
 */
export type SetupAttempt = {
  /*
   * The value of [application](https://stripe.com/docs/api/setup_intents/object#setup_intent_object-application) on the SetupIntent at the time of this confirmation.
   */
  application?: string | Application | null;
  /*
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   *
   * @format unix-time
   */
  created: number;
  /*
   * The value of [customer](https://stripe.com/docs/api/setup_intents/object#setup_intent_object-customer) on the SetupIntent at the time of this confirmation.
   */
  customer?: string | Customer | DeletedCustomer | null;
  /*
   * Unique identifier for the object.
   *
   * @maxLength 5000
   */
  id: string;
  /*
   * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
   */
  livemode: boolean;
  /*
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: "setup_attempt";
  /*
   * The value of [on_behalf_of](https://stripe.com/docs/api/setup_intents/object#setup_intent_object-on_behalf_of) on the SetupIntent at the time of this confirmation.
   */
  on_behalf_of?: string | Account | null;
  /*
   * ID of the payment method used with this SetupAttempt.
   */
  payment_method: string | PaymentMethod;
  payment_method_details: SetupAttemptPaymentMethodDetails;
  /*
   * The error encountered during this attempt to confirm the SetupIntent, if any.
   */
  setup_error?: ApiErrors | null;
  /*
   * ID of the SetupIntent that this attempt belongs to.
   */
  setup_intent: string | SetupIntent;
  /*
   * Status of this SetupAttempt, one of `requires_confirmation`, `requires_action`, `processing`, `succeeded`, `failed`, or `abandoned`.
   *
   * @maxLength 5000
   */
  status: string;
  /*
   * The value of [usage](https://stripe.com/docs/api/setup_intents/object#setup_intent_object-usage) on the SetupIntent at the time of this confirmation, one of `off_session` or `on_session`.
   *
   * @maxLength 5000
   */
  usage: string;
};

export type SetupAttemptPaymentMethodDetails = {
  acss_debit?: SetupAttemptPaymentMethodDetailsAcssDebit;
  au_becs_debit?: SetupAttemptPaymentMethodDetailsAuBecsDebit;
  bacs_debit?: SetupAttemptPaymentMethodDetailsBacsDebit;
  bancontact?: SetupAttemptPaymentMethodDetailsBancontact;
  card?: SetupAttemptPaymentMethodDetailsCard;
  card_present?: SetupAttemptPaymentMethodDetailsCardPresent;
  ideal?: SetupAttemptPaymentMethodDetailsIdeal;
  sepa_debit?: SetupAttemptPaymentMethodDetailsSepaDebit;
  sofort?: SetupAttemptPaymentMethodDetailsSofort;
  /*
   * The type of the payment method used in the SetupIntent (e.g., `card`). An additional hash is included on `payment_method_details` with a name matching this value. It contains confirmation-specific information for the payment method.
   *
   * @maxLength 5000
   */
  type: string;
};

export type SetupAttemptPaymentMethodDetailsAcssDebit = {};

export type SetupAttemptPaymentMethodDetailsAuBecsDebit = {};

export type SetupAttemptPaymentMethodDetailsBacsDebit = {};

export type SetupAttemptPaymentMethodDetailsBancontact = {
  /*
   * Bank code of bank associated with the bank account.
   *
   * @maxLength 5000
   */
  bank_code?: string | null;
  /*
   * Name of the bank associated with the bank account.
   *
   * @maxLength 5000
   */
  bank_name?: string | null;
  /*
   * Bank Identifier Code of the bank associated with the bank account.
   *
   * @maxLength 5000
   */
  bic?: string | null;
  /*
   * The ID of the SEPA Direct Debit PaymentMethod which was generated by this SetupAttempt.
   */
  generated_sepa_debit?: string | PaymentMethod | null;
  /*
   * The mandate for the SEPA Direct Debit PaymentMethod which was generated by this SetupAttempt.
   */
  generated_sepa_debit_mandate?: string | Mandate | null;
  /*
   * Last four characters of the IBAN.
   *
   * @maxLength 5000
   */
  iban_last4?: string | null;
  /*
   * Preferred language of the Bancontact authorization page that the customer is redirected to.
   * Can be one of `en`, `de`, `fr`, or `nl`
   */
  preferred_language?: "de" | "en" | "fr" | "nl";
  /*
   * Owner's verified full name. Values are verified or provided by Bancontact directly
   * (if supported) at the time of authorization or settlement. They cannot be set or mutated.
   *
   * @maxLength 5000
   */
  verified_name?: string | null;
};

export type SetupAttemptPaymentMethodDetailsCard = {
  /*
   * Populated if this authorization used 3D Secure authentication.
   */
  three_d_secure?: ThreeDSecureDetails | null;
};

export type SetupAttemptPaymentMethodDetailsCardPresent = {
  /*
   * The ID of the Card PaymentMethod which was generated by this SetupAttempt.
   */
  generated_card?: string | PaymentMethod | null;
};

export type SetupAttemptPaymentMethodDetailsIdeal = {
  /*
   * The customer's bank. Can be one of `abn_amro`, `asn_bank`, `bunq`, `handelsbanken`, `ing`, `knab`, `moneyou`, `rabobank`, `regiobank`, `revolut`, `sns_bank`, `triodos_bank`, or `van_lanschot`.
   */
  bank?:
    | "abn_amro"
    | "asn_bank"
    | "bunq"
    | "handelsbanken"
    | "ing"
    | "knab"
    | "moneyou"
    | "rabobank"
    | "regiobank"
    | "revolut"
    | "sns_bank"
    | "triodos_bank"
    | "van_lanschot";
  /*
   * The Bank Identifier Code of the customer's bank.
   */
  bic?:
    | "ABNANL2A"
    | "ASNBNL21"
    | "BUNQNL2A"
    | "FVLBNL22"
    | "HANDNL2A"
    | "INGBNL2A"
    | "KNABNL2H"
    | "MOYONL21"
    | "RABONL2U"
    | "RBRBNL21"
    | "REVOLT21"
    | "SNSBNL2A"
    | "TRIONL2U";
  /*
   * The ID of the SEPA Direct Debit PaymentMethod which was generated by this SetupAttempt.
   */
  generated_sepa_debit?: string | PaymentMethod | null;
  /*
   * The mandate for the SEPA Direct Debit PaymentMethod which was generated by this SetupAttempt.
   */
  generated_sepa_debit_mandate?: string | Mandate | null;
  /*
   * Last four characters of the IBAN.
   *
   * @maxLength 5000
   */
  iban_last4?: string | null;
  /*
   * Owner's verified full name. Values are verified or provided by iDEAL directly
   * (if supported) at the time of authorization or settlement. They cannot be set or mutated.
   *
   * @maxLength 5000
   */
  verified_name?: string | null;
};

export type SetupAttemptPaymentMethodDetailsSepaDebit = {};

export type SetupAttemptPaymentMethodDetailsSofort = {
  /*
   * Bank code of bank associated with the bank account.
   *
   * @maxLength 5000
   */
  bank_code?: string | null;
  /*
   * Name of the bank associated with the bank account.
   *
   * @maxLength 5000
   */
  bank_name?: string | null;
  /*
   * Bank Identifier Code of the bank associated with the bank account.
   *
   * @maxLength 5000
   */
  bic?: string | null;
  /*
   * The ID of the SEPA Direct Debit PaymentMethod which was generated by this SetupAttempt.
   */
  generated_sepa_debit?: string | PaymentMethod | null;
  /*
   * The mandate for the SEPA Direct Debit PaymentMethod which was generated by this SetupAttempt.
   */
  generated_sepa_debit_mandate?: string | Mandate | null;
  /*
   * Last four characters of the IBAN.
   *
   * @maxLength 5000
   */
  iban_last4?: string | null;
  /*
   * Preferred language of the Sofort authorization page that the customer is redirected to.
   * Can be one of `en`, `de`, `fr`, or `nl`
   */
  preferred_language?: "de" | "en" | "fr" | "nl";
  /*
   * Owner's verified full name. Values are verified or provided by Sofort directly
   * (if supported) at the time of authorization or settlement. They cannot be set or mutated.
   *
   * @maxLength 5000
   */
  verified_name?: string | null;
};

/**
 * A SetupIntent guides you through the process of setting up and saving a customer's payment credentials for future payments.
 * For example, you could use a SetupIntent to set up and save your customer's card without immediately collecting a payment.
 * Later, you can use [PaymentIntents](https://stripe.com/docs/api#payment_intents) to drive the payment flow.
 *
 * Create a SetupIntent as soon as you're ready to collect your customer's payment credentials.
 * Do not maintain long-lived, unconfirmed SetupIntents as they may no longer be valid.
 * The SetupIntent then transitions through multiple [statuses](https://stripe.com/docs/payments/intents#intent-statuses) as it guides
 * you through the setup process.
 *
 * Successful SetupIntents result in payment credentials that are optimized for future payments.
 * For example, cardholders in [certain regions](/guides/strong-customer-authentication) may need to be run through
 * [Strong Customer Authentication](https://stripe.com/docs/strong-customer-authentication) at the time of payment method collection
 * in order to streamline later [off-session payments](https://stripe.com/docs/payments/setup-intents).
 * If the SetupIntent is used with a [Customer](https://stripe.com/docs/api#setup_intent_object-customer), upon success,
 * it will automatically attach the resulting payment method to that Customer.
 * We recommend using SetupIntents or [setup_future_usage](https://stripe.com/docs/api#payment_intent_object-setup_future_usage) on
 * PaymentIntents to save payment methods in order to prevent saving invalid or unoptimized payment methods.
 *
 * By using SetupIntents, you ensure that your customers experience the minimum set of required friction,
 * even as regulations change over time.
 *
 * Related guide: [Setup Intents API](https://stripe.com/docs/payments/setup-intents).
 *
 * @x-resourceId setup_intent
 */
export type SetupIntent = {
  /*
   * ID of the Connect application that created the SetupIntent.
   */
  application?: string | Application | null;
  /*
   * Reason for cancellation of this SetupIntent, one of `abandoned`, `requested_by_customer`, or `duplicate`.
   */
  cancellation_reason?: "abandoned" | "duplicate" | "requested_by_customer";
  /*
   * The client secret of this SetupIntent. Used for client-side retrieval using a publishable key.
   *
   * The client secret can be used to complete payment setup from your frontend. It should not be stored, logged, embedded in URLs, or exposed to anyone other than the customer. Make sure that you have TLS enabled on any page that includes the client secret.
   *
   * @maxLength 5000
   */
  client_secret?: string | null;
  /*
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   *
   * @format unix-time
   */
  created: number;
  /*
   * ID of the Customer this SetupIntent belongs to, if one exists.
   *
   * If present, the SetupIntent's payment method will be attached to the Customer on successful setup. Payment methods attached to other Customers cannot be used with this SetupIntent.
   */
  customer?: string | Customer | DeletedCustomer | null;
  /*
   * An arbitrary string attached to the object. Often useful for displaying to users.
   *
   * @maxLength 5000
   */
  description?: string | null;
  /*
   * Unique identifier for the object.
   *
   * @maxLength 5000
   */
  id: string;
  /*
   * The error encountered in the previous SetupIntent confirmation.
   */
  last_setup_error?: ApiErrors | null;
  /*
   * The most recent SetupAttempt for this SetupIntent.
   */
  latest_attempt?: string | SetupAttempt | null;
  /*
   * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
   */
  livemode: boolean;
  /*
   * ID of the multi use Mandate generated by the SetupIntent.
   */
  mandate?: string | Mandate | null;
  /*
   * Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
   */
  metadata?: {
    [key: string]: string;
  } | null;
  /*
   * If present, this property tells you what actions you need to take in order for your customer to continue payment setup.
   */
  next_action?: SetupIntentNextAction | null;
  /*
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: "setup_intent";
  /*
   * The account (if any) for which the setup is intended.
   */
  on_behalf_of?: string | Account | null;
  /*
   * ID of the payment method used with this SetupIntent.
   */
  payment_method?: string | PaymentMethod | null;
  /*
   * Payment-method-specific configuration for this SetupIntent.
   */
  payment_method_options?: SetupIntentPaymentMethodOptions | null;
  /*
   * The list of payment method types (e.g. card) that this SetupIntent is allowed to set up.
   */
  payment_method_types: string[];
  /*
   * ID of the single_use Mandate generated by the SetupIntent.
   */
  single_use_mandate?: string | Mandate | null;
  /*
   * [Status](https://stripe.com/docs/payments/intents#intent-statuses) of this SetupIntent, one of `requires_payment_method`, `requires_confirmation`, `requires_action`, `processing`, `canceled`, or `succeeded`.
   */
  status:
    | "canceled"
    | "processing"
    | "requires_action"
    | "requires_confirmation"
    | "requires_payment_method"
    | "succeeded";
  /*
   * Indicates how the payment method is intended to be used in the future.
   *
   * Use `on_session` if you intend to only reuse the payment method when the customer is in your checkout flow. Use `off_session` if your customer may or may not be in your checkout flow. If not provided, this value defaults to `off_session`.
   *
   * @maxLength 5000
   */
  usage: string;
};

export type SetupIntentNextAction = {
  redirect_to_url?: SetupIntentNextActionRedirectToUrl;
  /*
   * Type of the next action to perform, one of `redirect_to_url`, `use_stripe_sdk`, `alipay_handle_redirect`, or `oxxo_display_details`.
   *
   * @maxLength 5000
   */
  type: string;
  /*
   * When confirming a SetupIntent with Stripe.js, Stripe.js depends on the contents of this dictionary to invoke authentication flows. The shape of the contents is subject to change and is only intended to be used by Stripe.js.
   */
  use_stripe_sdk?: Record<string, any>;
  verify_with_microdeposits?: SetupIntentNextActionVerifyWithMicrodeposits;
};

export type SetupIntentNextActionRedirectToUrl = {
  /*
   * If the customer does not exit their browser while authenticating, they will be redirected to this specified URL after completion.
   *
   * @maxLength 5000
   */
  return_url?: string | null;
  /*
   * The URL you must redirect your customer to in order to authenticate.
   *
   * @maxLength 5000
   */
  url?: string | null;
};

export type SetupIntentNextActionVerifyWithMicrodeposits = {
  /*
   * The timestamp when the microdeposits are expected to land.
   *
   * @format unix-time
   */
  arrival_date: number;
  /*
   * The URL for the hosted verification page, which allows customers to verify their bank account.
   *
   * @maxLength 5000
   */
  hosted_verification_url: string;
};

export type SetupIntentPaymentMethodOptions = {
  acss_debit?: SetupIntentPaymentMethodOptionsAcssDebit;
  card?: SetupIntentPaymentMethodOptionsCard;
  sepa_debit?: SetupIntentPaymentMethodOptionsSepaDebit;
};

export type SetupIntentPaymentMethodOptionsAcssDebit = {
  /*
   * Currency supported by the bank account
   */
  currency?: "cad" | "usd";
  mandate_options?: SetupIntentPaymentMethodOptionsMandateOptionsAcssDebit;
  /*
   * Bank account verification method.
   *
   * @x-stripeBypassValidation true
   */
  verification_method?: "automatic" | "instant" | "microdeposits";
};

export type SetupIntentPaymentMethodOptionsCard = {
  /*
   * We strongly recommend that you rely on our SCA Engine to automatically prompt your customers for authentication based on risk level and [other requirements](https://stripe.com/docs/strong-customer-authentication). However, if you wish to request 3D Secure based on logic from your own fraud engine, provide this option. Permitted values include: `automatic` or `any`. If not provided, defaults to `automatic`. Read our guide on [manually requesting 3D Secure](https://stripe.com/docs/payments/3d-secure#manual-three-ds) for more information on how this configuration interacts with Radar and our SCA Engine.
   */
  request_three_d_secure?: "any" | "automatic" | "challenge_only";
};

export type SetupIntentPaymentMethodOptionsMandateOptionsAcssDebit = {
  /*
   * A URL for custom mandate text
   *
   * @maxLength 5000
   */
  custom_mandate_url?: string;
  /*
   * Description of the interval. Only required if the 'payment_schedule' parameter is 'interval' or 'combined'.
   *
   * @maxLength 5000
   */
  interval_description?: string | null;
  /*
   * Payment schedule for the mandate.
   */
  payment_schedule?: "combined" | "interval" | "sporadic";
  /*
   * Transaction type of the mandate.
   */
  transaction_type?: "business" | "personal";
};

export type SetupIntentPaymentMethodOptionsMandateOptionsSepaDebit = {};

export type SetupIntentPaymentMethodOptionsSepaDebit = {
  mandate_options?: SetupIntentPaymentMethodOptionsMandateOptionsSepaDebit;
};

export type Shipping = {
  address?: Address;
  /*
   * The delivery service that shipped a physical product, such as Fedex, UPS, USPS, etc.
   *
   * @maxLength 5000
   */
  carrier?: string | null;
  /*
   * Recipient name.
   *
   * @maxLength 5000
   */
  name?: string | null;
  /*
   * Recipient phone (including extension).
   *
   * @maxLength 5000
   */
  phone?: string | null;
  /*
   * The tracking number for a physical product, obtained from the delivery service. If multiple tracking numbers were generated for this purchase, please separate them with commas.
   *
   * @maxLength 5000
   */
  tracking_number?: string | null;
};

export type ShippingMethod = {
  /*
   * A positive integer in the smallest currency unit (that is, 100 cents for $1.00, or 1 for ¥1, Japanese Yen being a zero-decimal currency) representing the total amount for the line item.
   */
  amount: number;
  /*
   * Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
   */
  currency: string;
  /*
   * The estimated delivery date for the given shipping method. Can be either a specific date or a range.
   */
  delivery_estimate?: DeliveryEstimate | null;
  /*
   * An arbitrary string attached to the object. Often useful for displaying to users.
   *
   * @maxLength 5000
   */
  description: string;
  /*
   * Unique identifier for the object.
   *
   * @maxLength 5000
   */
  id: string;
};

export type SigmaScheduledQueryRunError = {
  /*
   * Information about the run failure.
   *
   * @maxLength 5000
   */
  message: string;
};

/**
 * Stores representations of [stock keeping units](http://en.wikipedia.org/wiki/Stock_keeping_unit).
 * SKUs describe specific product variations, taking into account any combination of: attributes,
 * currency, and cost. For example, a product may be a T-shirt, whereas a specific SKU represents
 * the `size: large`, `color: red` version of that shirt.
 *
 * Can also be used to manage inventory.
 *
 * Related guide: [Tax, Shipping, and Inventory](https://stripe.com/docs/orders).
 *
 * @x-resourceId sku
 */
export type Sku = {
  /*
   * Whether the SKU is available for purchase.
   */
  active: boolean;
  /*
   * A dictionary of attributes and values for the attributes defined by the product. If, for example, a product's attributes are `["size", "gender"]`, a valid SKU has the following dictionary of attributes: `{"size": "Medium", "gender": "Unisex"}`.
   */
  attributes: {
    [key: string]: string;
  };
  /*
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   *
   * @format unix-time
   */
  created: number;
  /*
   * Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
   */
  currency: string;
  /*
   * Unique identifier for the object.
   *
   * @maxLength 5000
   */
  id: string;
  /*
   * The URL of an image for this SKU, meant to be displayable to the customer.
   *
   * @maxLength 2048
   */
  image?: string | null;
  inventory: SkuInventory;
  /*
   * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
   */
  livemode: boolean;
  /*
   * Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
   */
  metadata: {
    [key: string]: string;
  };
  /*
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: "sku";
  /*
   * The dimensions of this SKU for shipping purposes.
   */
  package_dimensions?: PackageDimensions | null;
  /*
   * The cost of the item as a positive integer in the smallest currency unit (that is, 100 cents to charge $1.00, or 100 to charge ¥100, Japanese Yen being a zero-decimal currency).
   */
  price: number;
  /*
   * The ID of the product this SKU is associated with. The product must be currently active.
   */
  product: string | Product;
  /*
   * Time at which the object was last updated. Measured in seconds since the Unix epoch.
   *
   * @format unix-time
   */
  updated: number;
};

export type SkuInventory = {
  /*
   * The count of inventory available. Will be present if and only if `type` is `finite`.
   */
  quantity?: number | null;
  /*
   * Inventory type. Possible values are `finite`, `bucket` (not quantified), and `infinite`.
   *
   * @maxLength 5000
   */
  type: string;
  /*
   * An indicator of the inventory available. Possible values are `in_stock`, `limited`, and `out_of_stock`. Will be present if and only if `type` is `bucket`.
   *
   * @maxLength 5000
   */
  value?: string | null;
};

/**
 * `Source` objects allow you to accept a variety of payment methods. They
 * represent a customer's payment instrument, and can be used with the Stripe API
 * just like a `Card` object: once chargeable, they can be charged, or can be
 * attached to customers.
 *
 * Related guides: [Sources API](https://stripe.com/docs/sources) and [Sources & Customers](https://stripe.com/docs/sources/customers).
 *
 * @x-resourceId source
 */
export type Source = {
  ach_credit_transfer?: SourceTypeAchCreditTransfer;
  ach_debit?: SourceTypeAchDebit;
  acss_debit?: SourceTypeAcssDebit;
  alipay?: SourceTypeAlipay;
  /*
   * A positive integer in the smallest currency unit (that is, 100 cents for $1.00, or 1 for ¥1, Japanese Yen being a zero-decimal currency) representing the total amount associated with the source. This is the amount for which the source will be chargeable once ready. Required for `single_use` sources.
   */
  amount?: number | null;
  au_becs_debit?: SourceTypeAuBecsDebit;
  bancontact?: SourceTypeBancontact;
  card?: SourceTypeCard;
  card_present?: SourceTypeCardPresent;
  /*
   * The client secret of the source. Used for client-side retrieval using a publishable key.
   *
   * @maxLength 5000
   */
  client_secret: string;
  code_verification?: SourceCodeVerificationFlow;
  /*
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   *
   * @format unix-time
   */
  created: number;
  /*
   * Three-letter [ISO code for the currency](https://stripe.com/docs/currencies) associated with the source. This is the currency for which the source will be chargeable once ready. Required for `single_use` sources.
   */
  currency?: string | null;
  /*
   * The ID of the customer to which this source is attached. This will not be present when the source has not been attached to a customer.
   *
   * @maxLength 5000
   */
  customer?: string;
  eps?: SourceTypeEps;
  /*
   * The authentication `flow` of the source. `flow` is one of `redirect`, `receiver`, `code_verification`, `none`.
   *
   * @maxLength 5000
   */
  flow: string;
  giropay?: SourceTypeGiropay;
  /*
   * Unique identifier for the object.
   *
   * @maxLength 5000
   */
  id: string;
  ideal?: SourceTypeIdeal;
  klarna?: SourceTypeKlarna;
  /*
   * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
   */
  livemode: boolean;
  /*
   * Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
   */
  metadata?: {
    [key: string]: string;
  } | null;
  multibanco?: SourceTypeMultibanco;
  /*
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: "source";
  /*
   * Information about the owner of the payment instrument that may be used or required by particular source types.
   */
  owner?: SourceOwner | null;
  p24?: SourceTypeP24;
  receiver?: SourceReceiverFlow;
  redirect?: SourceRedirectFlow;
  sepa_debit?: SourceTypeSepaDebit;
  sofort?: SourceTypeSofort;
  source_order?: SourceOrder;
  /*
   * Extra information about a source. This will appear on your customer's statement every time you charge the source.
   *
   * @maxLength 5000
   */
  statement_descriptor?: string | null;
  /*
   * The status of the source, one of `canceled`, `chargeable`, `consumed`, `failed`, or `pending`. Only `chargeable` sources can be used to create a charge.
   *
   * @maxLength 5000
   */
  status: string;
  three_d_secure?: SourceTypeThreeDSecure;
  /*
   * The `type` of the source. The `type` is a payment method, one of `ach_credit_transfer`, `ach_debit`, `alipay`, `bancontact`, `card`, `card_present`, `eps`, `giropay`, `ideal`, `multibanco`, `klarna`, `p24`, `sepa_debit`, `sofort`, `three_d_secure`, or `wechat`. An additional hash is included on the source with a name matching this value. It contains additional information specific to the [payment method](https://stripe.com/docs/sources) used.
   *
   * @x-stripeBypassValidation true
   */
  type:
    | "ach_credit_transfer"
    | "ach_debit"
    | "acss_debit"
    | "alipay"
    | "au_becs_debit"
    | "bancontact"
    | "card"
    | "card_present"
    | "eps"
    | "giropay"
    | "ideal"
    | "klarna"
    | "multibanco"
    | "p24"
    | "sepa_debit"
    | "sofort"
    | "three_d_secure"
    | "wechat";
  /*
   * Either `reusable` or `single_use`. Whether this source should be reusable or not. Some source types may or may not be reusable by construction, while others may leave the option at creation. If an incompatible value is passed, an error will be returned.
   *
   * @maxLength 5000
   */
  usage?: string | null;
  wechat?: SourceTypeWechat;
};

export type SourceCodeVerificationFlow = {
  /*
   * The number of attempts remaining to authenticate the source object with a verification code.
   */
  attempts_remaining: number;
  /*
   * The status of the code verification, either `pending` (awaiting verification, `attempts_remaining` should be greater than 0), `succeeded` (successful verification) or `failed` (failed verification, cannot be verified anymore as `attempts_remaining` should be 0).
   *
   * @maxLength 5000
   */
  status: string;
};

/**
 * Source mandate notifications should be created when a notification related to
 * a source mandate must be sent to the payer. They will trigger a webhook or
 * deliver an email to the customer.
 *
 * @x-resourceId source_mandate_notification
 */
export type SourceMandateNotification = {
  acss_debit?: SourceMandateNotificationAcssDebitData;
  /*
   * A positive integer in the smallest currency unit (that is, 100 cents for $1.00, or 1 for ¥1, Japanese Yen being a zero-decimal currency) representing the amount associated with the mandate notification. The amount is expressed in the currency of the underlying source. Required if the notification type is `debit_initiated`.
   */
  amount?: number | null;
  bacs_debit?: SourceMandateNotificationBacsDebitData;
  /*
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   *
   * @format unix-time
   */
  created: number;
  /*
   * Unique identifier for the object.
   *
   * @maxLength 5000
   */
  id: string;
  /*
   * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
   */
  livemode: boolean;
  /*
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: "source_mandate_notification";
  /*
   * The reason of the mandate notification. Valid reasons are `mandate_confirmed` or `debit_initiated`.
   *
   * @maxLength 5000
   */
  reason: string;
  sepa_debit?: SourceMandateNotificationSepaDebitData;
  source: Source;
  /*
   * The status of the mandate notification. Valid statuses are `pending` or `submitted`.
   *
   * @maxLength 5000
   */
  status: string;
  /*
   * The type of source this mandate notification is attached to. Should be the source type identifier code for the payment method, such as `three_d_secure`.
   *
   * @maxLength 5000
   */
  type: string;
};

export type SourceMandateNotificationAcssDebitData = {
  /*
   * The statement descriptor associate with the debit.
   *
   * @maxLength 5000
   */
  statement_descriptor?: string;
};

export type SourceMandateNotificationBacsDebitData = {
  /*
   * Last 4 digits of the account number associated with the debit.
   *
   * @maxLength 5000
   */
  last4?: string;
};

export type SourceMandateNotificationSepaDebitData = {
  /*
   * SEPA creditor ID.
   *
   * @maxLength 5000
   */
  creditor_identifier?: string;
  /*
   * Last 4 digits of the account number associated with the debit.
   *
   * @maxLength 5000
   */
  last4?: string;
  /*
   * Mandate reference associated with the debit.
   *
   * @maxLength 5000
   */
  mandate_reference?: string;
};

export type SourceOrder = {
  /*
   * A positive integer in the smallest currency unit (that is, 100 cents for $1.00, or 1 for ¥1, Japanese Yen being a zero-decimal currency) representing the total amount for the order.
   */
  amount: number;
  /*
   * Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
   */
  currency: string;
  /*
   * The email address of the customer placing the order.
   *
   * @maxLength 5000
   */
  email?: string;
  /*
   * List of items constituting the order.
   */
  items?: SourceOrderItem[] | null;
  shipping?: Shipping;
};

export type SourceOrderItem = {
  /*
   * The amount (price) for this order item.
   */
  amount?: number | null;
  /*
   * This currency of this order item. Required when `amount` is present.
   *
   * @maxLength 5000
   */
  currency?: string | null;
  /*
   * Human-readable description for this order item.
   *
   * @maxLength 5000
   */
  description?: string | null;
  /*
   * The ID of the associated object for this line item. Expandable if not null (e.g., expandable to a SKU).
   *
   * @maxLength 5000
   */
  parent?: string | null;
  /*
   * The quantity of this order item. When type is `sku`, this is the number of instances of the SKU to be ordered.
   */
  quantity?: number;
  /*
   * The type of this order item. Must be `sku`, `tax`, or `shipping`.
   *
   * @maxLength 5000
   */
  type?: string | null;
};

export type SourceOwner = {
  /*
   * Owner's address.
   */
  address?: Address | null;
  /*
   * Owner's email address.
   *
   * @maxLength 5000
   */
  email?: string | null;
  /*
   * Owner's full name.
   *
   * @maxLength 5000
   */
  name?: string | null;
  /*
   * Owner's phone number (including extension).
   *
   * @maxLength 5000
   */
  phone?: string | null;
  /*
   * Verified owner's address. Verified values are verified or provided by the payment method directly (and if supported) at the time of authorization or settlement. They cannot be set or mutated.
   */
  verified_address?: Address | null;
  /*
   * Verified owner's email address. Verified values are verified or provided by the payment method directly (and if supported) at the time of authorization or settlement. They cannot be set or mutated.
   *
   * @maxLength 5000
   */
  verified_email?: string | null;
  /*
   * Verified owner's full name. Verified values are verified or provided by the payment method directly (and if supported) at the time of authorization or settlement. They cannot be set or mutated.
   *
   * @maxLength 5000
   */
  verified_name?: string | null;
  /*
   * Verified owner's phone number (including extension). Verified values are verified or provided by the payment method directly (and if supported) at the time of authorization or settlement. They cannot be set or mutated.
   *
   * @maxLength 5000
   */
  verified_phone?: string | null;
};

export type SourceReceiverFlow = {
  /*
   * The address of the receiver source. This is the value that should be communicated to the customer to send their funds to.
   *
   * @maxLength 5000
   */
  address?: string | null;
  /*
   * The total amount that was moved to your balance. This is almost always equal to the amount charged. In rare cases when customers deposit excess funds and we are unable to refund those, those funds get moved to your balance and show up in amount_charged as well. The amount charged is expressed in the source's currency.
   */
  amount_charged: number;
  /*
   * The total amount received by the receiver source. `amount_received = amount_returned + amount_charged` should be true for consumed sources unless customers deposit excess funds. The amount received is expressed in the source's currency.
   */
  amount_received: number;
  /*
   * The total amount that was returned to the customer. The amount returned is expressed in the source's currency.
   */
  amount_returned: number;
  /*
   * Type of refund attribute method, one of `email`, `manual`, or `none`.
   *
   * @maxLength 5000
   */
  refund_attributes_method: string;
  /*
   * Type of refund attribute status, one of `missing`, `requested`, or `available`.
   *
   * @maxLength 5000
   */
  refund_attributes_status: string;
};

export type SourceRedirectFlow = {
  /*
   * The failure reason for the redirect, either `user_abort` (the customer aborted or dropped out of the redirect flow), `declined` (the authentication failed or the transaction was declined), or `processing_error` (the redirect failed due to a technical error). Present only if the redirect status is `failed`.
   *
   * @maxLength 5000
   */
  failure_reason?: string | null;
  /*
   * The URL you provide to redirect the customer to after they authenticated their payment.
   *
   * @maxLength 5000
   */
  return_url: string;
  /*
   * The status of the redirect, either `pending` (ready to be used by your customer to authenticate the transaction), `succeeded` (succesful authentication, cannot be reused) or `not_required` (redirect should not be used) or `failed` (failed authentication, cannot be reused).
   *
   * @maxLength 5000
   */
  status: string;
  /*
   * The URL provided to you to redirect a customer to as part of a `redirect` authentication flow.
   *
   * @maxLength 2048
   */
  url: string;
};

/**
 * Some payment methods have no required amount that a customer must send.
 * Customers can be instructed to send any amount, and it can be made up of
 * multiple transactions. As such, sources can have multiple associated
 * transactions.
 *
 * @x-resourceId source_transaction
 */
export type SourceTransaction = {
  ach_credit_transfer?: SourceTransactionAchCreditTransferData;
  /*
   * A positive integer in the smallest currency unit (that is, 100 cents for $1.00, or 1 for ¥1, Japanese Yen being a zero-decimal currency) representing the amount your customer has pushed to the receiver.
   */
  amount: number;
  chf_credit_transfer?: SourceTransactionChfCreditTransferData;
  /*
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   *
   * @format unix-time
   */
  created: number;
  /*
   * Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
   */
  currency: string;
  gbp_credit_transfer?: SourceTransactionGbpCreditTransferData;
  /*
   * Unique identifier for the object.
   *
   * @maxLength 5000
   */
  id: string;
  /*
   * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
   */
  livemode: boolean;
  /*
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: "source_transaction";
  paper_check?: SourceTransactionPaperCheckData;
  sepa_credit_transfer?: SourceTransactionSepaCreditTransferData;
  /*
   * The ID of the source this transaction is attached to.
   *
   * @maxLength 5000
   */
  source: string;
  /*
   * The status of the transaction, one of `succeeded`, `pending`, or `failed`.
   *
   * @maxLength 5000
   */
  status: string;
  /*
   * The type of source this transaction is attached to.
   */
  type:
    | "ach_credit_transfer"
    | "ach_debit"
    | "alipay"
    | "bancontact"
    | "card"
    | "card_present"
    | "eps"
    | "giropay"
    | "ideal"
    | "klarna"
    | "multibanco"
    | "p24"
    | "sepa_debit"
    | "sofort"
    | "three_d_secure"
    | "wechat";
};

export type SourceTransactionAchCreditTransferData = {
  /*
   * Customer data associated with the transfer.
   *
   * @maxLength 5000
   */
  customer_data?: string;
  /*
   * Bank account fingerprint associated with the transfer.
   *
   * @maxLength 5000
   */
  fingerprint?: string;
  /*
   * Last 4 digits of the account number associated with the transfer.
   *
   * @maxLength 5000
   */
  last4?: string;
  /*
   * Routing number associated with the transfer.
   *
   * @maxLength 5000
   */
  routing_number?: string;
};

export type SourceTransactionChfCreditTransferData = {
  /*
   * Reference associated with the transfer.
   *
   * @maxLength 5000
   */
  reference?: string;
  /*
   * Sender's country address.
   *
   * @maxLength 5000
   */
  sender_address_country?: string;
  /*
   * Sender's line 1 address.
   *
   * @maxLength 5000
   */
  sender_address_line1?: string;
  /*
   * Sender's bank account IBAN.
   *
   * @maxLength 5000
   */
  sender_iban?: string;
  /*
   * Sender's name.
   *
   * @maxLength 5000
   */
  sender_name?: string;
};

export type SourceTransactionGbpCreditTransferData = {
  /*
   * Bank account fingerprint associated with the Stripe owned bank account receiving the transfer.
   *
   * @maxLength 5000
   */
  fingerprint?: string;
  /*
   * The credit transfer rails the sender used to push this transfer. The possible rails are: Faster Payments, BACS, CHAPS, and wire transfers. Currently only Faster Payments is supported.
   *
   * @maxLength 5000
   */
  funding_method?: string;
  /*
   * Last 4 digits of sender account number associated with the transfer.
   *
   * @maxLength 5000
   */
  last4?: string;
  /*
   * Sender entered arbitrary information about the transfer.
   *
   * @maxLength 5000
   */
  reference?: string;
  /*
   * Sender account number associated with the transfer.
   *
   * @maxLength 5000
   */
  sender_account_number?: string;
  /*
   * Sender name associated with the transfer.
   *
   * @maxLength 5000
   */
  sender_name?: string;
  /*
   * Sender sort code associated with the transfer.
   *
   * @maxLength 5000
   */
  sender_sort_code?: string;
};

export type SourceTransactionPaperCheckData = {
  /*
   * Time at which the deposited funds will be available for use. Measured in seconds since the Unix epoch.
   *
   * @maxLength 5000
   */
  available_at?: string;
  /*
   * Comma-separated list of invoice IDs associated with the paper check.
   *
   * @maxLength 5000
   */
  invoices?: string;
};

export type SourceTransactionSepaCreditTransferData = {
  /*
   * Reference associated with the transfer.
   *
   * @maxLength 5000
   */
  reference?: string;
  /*
   * Sender's bank account IBAN.
   *
   * @maxLength 5000
   */
  sender_iban?: string;
  /*
   * Sender's name.
   *
   * @maxLength 5000
   */
  sender_name?: string;
};

export type SourceTypeAchCreditTransfer = {
  account_number?: string | null;
  bank_name?: string | null;
  fingerprint?: string | null;
  refund_account_holder_name?: string | null;
  refund_account_holder_type?: string | null;
  refund_routing_number?: string | null;
  routing_number?: string | null;
  swift_code?: string | null;
};

export type SourceTypeAchDebit = {
  bank_name?: string | null;
  country?: string | null;
  fingerprint?: string | null;
  last4?: string | null;
  routing_number?: string | null;
  type?: string | null;
};

export type SourceTypeAcssDebit = {
  bank_address_city?: string | null;
  bank_address_line_1?: string | null;
  bank_address_line_2?: string | null;
  bank_address_postal_code?: string | null;
  bank_name?: string | null;
  category?: string | null;
  country?: string | null;
  fingerprint?: string | null;
  last4?: string | null;
  routing_number?: string | null;
};

export type SourceTypeAlipay = {
  data_string?: string | null;
  native_url?: string | null;
  statement_descriptor?: string | null;
};

export type SourceTypeAuBecsDebit = {
  bsb_number?: string | null;
  fingerprint?: string | null;
  last4?: string | null;
};

export type SourceTypeBancontact = {
  bank_code?: string | null;
  bank_name?: string | null;
  bic?: string | null;
  iban_last4?: string | null;
  preferred_language?: string | null;
  statement_descriptor?: string | null;
};

export type SourceTypeCard = {
  address_line1_check?: string | null;
  address_zip_check?: string | null;
  brand?: string | null;
  country?: string | null;
  cvc_check?: string | null;
  dynamic_last4?: string | null;
  exp_month?: number | null;
  exp_year?: number | null;
  fingerprint?: string;
  funding?: string | null;
  last4?: string | null;
  name?: string | null;
  three_d_secure?: string;
  tokenization_method?: string | null;
};

export type SourceTypeCardPresent = {
  application_cryptogram?: string;
  application_preferred_name?: string;
  authorization_code?: string | null;
  authorization_response_code?: string;
  brand?: string | null;
  country?: string | null;
  cvm_type?: string;
  data_type?: string | null;
  dedicated_file_name?: string;
  emv_auth_data?: string;
  evidence_customer_signature?: string | null;
  evidence_transaction_certificate?: string | null;
  exp_month?: number | null;
  exp_year?: number | null;
  fingerprint?: string;
  funding?: string | null;
  last4?: string | null;
  pos_device_id?: string | null;
  pos_entry_mode?: string;
  read_method?: string | null;
  reader?: string | null;
  terminal_verification_results?: string;
  transaction_status_information?: string;
};

export type SourceTypeEps = {
  reference?: string | null;
  statement_descriptor?: string | null;
};

export type SourceTypeGiropay = {
  bank_code?: string | null;
  bank_name?: string | null;
  bic?: string | null;
  statement_descriptor?: string | null;
};

export type SourceTypeIdeal = {
  bank?: string | null;
  bic?: string | null;
  iban_last4?: string | null;
  statement_descriptor?: string | null;
};

export type SourceTypeKlarna = {
  background_image_url?: string;
  client_token?: string | null;
  first_name?: string;
  last_name?: string;
  locale?: string;
  logo_url?: string;
  page_title?: string;
  pay_later_asset_urls_descriptive?: string;
  pay_later_asset_urls_standard?: string;
  pay_later_name?: string;
  pay_later_redirect_url?: string;
  pay_now_asset_urls_descriptive?: string;
  pay_now_asset_urls_standard?: string;
  pay_now_name?: string;
  pay_now_redirect_url?: string;
  pay_over_time_asset_urls_descriptive?: string;
  pay_over_time_asset_urls_standard?: string;
  pay_over_time_name?: string;
  pay_over_time_redirect_url?: string;
  payment_method_categories?: string;
  purchase_country?: string;
  purchase_type?: string;
  redirect_url?: string;
  shipping_delay?: number;
  shipping_first_name?: string;
  shipping_last_name?: string;
};

export type SourceTypeMultibanco = {
  entity?: string | null;
  reference?: string | null;
  refund_account_holder_address_city?: string | null;
  refund_account_holder_address_country?: string | null;
  refund_account_holder_address_line1?: string | null;
  refund_account_holder_address_line2?: string | null;
  refund_account_holder_address_postal_code?: string | null;
  refund_account_holder_address_state?: string | null;
  refund_account_holder_name?: string | null;
  refund_iban?: string | null;
};

export type SourceTypeP24 = {
  reference?: string | null;
};

export type SourceTypeSepaDebit = {
  bank_code?: string | null;
  branch_code?: string | null;
  country?: string | null;
  fingerprint?: string | null;
  last4?: string | null;
  mandate_reference?: string | null;
  mandate_url?: string | null;
};

export type SourceTypeSofort = {
  bank_code?: string | null;
  bank_name?: string | null;
  bic?: string | null;
  country?: string | null;
  iban_last4?: string | null;
  preferred_language?: string | null;
  statement_descriptor?: string | null;
};

export type SourceTypeThreeDSecure = {
  address_line1_check?: string | null;
  address_zip_check?: string | null;
  authenticated?: boolean | null;
  brand?: string | null;
  card?: string | null;
  country?: string | null;
  customer?: string | null;
  cvc_check?: string | null;
  dynamic_last4?: string | null;
  exp_month?: number | null;
  exp_year?: number | null;
  fingerprint?: string;
  funding?: string | null;
  last4?: string | null;
  name?: string | null;
  three_d_secure?: string;
  tokenization_method?: string | null;
};

export type SourceTypeWechat = {
  prepay_id?: string;
  qr_code_url?: string | null;
  statement_descriptor?: string;
};

export type StatusTransitions = {
  /*
   * The time that the order was canceled.
   *
   * @format unix-time
   */
  canceled?: number | null;
  /*
   * The time that the order was fulfilled.
   *
   * @format unix-time
   */
  fulfiled?: number | null;
  /*
   * The time that the order was paid.
   *
   * @format unix-time
   */
  paid?: number | null;
  /*
   * The time that the order was returned.
   *
   * @format unix-time
   */
  returned?: number | null;
};

/**
 * Subscriptions allow you to charge a customer on a recurring basis.
 *
 * Related guide: [Creating Subscriptions](https://stripe.com/docs/billing/subscriptions/creating).
 *
 * @x-resourceId subscription
 */
export type Subscription = {
  /*
   * A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice subtotal that will be transferred to the application owner's Stripe account.
   */
  application_fee_percent?: number | null;
  automatic_tax: SubscriptionAutomaticTax;
  /*
   * Determines the date of the first full invoice, and, for plans with `month` or `year` intervals, the day of the month for subsequent invoices.
   *
   * @format unix-time
   */
  billing_cycle_anchor: number;
  /*
   * Define thresholds at which an invoice will be sent, and the subscription advanced to a new billing period
   */
  billing_thresholds?: SubscriptionBillingThresholds | null;
  /*
   * A date in the future at which the subscription will automatically get canceled
   *
   * @format unix-time
   */
  cancel_at?: number | null;
  /*
   * If the subscription has been canceled with the `at_period_end` flag set to `true`, `cancel_at_period_end` on the subscription will be true. You can use this attribute to determine whether a subscription that has a status of active is scheduled to be canceled at the end of the current period.
   */
  cancel_at_period_end: boolean;
  /*
   * If the subscription has been canceled, the date of that cancellation. If the subscription was canceled with `cancel_at_period_end`, `canceled_at` will reflect the time of the most recent update request, not the end of the subscription period when the subscription is automatically moved to a canceled state.
   *
   * @format unix-time
   */
  canceled_at?: number | null;
  /*
   * Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay this subscription at the end of the cycle using the default source attached to the customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions.
   */
  collection_method: "charge_automatically" | "send_invoice";
  /*
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   *
   * @format unix-time
   */
  created: number;
  /*
   * End of the current period that the subscription has been invoiced for. At the end of this period, a new invoice will be created.
   *
   * @format unix-time
   */
  current_period_end: number;
  /*
   * Start of the current period that the subscription has been invoiced for.
   *
   * @format unix-time
   */
  current_period_start: number;
  /*
   * ID of the customer who owns the subscription.
   */
  customer: string | Customer | DeletedCustomer;
  /*
   * Number of days a customer has to pay invoices generated by this subscription. This value will be `null` for subscriptions where `collection_method=charge_automatically`.
   */
  days_until_due?: number | null;
  /*
   * ID of the default payment method for the subscription. It must belong to the customer associated with the subscription. This takes precedence over `default_source`. If neither are set, invoices will use the customer's [invoice_settings.default_payment_method](https://stripe.com/docs/api/customers/object#customer_object-invoice_settings-default_payment_method) or [default_source](https://stripe.com/docs/api/customers/object#customer_object-default_source).
   */
  default_payment_method?: string | PaymentMethod | null;
  /*
   * ID of the default payment source for the subscription. It must belong to the customer associated with the subscription and be in a chargeable state. If `default_payment_method` is also set, `default_payment_method` will take precedence. If neither are set, invoices will use the customer's [invoice_settings.default_payment_method](https://stripe.com/docs/api/customers/object#customer_object-invoice_settings-default_payment_method) or [default_source](https://stripe.com/docs/api/customers/object#customer_object-default_source).
   */
  default_source?:
    | string
    | AlipayAccount
    | BankAccount
    | BitcoinReceiver
    | Card
    | Source
    | null;
  /*
   * The tax rates that will apply to any subscription item that does not have `tax_rates` set. Invoices created will have their `default_tax_rates` populated from the subscription.
   */
  default_tax_rates?: TaxRate[] | null;
  /*
   * Describes the current discount applied to this subscription, if there is one. When billing, a discount applied to a subscription overrides a discount applied on a customer-wide basis.
   */
  discount?: Discount | null;
  /*
   * If the subscription has ended, the date the subscription ended.
   *
   * @format unix-time
   */
  ended_at?: number | null;
  /*
   * Unique identifier for the object.
   *
   * @maxLength 5000
   */
  id: string;
  /*
   * List of subscription items, each with an attached price.
   */
  items: {
    /*
     * Details about each object.
     */
    data: SubscriptionItem[];
    /*
     * True if this list has another page of items after this one that can be fetched.
     */
    has_more: boolean;
    /*
     * String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
     */
    object: "list";
    /*
     * The URL where this list can be accessed.
     *
     * @maxLength 5000
     */
    url: string;
  };
  /*
   * The most recent invoice this subscription has generated.
   */
  latest_invoice?: string | Invoice | null;
  /*
   * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
   */
  livemode: boolean;
  /*
   * Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
   */
  metadata: {
    [key: string]: string;
  };
  /*
   * Specifies the approximate timestamp on which any pending invoice items will be billed according to the schedule provided at `pending_invoice_item_interval`.
   *
   * @format unix-time
   */
  next_pending_invoice_item_invoice?: number | null;
  /*
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: "subscription";
  /*
   * If specified, payment collection for this subscription will be paused.
   */
  pause_collection?: SubscriptionsResourcePauseCollection | null;
  /*
   * Payment settings passed on to invoices created by the subscription.
   */
  payment_settings?: SubscriptionsResourcePaymentSettings | null;
  /*
   * Specifies an interval for how often to bill for any pending invoice items. It is analogous to calling [Create an invoice](https://stripe.com/docs/api#create_invoice) for the given subscription at the specified interval.
   */
  pending_invoice_item_interval?: SubscriptionPendingInvoiceItemInterval | null;
  /*
   * You can use this [SetupIntent](https://stripe.com/docs/api/setup_intents) to collect user authentication when creating a subscription without immediate payment or updating a subscription's payment method, allowing you to optimize for off-session payments. Learn more in the [SCA Migration Guide](https://stripe.com/docs/billing/migration/strong-customer-authentication#scenario-2).
   */
  pending_setup_intent?: string | SetupIntent | null;
  /*
   * If specified, [pending updates](https://stripe.com/docs/billing/subscriptions/pending-updates) that will be applied to the subscription once the `latest_invoice` has been paid.
   */
  pending_update?: SubscriptionsResourcePendingUpdate | null;
  /*
   * The schedule attached to the subscription
   */
  schedule?: string | SubscriptionSchedule | null;
  /*
   * Date when the subscription was first created. The date might differ from the `created` date due to backdating.
   *
   * @format unix-time
   */
  start_date: number;
  /*
   * Possible values are `incomplete`, `incomplete_expired`, `trialing`, `active`, `past_due`, `canceled`, or `unpaid`.
   *
   * For `collection_method=charge_automatically` a subscription moves into `incomplete` if the initial payment attempt fails. A subscription in this state can only have metadata and default_source updated. Once the first invoice is paid, the subscription moves into an `active` state. If the first invoice is not paid within 23 hours, the subscription transitions to `incomplete_expired`. This is a terminal state, the open invoice will be voided and no further invoices will be generated.
   *
   * A subscription that is currently in a trial period is `trialing` and moves to `active` when the trial period is over.
   *
   * If subscription `collection_method=charge_automatically` it becomes `past_due` when payment to renew it fails and `canceled` or `unpaid` (depending on your subscriptions settings) when Stripe has exhausted all payment retry attempts.
   *
   * If subscription `collection_method=send_invoice` it becomes `past_due` when its invoice is not paid by the due date, and `canceled` or `unpaid` if it is still not paid by an additional deadline after that. Note that when a subscription has a status of `unpaid`, no subsequent invoices will be attempted (invoices will be created, but then immediately automatically closed). After receiving updated payment information from a customer, you may choose to reopen and pay their closed invoices.
   */
  status:
    | "active"
    | "canceled"
    | "incomplete"
    | "incomplete_expired"
    | "past_due"
    | "trialing"
    | "unpaid";
  /*
   * The account (if any) the subscription's payments will be attributed to for tax reporting, and where funds from each payment will be transferred to for each of the subscription's invoices.
   */
  transfer_data?: SubscriptionTransferData | null;
  /*
   * If the subscription has a trial, the end of that trial.
   *
   * @format unix-time
   */
  trial_end?: number | null;
  /*
   * If the subscription has a trial, the beginning of that trial.
   *
   * @format unix-time
   */
  trial_start?: number | null;
};

export type SubscriptionAutomaticTax = {
  /*
   * Whether Stripe automatically computes tax on this subscription.
   */
  enabled: boolean;
};

export type SubscriptionBillingThresholds = {
  /*
   * Monetary threshold that triggers the subscription to create an invoice
   */
  amount_gte?: number | null;
  /*
   * Indicates if the `billing_cycle_anchor` should be reset when a threshold is reached. If true, `billing_cycle_anchor` will be updated to the date/time the threshold was last reached; otherwise, the value will remain unchanged. This value may not be `true` if the subscription contains items with plans that have `aggregate_usage=last_ever`.
   */
  reset_billing_cycle_anchor?: boolean | null;
};

/**
 * Subscription items allow you to create customer subscriptions with more than
 * one plan, making it easy to represent complex billing relationships.
 *
 * @x-resourceId subscription_item
 */
export type SubscriptionItem = {
  /*
   * Define thresholds at which an invoice will be sent, and the related subscription advanced to a new billing period
   */
  billing_thresholds?: SubscriptionItemBillingThresholds | null;
  /*
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   */
  created: number;
  /*
   * Unique identifier for the object.
   *
   * @maxLength 5000
   */
  id: string;
  /*
   * Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
   */
  metadata: {
    [key: string]: string;
  };
  /*
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: "subscription_item";
  price: Price;
  /*
   * The [quantity](https://stripe.com/docs/subscriptions/quantities) of the plan to which the customer should be subscribed.
   */
  quantity?: number;
  /*
   * The `subscription` this `subscription_item` belongs to.
   *
   * @maxLength 5000
   */
  subscription: string;
  /*
   * The tax rates which apply to this `subscription_item`. When set, the `default_tax_rates` on the subscription do not apply to this `subscription_item`.
   */
  tax_rates?: TaxRate[] | null;
};

export type SubscriptionItemBillingThresholds = {
  /*
   * Usage threshold that triggers the subscription to create an invoice
   */
  usage_gte?: number | null;
};

export type SubscriptionPendingInvoiceItemInterval = {
  /*
   * Specifies invoicing frequency. Either `day`, `week`, `month` or `year`.
   */
  interval: "day" | "month" | "week" | "year";
  /*
   * The number of intervals between invoices. For example, `interval=month` and `interval_count=3` bills every 3 months. Maximum of one year interval allowed (1 year, 12 months, or 52 weeks).
   */
  interval_count: number;
};

/**
 * A subscription schedule allows you to create and manage the lifecycle of a subscription by predefining expected changes.
 *
 * Related guide: [Subscription Schedules](https://stripe.com/docs/billing/subscriptions/subscription-schedules).
 *
 * @x-resourceId subscription_schedule
 */
export type SubscriptionSchedule = {
  /*
   * Time at which the subscription schedule was canceled. Measured in seconds since the Unix epoch.
   *
   * @format unix-time
   */
  canceled_at?: number | null;
  /*
   * Time at which the subscription schedule was completed. Measured in seconds since the Unix epoch.
   *
   * @format unix-time
   */
  completed_at?: number | null;
  /*
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   *
   * @format unix-time
   */
  created: number;
  /*
   * Object representing the start and end dates for the current phase of the subscription schedule, if it is `active`.
   */
  current_phase?: SubscriptionScheduleCurrentPhase | null;
  /*
   * ID of the customer who owns the subscription schedule.
   */
  customer: string | Customer | DeletedCustomer;
  default_settings: SubscriptionSchedulesResourceDefaultSettings;
  /*
   * Behavior of the subscription schedule and underlying subscription when it ends. Possible values are `release` and `cancel`.
   */
  end_behavior: "cancel" | "none" | "release" | "renew";
  /*
   * Unique identifier for the object.
   *
   * @maxLength 5000
   */
  id: string;
  /*
   * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
   */
  livemode: boolean;
  /*
   * Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
   */
  metadata?: {
    [key: string]: string;
  } | null;
  /*
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: "subscription_schedule";
  /*
   * Configuration for the subscription schedule's phases.
   */
  phases: SubscriptionSchedulePhaseConfiguration[];
  /*
   * Time at which the subscription schedule was released. Measured in seconds since the Unix epoch.
   *
   * @format unix-time
   */
  released_at?: number | null;
  /*
   * ID of the subscription once managed by the subscription schedule (if it is released).
   *
   * @maxLength 5000
   */
  released_subscription?: string | null;
  /*
   * The present status of the subscription schedule. Possible values are `not_started`, `active`, `completed`, `released`, and `canceled`. You can read more about the different states in our [behavior guide](https://stripe.com/docs/billing/subscriptions/subscription-schedules).
   */
  status: "active" | "canceled" | "completed" | "not_started" | "released";
  /*
   * ID of the subscription managed by the subscription schedule.
   */
  subscription?: string | Subscription | null;
};

/**
 * An Add Invoice Item describes the prices and quantities that will be added as pending invoice items when entering a phase.
 */
export type SubscriptionScheduleAddInvoiceItem = {
  /*
   * ID of the price used to generate the invoice item.
   */
  price: string | Price | DeletedPrice;
  /*
   * The quantity of the invoice item.
   */
  quantity?: number | null;
  /*
   * The tax rates which apply to the item. When set, the `default_tax_rates` do not apply to this item.
   */
  tax_rates?: TaxRate[] | null;
};

/**
 * A phase item describes the price and quantity of a phase.
 */
export type SubscriptionScheduleConfigurationItem = {
  /*
   * Define thresholds at which an invoice will be sent, and the related subscription advanced to a new billing period
   */
  billing_thresholds?: SubscriptionItemBillingThresholds | null;
  /*
   * ID of the price to which the customer should be subscribed.
   */
  price: string | Price | DeletedPrice;
  /*
   * Quantity of the plan to which the customer should be subscribed.
   */
  quantity?: number;
  /*
   * The tax rates which apply to this `phase_item`. When set, the `default_tax_rates` on the phase do not apply to this `phase_item`.
   */
  tax_rates?: TaxRate[] | null;
};

export type SubscriptionScheduleCurrentPhase = {
  /*
   * The end of this phase of the subscription schedule.
   *
   * @format unix-time
   */
  end_date: number;
  /*
   * The start of this phase of the subscription schedule.
   *
   * @format unix-time
   */
  start_date: number;
};

/**
 * A phase describes the plans, coupon, and trialing status of a subscription for a predefined time period.
 */
export type SubscriptionSchedulePhaseConfiguration = {
  /*
   * A list of prices and quantities that will generate invoice items appended to the first invoice for this phase.
   */
  add_invoice_items: SubscriptionScheduleAddInvoiceItem[];
  /*
   * A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice subtotal that will be transferred to the application owner's Stripe account during this phase of the schedule.
   */
  application_fee_percent?: number | null;
  automatic_tax?: SchedulesPhaseAutomaticTax;
  /*
   * Possible values are `phase_start` or `automatic`. If `phase_start` then billing cycle anchor of the subscription is set to the start of the phase when entering the phase. If `automatic` then the billing cycle anchor is automatically modified as needed when entering the phase. For more information, see the billing cycle [documentation](https://stripe.com/docs/billing/subscriptions/billing-cycle).
   */
  billing_cycle_anchor?: "automatic" | "phase_start";
  /*
   * Define thresholds at which an invoice will be sent, and the subscription advanced to a new billing period
   */
  billing_thresholds?: SubscriptionBillingThresholds | null;
  /*
   * Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay the underlying subscription at the end of each billing cycle using the default source attached to the customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions.
   */
  collection_method?: "charge_automatically" | "send_invoice";
  /*
   * ID of the coupon to use during this phase of the subscription schedule.
   */
  coupon?: string | Coupon | DeletedCoupon | null;
  /*
   * ID of the default payment method for the subscription schedule. It must belong to the customer associated with the subscription schedule. If not set, invoices will use the default payment method in the customer's invoice settings.
   */
  default_payment_method?: string | PaymentMethod | null;
  /*
   * The default tax rates to apply to the subscription during this phase of the subscription schedule.
   */
  default_tax_rates?: TaxRate[] | null;
  /*
   * The end of this phase of the subscription schedule.
   *
   * @format unix-time
   */
  end_date: number;
  /*
   * The invoice settings applicable during this phase.
   */
  invoice_settings?: InvoiceSettingSubscriptionScheduleSetting | null;
  /*
   * Subscription items to configure the subscription to during this phase of the subscription schedule.
   */
  items: SubscriptionScheduleConfigurationItem[];
  /*
   * If the subscription schedule will prorate when transitioning to this phase. Possible values are `create_prorations` and `none`.
   */
  proration_behavior: "always_invoice" | "create_prorations" | "none";
  /*
   * The start of this phase of the subscription schedule.
   *
   * @format unix-time
   */
  start_date: number;
  /*
   * The account (if any) the associated subscription's payments will be attributed to for tax reporting, and where funds from each payment will be transferred to for each of the subscription's invoices.
   */
  transfer_data?: SubscriptionTransferData | null;
  /*
   * When the trial ends within the phase.
   *
   * @format unix-time
   */
  trial_end?: number | null;
};

export type SubscriptionSchedulesResourceDefaultSettings = {
  /*
   * A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice subtotal that will be transferred to the application owner's Stripe account during this phase of the schedule.
   */
  application_fee_percent?: number | null;
  automatic_tax?: SubscriptionSchedulesResourceDefaultSettingsAutomaticTax;
  /*
   * Possible values are `phase_start` or `automatic`. If `phase_start` then billing cycle anchor of the subscription is set to the start of the phase when entering the phase. If `automatic` then the billing cycle anchor is automatically modified as needed when entering the phase. For more information, see the billing cycle [documentation](https://stripe.com/docs/billing/subscriptions/billing-cycle).
   */
  billing_cycle_anchor: "automatic" | "phase_start";
  /*
   * Define thresholds at which an invoice will be sent, and the subscription advanced to a new billing period
   */
  billing_thresholds?: SubscriptionBillingThresholds | null;
  /*
   * Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay the underlying subscription at the end of each billing cycle using the default source attached to the customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions.
   */
  collection_method?: "charge_automatically" | "send_invoice";
  /*
   * ID of the default payment method for the subscription schedule. If not set, invoices will use the default payment method in the customer's invoice settings.
   */
  default_payment_method?: string | PaymentMethod | null;
  /*
   * The subscription schedule's default invoice settings.
   */
  invoice_settings?: InvoiceSettingSubscriptionScheduleSetting | null;
  /*
   * The account (if any) the associated subscription's payments will be attributed to for tax reporting, and where funds from each payment will be transferred to for each of the subscription's invoices.
   */
  transfer_data?: SubscriptionTransferData | null;
};

export type SubscriptionSchedulesResourceDefaultSettingsAutomaticTax = {
  /*
   * Whether Stripe automatically computes tax on invoices created during this phase.
   */
  enabled: boolean;
};

export type SubscriptionTransferData = {
  /*
   * A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice subtotal that will be transferred to the destination account. By default, the entire amount is transferred to the destination.
   */
  amount_percent?: number | null;
  /*
   * The account where funds from the payment will be transferred to upon payment success.
   */
  destination: string | Account;
};

/**
 * The Pause Collection settings determine how we will pause collection for this subscription and for how long the subscription
 * should be paused.
 */
export type SubscriptionsResourcePauseCollection = {
  /*
   * The payment collection behavior for this subscription while paused. One of `keep_as_draft`, `mark_uncollectible`, or `void`.
   */
  behavior: "keep_as_draft" | "mark_uncollectible" | "void";
  /*
   * The time after which the subscription will resume collecting payments.
   *
   * @format unix-time
   */
  resumes_at?: number | null;
};

export type SubscriptionsResourcePaymentMethodOptions = {
  /*
   * This sub-hash contains details about the Bancontact payment method options to pass to invoices created by the subscription.
   */
  bancontact?: InvoicePaymentMethodOptionsBancontact | null;
  /*
   * This sub-hash contains details about the Card payment method options to pass to invoices created by the subscription.
   */
  card?: InvoicePaymentMethodOptionsCard | null;
};

export type SubscriptionsResourcePaymentSettings = {
  /*
   * Payment-method-specific configuration to provide to invoices created by the subscription.
   */
  payment_method_options?: SubscriptionsResourcePaymentMethodOptions | null;
  /*
   * The list of payment method types to provide to every invoice created by the subscription. If not set, Stripe attempts to automatically determine the types to use by looking at the invoice’s default payment method, the subscription’s default payment method, the customer’s default payment method, and your [invoice template settings](https://dashboard.stripe.com/settings/billing/invoice).
   */
  payment_method_types?:
    | (
        | "ach_credit_transfer"
        | "ach_debit"
        | "au_becs_debit"
        | "bacs_debit"
        | "bancontact"
        | "boleto"
        | "card"
        | "fpx"
        | "giropay"
        | "ideal"
        | "sepa_debit"
        | "sofort"
        | "wechat_pay"
      )[]
    | null;
};

/**
 * Pending Updates store the changes pending from a previous update that will be applied
 * to the Subscription upon successful payment.
 */
export type SubscriptionsResourcePendingUpdate = {
  /*
   * If the update is applied, determines the date of the first full invoice, and, for plans with `month` or `year` intervals, the day of the month for subsequent invoices.
   *
   * @format unix-time
   */
  billing_cycle_anchor?: number | null;
  /*
   * The point after which the changes reflected by this update will be discarded and no longer applied.
   *
   * @format unix-time
   */
  expires_at: number;
  /*
   * List of subscription items, each with an attached plan, that will be set if the update is applied.
   */
  subscription_items?: SubscriptionItem[] | null;
  /*
   * Unix timestamp representing the end of the trial period the customer will get before being charged for the first time, if the update is applied.
   *
   * @format unix-time
   */
  trial_end?: number | null;
  /*
   * Indicates if a plan's `trial_period_days` should be applied to the subscription. Setting `trial_end` per subscription is preferred, and this defaults to `false`. Setting this flag to `true` together with `trial_end` is not allowed.
   */
  trial_from_plan?: boolean | null;
};

/**
 * [Tax codes](https://stripe.com/docs/tax/tax-codes) classify goods and services for tax purposes.
 *
 * @x-resourceId tax_code
 */
export type TaxCode = {
  /*
   * A detailed description of which types of products the tax code represents.
   *
   * @maxLength 5000
   */
  description: string;
  /*
   * Unique identifier for the object.
   *
   * @maxLength 5000
   */
  id: string;
  /*
   * A short name for the tax code.
   *
   * @maxLength 5000
   */
  name: string;
  /*
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: "tax_code";
};

export type TaxDeductedAtSource = {
  /*
   * Unique identifier for the object.
   *
   * @maxLength 5000
   */
  id: string;
  /*
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: "tax_deducted_at_source";
  /*
   * The end of the invoicing period. This TDS applies to Stripe fees collected during this invoicing period.
   *
   * @format unix-time
   */
  period_end: number;
  /*
   * The start of the invoicing period. This TDS applies to Stripe fees collected during this invoicing period.
   *
   * @format unix-time
   */
  period_start: number;
  /*
   * The TAN that was supplied to Stripe when TDS was assessed
   *
   * @maxLength 5000
   */
  tax_deduction_account_number: string;
};

/**
 * You can add one or multiple tax IDs to a [customer](https://stripe.com/docs/api/customers).
 * A customer's tax IDs are displayed on invoices and credit notes issued for the customer.
 *
 * Related guide: [Customer Tax Identification Numbers](https://stripe.com/docs/billing/taxes/tax-ids).
 *
 * @x-resourceId tax_id
 */
export type TaxId = {
  /*
   * Two-letter ISO code representing the country of the tax ID.
   *
   * @maxLength 5000
   */
  country?: string | null;
  /*
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   *
   * @format unix-time
   */
  created: number;
  /*
   * ID of the customer.
   */
  customer?: string | Customer | null;
  /*
   * Unique identifier for the object.
   *
   * @maxLength 5000
   */
  id: string;
  /*
   * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
   */
  livemode: boolean;
  /*
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: "tax_id";
  /*
   * Type of the tax ID, one of `ae_trn`, `au_abn`, `au_arn`, `br_cnpj`, `br_cpf`, `ca_bn`, `ca_gst_hst`, `ca_pst_bc`, `ca_pst_mb`, `ca_pst_sk`, `ca_qst`, `ch_vat`, `cl_tin`, `es_cif`, `eu_vat`, `gb_vat`, `hk_br`, `id_npwp`, `il_vat`, `in_gst`, `jp_cn`, `jp_rn`, `kr_brn`, `li_uid`, `mx_rfc`, `my_frp`, `my_itn`, `my_sst`, `no_vat`, `nz_gst`, `ru_inn`, `ru_kpp`, `sa_vat`, `sg_gst`, `sg_uen`, `th_vat`, `tw_vat`, `us_ein`, or `za_vat`. Note that some legacy tax IDs have type `unknown`
   */
  type:
    | "ae_trn"
    | "au_abn"
    | "au_arn"
    | "br_cnpj"
    | "br_cpf"
    | "ca_bn"
    | "ca_gst_hst"
    | "ca_pst_bc"
    | "ca_pst_mb"
    | "ca_pst_sk"
    | "ca_qst"
    | "ch_vat"
    | "cl_tin"
    | "es_cif"
    | "eu_vat"
    | "gb_vat"
    | "hk_br"
    | "id_npwp"
    | "il_vat"
    | "in_gst"
    | "jp_cn"
    | "jp_rn"
    | "kr_brn"
    | "li_uid"
    | "mx_rfc"
    | "my_frp"
    | "my_itn"
    | "my_sst"
    | "no_vat"
    | "nz_gst"
    | "ru_inn"
    | "ru_kpp"
    | "sa_vat"
    | "sg_gst"
    | "sg_uen"
    | "th_vat"
    | "tw_vat"
    | "unknown"
    | "us_ein"
    | "za_vat";
  /*
   * Value of the tax ID.
   *
   * @maxLength 5000
   */
  value: string;
  /*
   * Tax ID verification information.
   */
  verification?: TaxIdVerification | null;
};

export type TaxIdVerification = {
  /*
   * Verification status, one of `pending`, `verified`, `unverified`, or `unavailable`.
   */
  status: "pending" | "unavailable" | "unverified" | "verified";
  /*
   * Verified address.
   *
   * @maxLength 5000
   */
  verified_address?: string | null;
  /*
   * Verified name.
   *
   * @maxLength 5000
   */
  verified_name?: string | null;
};

/**
 * Tax rates can be applied to [invoices](https://stripe.com/docs/billing/invoices/tax-rates), [subscriptions](https://stripe.com/docs/billing/subscriptions/taxes) and [Checkout Sessions](https://stripe.com/docs/payments/checkout/set-up-a-subscription#tax-rates) to collect tax.
 *
 * Related guide: [Tax Rates](https://stripe.com/docs/billing/taxes/tax-rates).
 *
 * @x-resourceId tax_rate
 */
export type TaxRate = {
  /*
   * Defaults to `true`. When set to `false`, this tax rate cannot be used with new applications or Checkout Sessions, but will still work for subscriptions and invoices that already have it set.
   */
  active: boolean;
  /*
   * Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).
   *
   * @maxLength 5000
   */
  country?: string | null;
  /*
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   *
   * @format unix-time
   */
  created: number;
  /*
   * An arbitrary string attached to the tax rate for your internal use only. It will not be visible to your customers.
   *
   * @maxLength 5000
   */
  description?: string | null;
  /*
   * The display name of the tax rates as it will appear to your customer on their receipt email, PDF, and the hosted invoice page.
   *
   * @maxLength 5000
   */
  display_name: string;
  /*
   * Unique identifier for the object.
   *
   * @maxLength 5000
   */
  id: string;
  /*
   * This specifies if the tax rate is inclusive or exclusive.
   */
  inclusive: boolean;
  /*
   * The jurisdiction for the tax rate. You can use this label field for tax reporting purposes. It also appears on your customer’s invoice.
   *
   * @maxLength 5000
   */
  jurisdiction?: string | null;
  /*
   * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
   */
  livemode: boolean;
  /*
   * Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
   */
  metadata?: {
    [key: string]: string;
  } | null;
  /*
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: "tax_rate";
  /*
   * This represents the tax rate percent out of 100.
   */
  percentage: number;
  /*
   * [ISO 3166-2 subdivision code](https://en.wikipedia.org/wiki/ISO_3166-2:US), without country prefix. For example, "NY" for New York, United States.
   *
   * @maxLength 5000
   */
  state?: string | null;
  /*
   * The high-level tax type, such as `vat` or `sales_tax`.
   */
  tax_type?: "gst" | "hst" | "pst" | "qst" | "sales_tax" | "vat";
};

/**
 * A Connection Token is used by the Stripe Terminal SDK to connect to a reader.
 *
 * Related guide: [Fleet Management](https://stripe.com/docs/terminal/creating-locations).
 *
 * @x-resourceId terminal.connection_token
 */
export type TerminalConnectionToken = {
  /*
   * The id of the location that this connection token is scoped to. Note that location scoping only applies to internet-connected readers. For more details, see [the docs on scoping connection tokens](https://stripe.com/docs/terminal/readers/fleet-management#connection-tokens).
   *
   * @maxLength 5000
   */
  location?: string;
  /*
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: "terminal.connection_token";
  /*
   * Your application should pass this token to the Stripe Terminal SDK.
   *
   * @maxLength 5000
   */
  secret: string;
};

/**
 * A Location represents a grouping of readers.
 *
 * Related guide: [Fleet Management](https://stripe.com/docs/terminal/creating-locations).
 *
 * @x-resourceId terminal.location
 */
export type TerminalLocation = {
  address: Address;
  /*
   * The display name of the location.
   *
   * @maxLength 5000
   */
  display_name: string;
  /*
   * Unique identifier for the object.
   *
   * @maxLength 5000
   */
  id: string;
  /*
   * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
   */
  livemode: boolean;
  /*
   * Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
   */
  metadata: {
    [key: string]: string;
  };
  /*
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: "terminal.location";
};

/**
 * A Reader represents a physical device for accepting payment details.
 *
 * Related guide: [Connecting to a Reader](https://stripe.com/docs/terminal/readers/connecting).
 *
 * @x-resourceId terminal.reader
 */
export type TerminalReader = {
  /*
   * The current software version of the reader.
   *
   * @maxLength 5000
   */
  device_sw_version?: string | null;
  /*
   * Type of reader, one of `bbpos_chipper2x` or `verifone_P400`.
   */
  device_type: "bbpos_chipper2x" | "verifone_P400";
  /*
   * Unique identifier for the object.
   *
   * @maxLength 5000
   */
  id: string;
  /*
   * The local IP address of the reader.
   *
   * @maxLength 5000
   */
  ip_address?: string | null;
  /*
   * Custom label given to the reader for easier identification.
   *
   * @maxLength 5000
   */
  label: string;
  /*
   * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
   */
  livemode: boolean;
  /*
   * The location identifier of the reader.
   */
  location?: string | TerminalLocation | null;
  /*
   * Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
   */
  metadata: {
    [key: string]: string;
  };
  /*
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: "terminal.reader";
  /*
   * Serial number of the reader.
   *
   * @maxLength 5000
   */
  serial_number: string;
  /*
   * The networking status of the reader.
   *
   * @maxLength 5000
   */
  status?: string | null;
};

/**
 * Cardholder authentication via 3D Secure is initiated by creating a `3D Secure`
 * object. Once the object has been created, you can use it to authenticate the
 * cardholder and create a charge.
 *
 * @x-resourceId three_d_secure
 */
export type ThreeDSecure = {
  /*
   * Amount of the charge that you will create when authentication completes.
   */
  amount: number;
  /*
   * True if the cardholder went through the authentication flow and their bank indicated that authentication succeeded.
   */
  authenticated: boolean;
  card: Card;
  /*
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   *
   * @format unix-time
   */
  created: number;
  /*
   * Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
   *
   * @maxLength 5000
   */
  currency: string;
  /*
   * Unique identifier for the object.
   *
   * @maxLength 5000
   */
  id: string;
  /*
   * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
   */
  livemode: boolean;
  /*
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: "three_d_secure";
  /*
   * If present, this is the URL that you should send the cardholder to for authentication. If you are going to use Stripe.js to display the authentication page in an iframe, you should use the value "_callback".
   *
   * @maxLength 5000
   */
  redirect_url?: string | null;
  /*
   * Possible values are `redirect_pending`, `succeeded`, or `failed`. When the cardholder can be authenticated, the object starts with status `redirect_pending`. When liability will be shifted to the cardholder's bank (either because the cardholder was successfully authenticated, or because the bank has not implemented 3D Secure, the object wlil be in status `succeeded`. `failed` indicates that authentication was attempted unsuccessfully.
   *
   * @maxLength 5000
   */
  status: string;
};

export type ThreeDSecureDetails = {
  /*
   * For authenticated transactions: how the customer was authenticated by
   * the issuing bank.
   */
  authentication_flow?: "challenge" | "frictionless";
  /*
   * Indicates the outcome of 3D Secure authentication.
   *
   * @x-stripeBypassValidation true
   */
  result?:
    | "attempt_acknowledged"
    | "authenticated"
    | "failed"
    | "not_supported"
    | "processing_error";
  /*
   * Additional information about why 3D Secure succeeded or failed based
   * on the `result`.
   */
  result_reason?:
    | "abandoned"
    | "bypassed"
    | "canceled"
    | "card_not_enrolled"
    | "network_not_supported"
    | "protocol_error"
    | "rejected";
  /*
   * The version of 3D Secure that was used.
   */
  version?: "1.0.2" | "2.1.0" | "2.2.0";
};

export type ThreeDSecureUsage = {
  /*
   * Whether 3D Secure is supported on this card.
   */
  supported: boolean;
};

/**
 * Tokenization is the process Stripe uses to collect sensitive card or bank
 * account details, or personally identifiable information (PII), directly from
 * your customers in a secure manner. A token representing this information is
 * returned to your server to use. You should use our
 * [recommended payments integrations](https://stripe.com/docs/payments) to perform this process
 * client-side. This ensures that no sensitive card data touches your server,
 * and allows your integration to operate in a PCI-compliant way.
 *
 * If you cannot use client-side tokenization, you can also create tokens using
 * the API with either your publishable or secret API key. Keep in mind that if
 * your integration uses this method, you are responsible for any PCI compliance
 * that may be required, and you must keep your secret API key safe. Unlike with
 * client-side tokenization, your customer's information is not sent directly to
 * Stripe, so we cannot determine how it is handled or stored.
 *
 * Tokens cannot be stored or used more than once. To store card or bank account
 * information for later use, you can create [Customer](https://stripe.com/docs/api#customers)
 * objects or [Custom accounts](https://stripe.com/docs/api#external_accounts). Note that
 * [Radar](https://stripe.com/docs/radar), our integrated solution for automatic fraud protection,
 * performs best with integrations that use client-side tokenization.
 *
 * Related guide: [Accept a payment](https://stripe.com/docs/payments/accept-a-payment-charges#web-create-token)
 *
 * @x-resourceId token
 */
export type Token = {
  bank_account?: BankAccount;
  card?: Card;
  /*
   * IP address of the client that generated the token.
   *
   * @maxLength 5000
   */
  client_ip?: string | null;
  /*
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   *
   * @format unix-time
   */
  created: number;
  /*
   * Unique identifier for the object.
   *
   * @maxLength 5000
   */
  id: string;
  /*
   * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
   */
  livemode: boolean;
  /*
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: "token";
  /*
   * Type of the token: `account`, `bank_account`, `card`, or `pii`.
   *
   * @maxLength 5000
   */
  type: string;
  /*
   * Whether this token has already been used (tokens can be used only once).
   */
  used: boolean;
};

/**
 * To top up your Stripe balance, you create a top-up object. You can retrieve
 * individual top-ups, as well as list all top-ups. Top-ups are identified by a
 * unique, random ID.
 *
 * Related guide: [Topping Up your Platform Account](https://stripe.com/docs/connect/top-ups).
 *
 * @x-resourceId topup
 */
export type Topup = {
  /*
   * Amount transferred.
   */
  amount: number;
  /*
   * ID of the balance transaction that describes the impact of this top-up on your account balance. May not be specified depending on status of top-up.
   */
  balance_transaction?: string | BalanceTransaction | null;
  /*
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   *
   * @format unix-time
   */
  created: number;
  /*
   * Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
   *
   * @maxLength 5000
   */
  currency: string;
  /*
   * An arbitrary string attached to the object. Often useful for displaying to users.
   *
   * @maxLength 5000
   */
  description?: string | null;
  /*
   * Date the funds are expected to arrive in your Stripe account for payouts. This factors in delays like weekends or bank holidays. May not be specified depending on status of top-up.
   */
  expected_availability_date?: number | null;
  /*
   * Error code explaining reason for top-up failure if available (see [the errors section](https://stripe.com/docs/api#errors) for a list of codes).
   *
   * @maxLength 5000
   */
  failure_code?: string | null;
  /*
   * Message to user further explaining reason for top-up failure if available.
   *
   * @maxLength 5000
   */
  failure_message?: string | null;
  /*
   * Unique identifier for the object.
   *
   * @maxLength 5000
   */
  id: string;
  /*
   * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
   */
  livemode: boolean;
  /*
   * Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
   */
  metadata: {
    [key: string]: string;
  };
  /*
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: "topup";
  source: Source;
  /*
   * Extra information about a top-up. This will appear on your source's bank statement. It must contain at least one letter.
   *
   * @maxLength 5000
   */
  statement_descriptor?: string | null;
  /*
   * The status of the top-up is either `canceled`, `failed`, `pending`, `reversed`, or `succeeded`.
   */
  status: "canceled" | "failed" | "pending" | "reversed" | "succeeded";
  /*
   * A string that identifies this top-up as part of a group.
   *
   * @maxLength 5000
   */
  transfer_group?: string | null;
};

/**
 * A `Transfer` object is created when you move funds between Stripe accounts as
 * part of Connect.
 *
 * Before April 6, 2017, transfers also represented movement of funds from a
 * Stripe account to a card or bank account. This behavior has since been split
 * out into a [Payout](https://stripe.com/docs/api#payout_object) object, with corresponding payout endpoints. For more
 * information, read about the
 * [transfer/payout split](https://stripe.com/docs/transfer-payout-split).
 *
 * Related guide: [Creating Separate Charges and Transfers](https://stripe.com/docs/connect/charges-transfers).
 *
 * @x-resourceId transfer
 */
export type Transfer = {
  /*
   * Amount in %s to be transferred.
   */
  amount: number;
  /*
   * Amount in %s reversed (can be less than the amount attribute on the transfer if a partial reversal was issued).
   */
  amount_reversed: number;
  /*
   * Balance transaction that describes the impact of this transfer on your account balance.
   */
  balance_transaction?: string | BalanceTransaction | null;
  /*
   * Time that this record of the transfer was first created.
   *
   * @format unix-time
   */
  created: number;
  /*
   * Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
   */
  currency: string;
  /*
   * An arbitrary string attached to the object. Often useful for displaying to users.
   *
   * @maxLength 5000
   */
  description?: string | null;
  /*
   * ID of the Stripe account the transfer was sent to.
   */
  destination?: string | Account | null;
  /*
   * If the destination is a Stripe account, this will be the ID of the payment that the destination account received for the transfer.
   */
  destination_payment?: string | Charge;
  /*
   * Unique identifier for the object.
   *
   * @maxLength 5000
   */
  id: string;
  /*
   * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
   */
  livemode: boolean;
  /*
   * Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
   */
  metadata: {
    [key: string]: string;
  };
  /*
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: "transfer";
  /*
   * A list of reversals that have been applied to the transfer.
   */
  reversals: {
    /*
     * Details about each object.
     */
    data: TransferReversal[];
    /*
     * True if this list has another page of items after this one that can be fetched.
     */
    has_more: boolean;
    /*
     * String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
     */
    object: "list";
    /*
     * The URL where this list can be accessed.
     *
     * @maxLength 5000
     */
    url: string;
  };
  /*
   * Whether the transfer has been fully reversed. If the transfer is only partially reversed, this attribute will still be false.
   */
  reversed: boolean;
  /*
   * ID of the charge or payment that was used to fund the transfer. If null, the transfer was funded from the available balance.
   */
  source_transaction?: string | Charge | null;
  /*
   * The source balance this transfer came from. One of `card`, `fpx`, or `bank_account`.
   *
   * @maxLength 5000
   */
  source_type?: string | null;
  /*
   * A string that identifies this transaction as part of a group. See the [Connect documentation](https://stripe.com/docs/connect/charges-transfers#transfer-options) for details.
   *
   * @maxLength 5000
   */
  transfer_group?: string | null;
};

export type TransferData = {
  /*
   * Amount intended to be collected by this PaymentIntent. A positive integer representing how much to charge in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal) (e.g., 100 cents to charge $1.00 or 100 to charge ¥100, a zero-decimal currency). The minimum amount is $0.50 US or [equivalent in charge currency](https://stripe.com/docs/currencies#minimum-and-maximum-charge-amounts). The amount value supports up to eight digits (e.g., a value of 99999999 for a USD charge of $999,999.99).
   */
  amount?: number;
  /*
   * The account (if any) the payment will be attributed to for tax
   * reporting, and where funds from the payment will be transferred to upon
   * payment success.
   */
  destination: string | Account;
};

/**
 * [Stripe Connect](https://stripe.com/docs/connect) platforms can reverse transfers made to a
 * connected account, either entirely or partially, and can also specify whether
 * to refund any related application fees. Transfer reversals add to the
 * platform's balance and subtract from the destination account's balance.
 *
 * Reversing a transfer that was made for a [destination
 * charge](/docs/connect/destination-charges) is allowed only up to the amount of
 * the charge. It is possible to reverse a
 * [transfer_group](https://stripe.com/docs/connect/charges-transfers#transfer-options)
 * transfer only if the destination account has enough balance to cover the
 * reversal.
 *
 * Related guide: [Reversing Transfers](https://stripe.com/docs/connect/charges-transfers#reversing-transfers).
 *
 * @x-resourceId transfer_reversal
 */
export type TransferReversal = {
  /*
   * Amount, in %s.
   */
  amount: number;
  /*
   * Balance transaction that describes the impact on your account balance.
   */
  balance_transaction?: string | BalanceTransaction | null;
  /*
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   *
   * @format unix-time
   */
  created: number;
  /*
   * Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
   */
  currency: string;
  /*
   * Linked payment refund for the transfer reversal.
   */
  destination_payment_refund?: string | Refund | null;
  /*
   * Unique identifier for the object.
   *
   * @maxLength 5000
   */
  id: string;
  /*
   * Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
   */
  metadata?: {
    [key: string]: string;
  } | null;
  /*
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: "transfer_reversal";
  /*
   * ID of the refund responsible for the transfer reversal.
   */
  source_refund?: string | Refund | null;
  /*
   * ID of the transfer that was reversed.
   */
  transfer: string | Transfer;
};

export type TransferSchedule = {
  /*
   * The number of days charges for the account will be held before being paid out.
   */
  delay_days: number;
  /*
   * How frequently funds will be paid out. One of `manual` (payouts only created via API call), `daily`, `weekly`, or `monthly`.
   *
   * @maxLength 5000
   */
  interval: string;
  /*
   * The day of the month funds will be paid out. Only shown if `interval` is monthly. Payouts scheduled between the 29th and 31st of the month are sent on the last day of shorter months.
   */
  monthly_anchor?: number;
  /*
   * The day of the week funds will be paid out, of the style 'monday', 'tuesday', etc. Only shown if `interval` is weekly.
   *
   * @maxLength 5000
   */
  weekly_anchor?: string;
};

export type TransformQuantity = {
  /*
   * Divide usage by this number.
   */
  divide_by: number;
  /*
   * After division, either round the result `up` or `down`.
   */
  round: "down" | "up";
};

export type TransformUsage = {
  /*
   * Divide usage by this number.
   */
  divide_by: number;
  /*
   * After division, either round the result `up` or `down`.
   */
  round: "down" | "up";
};

/**
 * Usage records allow you to report customer usage and metrics to Stripe for
 * metered billing of subscription prices.
 *
 * Related guide: [Metered Billing](https://stripe.com/docs/billing/subscriptions/metered-billing).
 *
 * @x-resourceId usage_record
 */
export type UsageRecord = {
  /*
   * Unique identifier for the object.
   *
   * @maxLength 5000
   */
  id: string;
  /*
   * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
   */
  livemode: boolean;
  /*
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: "usage_record";
  /*
   * The usage quantity for the specified date.
   */
  quantity: number;
  /*
   * The ID of the subscription item this usage record contains data for.
   *
   * @maxLength 5000
   */
  subscription_item: string;
  /*
   * The timestamp when this usage occurred.
   *
   * @format unix-time
   */
  timestamp: number;
};

/**
 * @x-resourceId usage_record_summary
 */
export type UsageRecordSummary = {
  /*
   * Unique identifier for the object.
   *
   * @maxLength 5000
   */
  id: string;
  /*
   * The invoice in which this usage period has been billed for.
   *
   * @maxLength 5000
   */
  invoice?: string | null;
  /*
   * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
   */
  livemode: boolean;
  /*
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: "usage_record_summary";
  period: Period;
  /*
   * The ID of the subscription item this summary is describing.
   *
   * @maxLength 5000
   */
  subscription_item: string;
  /*
   * The total usage within this usage period.
   */
  total_usage: number;
};

export type VerificationSessionRedaction = {
  /*
   * Indicates whether this object and its related objects have been redacted or not.
   */
  status: "processing" | "redacted";
};

/**
 * You can configure [webhook endpoints](https://stripe.com/docs/webhooks/) via the API to be
 * notified about events that happen in your Stripe account or connected
 * accounts.
 *
 * Most users configure webhooks from [the dashboard](https://dashboard.stripe.com/webhooks), which provides a user interface for registering and testing your webhook endpoints.
 *
 * Related guide: [Setting up Webhooks](https://stripe.com/docs/webhooks/configure).
 *
 * @x-resourceId webhook_endpoint
 */
export type WebhookEndpoint = {
  /*
   * The API version events are rendered as for this webhook endpoint.
   *
   * @maxLength 5000
   */
  api_version?: string | null;
  /*
   * The ID of the associated Connect application.
   *
   * @maxLength 5000
   */
  application?: string | null;
  /*
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   *
   * @format unix-time
   */
  created: number;
  /*
   * An optional description of what the webhook is used for.
   *
   * @maxLength 5000
   */
  description?: string | null;
  /*
   * The list of events to enable for this endpoint. `['*']` indicates that all events are enabled, except those that require explicit selection.
   */
  enabled_events: string[];
  /*
   * Unique identifier for the object.
   *
   * @maxLength 5000
   */
  id: string;
  /*
   * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
   */
  livemode: boolean;
  /*
   * Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
   */
  metadata: {
    [key: string]: string;
  };
  /*
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: "webhook_endpoint";
  /*
   * The endpoint's secret, used to generate [webhook signatures](https://stripe.com/docs/webhooks/signatures). Only returned at creation.
   *
   * @maxLength 5000
   */
  secret?: string;
  /*
   * The status of the webhook. It can be `enabled` or `disabled`.
   *
   * @maxLength 5000
   */
  status: string;
  /*
   * The URL of the webhook endpoint.
   *
   * @maxLength 5000
   */
  url: string;
};
